#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ЗадачаВыполнима(Задача, ТочкаМаршрута) Экспорт
	
	Если ТочкаМаршрута = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ОжиданиеНепроверенныхКоммитов Тогда
		ЗадачаВыполнима = ОжиданиеНепроверенныхКоммитов(Задача.БизнесПроцесс);
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.СинтаксическийКонтроль Тогда
		ЗадачаВыполнима = СинтаксическийКонтрольЗавершен(Задача.БизнесПроцесс);
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ЗапускПайплайна Тогда
		ЗадачаВыполнима = ЗапускПайплайна(Задача.БизнесПроцесс);
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ОжиданиеЗавершенияПайплайна Тогда
		ЗадачаВыполнима = КонвейерЗавершен(Задача.БизнесПроцесс);
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.СборРезультатаПайплайна Тогда
		ЗадачаВыполнима = СборРезультатаПайплайна(Задача.БизнесПроцесс);
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ПолучениеФайлаКонфигурации Тогда
		ЗадачаВыполнима = ПолучениеФайловКонфигурации(Задача.БизнесПроцесс);
		
	Иначе
		ЗадачаВыполнима = Истина;
		
	КонецЕсли;
	
	Возврат ЗадачаВыполнима;
	
КонецФункции

Функция МожноАвтозавершитьЗадачу(Задача, ТочкаМаршрута) Экспорт
	
	Можно = Ложь;
	
	Если ТочкаМаршрута = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ПроверкаСинтаксическогоКонтроля 
		Или ТочкаМаршрута = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.СинтаксическийКонтроль Тогда
		// Если Мазеев уже проверил и есть блокирующие ошибки, то задача синт. контроля больше не нужна
		Если Задача.БизнесПроцесс.ЕстьБлокирующиеОшибки и ЗадачаПроверкаПайплайнаВыполнена(Задача.БизнесПроцесс) Тогда
			Можно = Истина;
		КонецЕсли;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ПодготовкаТестовыхБаз Тогда
		Если ТестоваяБазаЕщеНужна(Задача.БизнесПроцесс) = Ложь Тогда
			Можно = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Можно;
	
КонецФункции

Процедура ПриАвтозавершении(Задача, ТочкаМаршрута) Экспорт
КонецПроцедуры

// Процедура - Перезапуск подготовки тестовых баз
// Выполняется утром после восстановления ночных баз. После этой операции лучше обновить наши клоны предпрод
Процедура ПерезапускПодготовкиТестовыхБаз() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КонвейерОбработки.Конфигурация КАК Конфигурация,
		|	МАКСИМУМ(КонвейерОбработки.Дата) КАК Дата
		|ПОМЕСТИТЬ ВтМаксимальныеДаты
		|ИЗ
		|	БизнесПроцесс.КонвейерОбработки КАК КонвейерОбработки
		|
		|СГРУППИРОВАТЬ ПО
		|	КонвейерОбработки.Конфигурация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонвейерОбработки.Конфигурация КАК Конфигурация,
		|	МАКСИМУМ(КонвейерОбработки.Ссылка) КАК КонвейерОбработки
		|ПОМЕСТИТЬ ВтТекущиеКонвейерыОбработки
		|ИЗ
		|	БизнесПроцесс.КонвейерОбработки КАК КонвейерОбработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтМаксимальныеДаты КАК ВтМаксимальныеДаты
		|		ПО КонвейерОбработки.Конфигурация = ВтМаксимальныеДаты.Конфигурация
		|			И КонвейерОбработки.Дата = ВтМаксимальныеДаты.Дата
		|ГДЕ
		|	КонвейерОбработки.Стартован
		|	И НЕ КонвейерОбработки.ПометкаУдаления
		|	И НЕ КонвейерОбработки.Завершен
		|
		|СГРУППИРОВАТЬ ПО
		|	КонвейерОбработки.Конфигурация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодготовкаТестовойБазы.Конфигурация КАК Конфигурация,
		|	ПодготовкаТестовойБазы.КонвейерОбработки КАК КонвейерОбработки,
		|	ПодготовкаТестовойБазы.Ссылка КАК ПодготовкаТестовойБазы,
		|	ЗадачаИсполнителя.Ссылка КАК Задача
		|ИЗ
		|	БизнесПроцесс.ПодготовкаТестовойБазы КАК ПодготовкаТестовойБазы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТекущиеКонвейерыОбработки КАК ВтТекущиеКонвейерыОбработки
		|		ПО ПодготовкаТестовойБазы.КонвейерОбработки = ВтТекущиеКонвейерыОбработки.КонвейерОбработки
		|			И (ПодготовкаТестовойБазы.Стартован)
		|			И (НЕ ПодготовкаТестовойБазы.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО ПодготовкаТестовойБазы.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
		|ИТОГИ ПО
		|	Конфигурация,
		|	КонвейерОбработки,
		|	ПодготовкаТестовойБазы";
	ВыборкаКонфигурация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонфигурация.Следующий() Цикл
		ВыборкаКонвейерОбработки = ВыборкаКонфигурация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонвейерОбработки.Следующий() Цикл
			Если ТестоваяБазаЕщеНужна(ВыборкаКонвейерОбработки.КонвейерОбработки) = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаПодготовкаТестовойБазы = ВыборкаКонвейерОбработки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПодготовкаТестовойБазы.Следующий() Цикл
				ВыборкаЗадачи = ВыборкаПодготовкаТестовойБазы.Выбрать();
				Пока ВыборкаЗадачи.Следующий() Цикл
					Если Не ЗначениеЗаполнено(ВыборкаЗадачи.Задача) Тогда
						Продолжить;
					КонецЕсли;
					Задача = ВыборкаЗадачи.Задача.ПолучитьОбъект();
					Задача.Удалить();
				КонецЦикла;
				БП = ВыборкаПодготовкаТестовойБазы.ПодготовкаТестовойБазы.ПолучитьОбъект();
				БП.Стартован = Ложь;
				БП.Завершен = Ложь;
				БП.ОшибкаСозданияКлона = Ложь;
				БП.Дата = ТекущаяДатаСеанса();
				БП.Сообщения.Очистить();
				БП.Старт();
			КонецЦикла;
			Конвейер = ВыборкаКонвейерОбработки.КонвейерОбработки.ПолучитьОбъект();
			Для Каждого Стр Из Конвейер.ТестовыеБазы Цикл
				Стр.Подготовлена = Ложь;
				Стр.ОшибкаПроготовки = Ложь;
				Стр.Причина = "";
			КонецЦикла;
			Конвейер.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьНовыеКоммиты(Хранилище) Экспорт
	Возврат ПолучитьДанныеПоПеренесеннымИПровереннымКоммитам(Хранилище).ПеренесенныеКоммиты.Количество() > 0;
КонецФункции

Функция ПолучитьДанныеПоПеренесеннымИПровереннымКоммитам(Хранилище) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хранилища.Ссылка КАК Хранилище,
		|	ПоследнийПроверенныйКоммит.Коммит КАК Коммит,
		|	ЕСТЬNULL(ПоследнийПроверенныйКоммит.Коммит.Код, 0) КАК Код
		|ПОМЕСТИТЬ ПоследнийПроверенныйКоммит
		|ИЗ
		|	Справочник.Хранилища КАК Хранилища
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоследниеПроверенныеКоммиты.СрезПоследних(, Успех = ИСТИНА) КАК ПоследнийПроверенныйКоммит
		|		ПО Хранилища.Ссылка = ПоследнийПроверенныйКоммит.Коммит.Владелец
		|ГДЕ
		|	&Хранилище В (Хранилища.Ссылка, Хранилища.БазовоеХранилище)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Влож.Хранилище КАК Хранилище,
		|	Влож.Код КАК Код,
		|	ИсторияХранилища.Ссылка КАК Коммит
		|ПОМЕСТИТЬ ПоследнийЗагруженныйКоммит
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИсторияХранилища.Владелец КАК Хранилище,
		|		МАКСИМУМ(ИсторияХранилища.Код) КАК Код
		|	ИЗ
		|		Справочник.ИсторияХранилища КАК ИсторияХранилища
		|	ГДЕ
		|		&Хранилище В (ИсторияХранилища.Владелец, ИсторияХранилища.Владелец.БазовоеХранилище)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИсторияХранилища.Владелец) КАК Влож
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсторияХранилища КАК ИсторияХранилища
		|		ПО Влож.Хранилище = ИсторияХранилища.Владелец
		|			И Влож.Код = ИсторияХранилища.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 99999
		|	ИсторияХранилища.Владелец КАК Хранилище,
		|	ИсторияХранилища.Ссылка КАК Коммит
		|ПОМЕСТИТЬ НовыеКоммиты
		|ИЗ
		|	Справочник.ИсторияХранилища КАК ИсторияХранилища
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследнийПроверенныйКоммит КАК ПоследнийПроверенныйКоммит
		|		ПО ИсторияХранилища.Владелец = ПоследнийПроверенныйКоммит.Хранилище
		|			И ИсторияХранилища.Код > ПоследнийПроверенныйКоммит.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсторияХранилища.Код";
	Запрос.УстановитьПараметр("Хранилище", Хранилище);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	Результат = Новый Структура("ПоследнийЗагруженныйКоммит, ПоследнийПроверенныйКоммит");
	Для Каждого Эл Из Результат Цикл
		ТЗ = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(Эл.Ключ).ПолучитьДанные().Выгрузить();
		Результат[Эл.Ключ] = ?(ТЗ.Количество(), ТЗ[0].Коммит, ПредопределенноеЗначение("Справочник.ИсторияХранилища.ПустаяСсылка"));
	КонецЦикла;
	Результат.Вставить("ПеренесенныеКоммиты", Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("НовыеКоммиты").ПолучитьДанные().Выгрузить());
	Возврат Результат;
КонецФункции

Функция СинтаксическийКонтрольОтключен(БП) Экспорт
	ДействияСинтаксическийКонтроль = Справочники.ДействияКонвейераОбработки.СинтаксическийКонтроль;
	СтрокаШагаКонвейера = БП.ШагиКонвейера.Найти(ДействияСинтаксическийКонтроль, "ДействиеКонвейераОбработки");
	Если СтрокаШагаКонвейера = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	ЕстьКонфигурация = АвтоматизированнаяПроверкаКода.ВыполнитьЗапросКАПК("ЕстьКонфигурация", БП.Хранилище.Наименование).ЕстьКонфигурация;
	Если Не ЕстьКонфигурация Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
	
Процедура ДобавитьСообщение(БП, Текст, Шаг, Ошибка = Ложь, ИсключитьДубли = Истина) Экспорт
	КонвейерОбработкиСервер.ДобавитьСообщениеБизнесПроцесс(БП, Текст, Шаг, 0, Ошибка, ИсключитьДубли);
КонецПроцедуры

Функция ЗапускНовогоБизнесПроцесса(Конфигурация, ДополнительныеРеквизиты = Неопределено) Экспорт
	НовыйЭкземпляр = БизнесПроцессы.КонвейерОбработки.СоздатьБизнесПроцесс();
	НовыйЭкземпляр.Дата = ТекущаяДатаСеанса();
	НовыйЭкземпляр.Конфигурация = Конфигурация;
	НовыйЭкземпляр.Хранилище = НовыйЭкземпляр.Конфигурация.ХранилищеОбновления;
	НовыйЭкземпляр.ШагиКонвейера.Загрузить(НовыйЭкземпляр.Конфигурация.ШагиКонвейера.Выгрузить());
	НовыйЭкземпляр.РучнойЗапуск = Ложь;
	
	Если ДополнительныеРеквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НовыйЭкземпляр, ДополнительныеРеквизиты);
		Если ДополнительныеРеквизиты.Свойство("ШагиКонвейера") Тогда 
			НовыйЭкземпляр.ШагиКонвейера.Загрузить(ДополнительныеРеквизиты.ШагиКонвейера);
		КонецЕсли;
	КонецЕсли;
	
	НовыйЭкземпляр.Записать();
	НовыйЭкземпляр.Старт();
	Возврат НовыйЭкземпляр.Ссылка;
КонецФункции

Функция ПолучитьПредставлениеЗадачиВHTML(ЗадачаБП) Экспорт
	Если Ложь Тогда
		Задача = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	КонецЕсли;
	БП = ?(ТипЗнч(ЗадачаБП) = Тип("ЗадачаСсылка.ЗадачаИсполнителя"), ЗадачаБП.БизнесПроцесс, ЗадачаБП);
	Если Ложь Тогда
		БП = БизнесПроцессы.КонвейерОбработки.ПустаяСсылка();
	КонецЕсли;
	
	ОписаниеЗадачи = Новый ТекстовыйДокумент;
	ОписаниеЗадачи.ДобавитьСтроку("<html><body>");
	ОписаниеЗадачи.ДобавитьСтроку(СтрШаблон("<h3><a href=""%1"">%2</a></h3><br/>",
		ПолучитьНавигационнуюСсылку(БП), БП));
	ОписаниеЗадачи.ДобавитьСтроку(СтрШаблон("Проект: %1<br/>",
		БП.Хранилище));
		
	URL = Справочники.ИсторияХранилища.URLАПК(БП.ПоследнийПроверенныйКоммит, БП.ПоследнийЗагруженныйКоммит);
	ОписаниеЗадачи.ДобавитьСтроку(СтрШаблон("Коммиты: <a href=""%3"" target=""_blank"">%1 .. %2</a><br/>",
		БП.ПоследнийПроверенныйКоммит, БП.ПоследнийЗагруженныйКоммит, URL));
		
	ОписаниеЗадачи.ДобавитьСтроку(СтрШаблон("Количество синтаксических ошибок: %1<br/>",
		Формат(БП.КоличествоСинтаксическихОшибок, "ЧН=0")));
		
	ОписаниеЗадачи.ДобавитьСтроку("<hr/><br/>");
	ОписаниеЗадачи.ДобавитьСтроку(СтрШаблон("Количество ошибок Конвейера: %1<br/>",
		Формат(БП.Автотесты.НайтиСтроки(Новый Структура("Ошибка", Истина)).Количество(), "ЧН=0")));
	Если ЗначениеЗаполнено(БП.ИдентификаторКонвейера) Тогда
		URL = КонвейерОбработкиСервер.URLКонвейера(БП.Хранилище, БП.ИдентификаторКонвейера);
		ОписаниеЗадачи.ДобавитьСтроку(СтрШаблон("Пайплайн: <a href=""%1"" target=""_blank"">%2</a><br/>",
			URL, БП.ИдентификаторКонвейера));
	КонецЕсли;
	
	ОписаниеЗадачи.ДобавитьСтроку("<hr/><br/>");
	ОписаниеЗадачи.ДобавитьСтроку("Задачи метеор:<ul>");
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадачиМетеорВерсийХранилища.ЗадачаМетеор КАК ЗадачаМетеорСсылка,
		|	ЗадачиМетеорВерсийХранилища.ЗадачаМетеор.Код КАК ЗадачаМетеорНомер,
		|	ВЫРАЗИТЬ(ЗадачиМетеорВерсийХранилища.ЗадачаМетеор.НаименованиеЗадачи КАК СТРОКА(150)) КАК ЗадачаМетеорНаименование
		|ИЗ
		|	БизнесПроцесс.КонвейерОбработки.ПеренесенныеКоммиты КАК ПеренесенныеКоммиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
		|		ПО ПеренесенныеКоммиты.Коммит = ЗадачиМетеорВерсийХранилища.ВерсияХранилища
		|ГДЕ
		|	ПеренесенныеКоммиты.Ссылка = &Ссылка
		|	И НЕ ЗадачиМетеорВерсийХранилища.ЗадачаМетеор ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаМетеорНомер";
	Запрос.УстановитьПараметр("Ссылка", БП);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеЗадачи.ДобавитьСтроку(СтрШаблон("<li><a href=""%3"">%1</a> %2</li>",
			Выборка.ЗадачаМетеорНомер, Выборка.ЗадачаМетеорНаименование, ПолучитьНавигационнуюСсылку(Выборка.ЗадачаМетеорСсылка)));
	КонецЦикла;
	ОписаниеЗадачи.ДобавитьСтроку("</ul>");
		
	ОписаниеЗадачи.ДобавитьСтроку("<hr/><br/>");
	ОписаниеЗадачи.ДобавитьСтроку("<ul>");
	Для Каждого Стр Из БП.ТестовыеБазы Цикл
		СтрокаСоединенияОдинарныеКавычки = СтрЗаменить(Стр.СтрокаСоединения, """", "'");
		
		ОписаниеЗадачи.ДобавитьСтроку("<li>");
		Если Стр.Подготовлена Тогда
			ОписаниеЗадачи.ДобавитьСтроку(СтрШаблон("Актуальная копия %1 (%2):", Стр.Наименование, Стр.СтрокаСоединения));
			ОписаниеЗадачи.ДобавитьСтроку(СтрШаблон("<br>&nbsp;&nbsp;<a href=""%2;%3"">%1</a>", 
				"Конфигуратор", СтрокаСоединенияОдинарныеКавычки, "DESIGNER"));
			ОписаниеЗадачи.ДобавитьСтроку(СтрШаблон("<br>&nbsp;&nbsp;<a href=""%2;%3"">%1</a>", 
				"Обычное приложение", СтрокаСоединенияОдинарныеКавычки, "RunModeOrdinaryApplication"));
			ОписаниеЗадачи.ДобавитьСтроку(СтрШаблон("<br>&nbsp;&nbsp;<a href=""%2;%3"">%1</a>", 
				"Управляемое приложение", СтрокаСоединенияОдинарныеКавычки, "RunModeManagedApplication"));
			
		ИначеЕсли Стр.ОшибкаПроготовки Тогда
			ОписаниеЗадачи.ДобавитьСтроку(СтрШаблон("При подготовке %1 <a href=""%3;%4"">%2</a> произошла ошибка. %5", 
				Стр.Наименование, Стр.СтрокаСоединения, СтрокаСоединенияОдинарныеКавычки, "DESIGNER", Стр.Причина));
			
		Иначе
			ОписаниеЗадачи.ДобавитьСтроку(СтрШаблон("Тестовая копия %1 <a href=""%3"">%2</a> еще не подготовлена!", 
				Стр.Наименование, Стр.СтрокаСоединения, СтрокаСоединенияОдинарныеКавычки));
		КонецЕсли;
		ОписаниеЗадачи.ДобавитьСтроку("</li>");
		
	КонецЦикла;
	ОписаниеЗадачи.ДобавитьСтроку("</ul>");
	
	ОписаниеЗадачи.ДобавитьСтроку("</body></html>");
	
	Возврат ОписаниеЗадачи.ПолучитьТекст();
КонецФункции

Функция ТестоваяБазаЕщеНужна(БизнесПроцесс) Экспорт
	Если БизнесПроцесс.Конфигурация.СоздаватьБазыТестирования = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Ограничение в 2.5 часа
	Если ТекущаяДатаСеанса() - БизнесПроцесс.Дата > 2.5 * 3600 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Не ЗадачаПроверкаПайплайнаВыполнена(БизнесПроцесс);
КонецФункции

Функция ЗадачаПроверкаПайплайнаВыполнена(БизнесПроцесс) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Задача
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
		|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.Выполнена";
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ПроверкаПайплайна);
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОжиданиеНепроверенныхКоммитов(БП)
	
	Если БП.РучнойЗапуск Тогда
		Возврат Истина;
		БП = БизнесПроцессы.КонвейерОбработки.ПустаяСсылка();
	КонецЕсли;
	
	Если ЕстьНовыеКоммиты(БП.Хранилище) = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ОжиданиеНепроверенныхКоммитов;
	
	Объект = БП.ПолучитьОбъект();
	Объект.Заблокировать();
	
	Данные = БизнесПроцессы.КонвейерОбработки.ПолучитьДанныеПоПеренесеннымИПровереннымКоммитам(БП.Хранилище);
	Объект.ПеренесенныеКоммиты.Загрузить(Данные.ПеренесенныеКоммиты);
	Объект.ПоследнийПроверенныйКоммит = Данные.ПоследнийПроверенныйКоммит;
	Объект.ПоследнийЗагруженныйКоммит = ПоследнийПеренесенныйКоммит(Объект);
	Информация = СтрШаблон("Ковеер с %1 по %2 (%3)", Объект.ПоследнийПроверенныйКоммит, Объект.ПоследнийЗагруженныйКоммит, Объект.ПеренесенныеКоммиты.Количество());
	ДобавитьСообщение(Объект, Информация, ТочкаМаршрутаБизнесПроцесса);
	
	Объект.Дата = ТекущаяДатаСеанса();
	Объект.Записать();
	Объект.Разблокировать();
	
	Возврат Истина;
	
КонецФункции

Функция ЗапускПайплайна(БП)
	ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ЗапускПайплайна;
	СтрокаШагаКонвейера = БП.ШагиКонвейера.Найти(Справочники.ДействияКонвейераОбработки.Пайплайн, "ДействиеКонвейераОбработки");
	Если СтрокаШагаКонвейера = Неопределено Тогда
		ДобавитьСообщение(БП, "Запуск пайплайна отключен", ТочкаМаршрутаБизнесПроцесса);
		Возврат Истина;
		БП = БизнесПроцессы.КонвейерОбработки.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БП.ИдентификаторКонвейера) Тогда
		ДобавитьСообщение(БП, "Пайплайна был запущен ранее "+БП.ИдентификаторКонвейера, ТочкаМаршрутаБизнесПроцесса);
		Возврат Истина;
	КонецЕсли;
	
	Коммит = ПоследнийПеренесенныйКоммит(БП);
	ЗначенияРесурсов = РегистрыСведений.ПоказателиВерсийХранилища.Получить(Новый Структура("ВерсияХранилища", Коммит));
	ЗначенияРесурсовХеш = РегистрыСведений.ХешиGitВерсийХранилища.Получить(Новый Структура("ВерсияХранилища", Коммит));
	ХэшПоследнегоПеренесенногоКоммита = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсовХеш, "Хеш");
	Если Не ЗначениеЗаполнено(ХэшПоследнегоПеренесенногоКоммита) Тогда
		Сообщить("Не загружен хэш коммита "+Коммит);
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Объект = БП.ПолучитьОбъект();
		Объект.Заблокировать();
		Ответ = КонвейерОбработкиСервер.ЗапускПайплайна(БП.Хранилище, Коммит);
		Если Ответ.Успех = Ложь Тогда
			ВызватьИсключение Ответ.ТекстОшибки;
		КонецЕсли;
		
		Объект.ИдентификаторКонвейера = Ответ.ИдентификаторКонвейера;
		Объект.ВнутреннийИдентификаторКонвейера = Ответ.ВнутреннийИдентификаторКонвейера;
		ДобавитьСообщение(Объект, СтрШаблон("Запущен пайплайн № %1", Объект.ИдентификаторКонвейера), ТочкаМаршрутаБизнесПроцесса);
		Объект.Записать();
		Объект.Разблокировать();
		Возврат Истина;
	Исключение
		Объект.Разблокировать();
		ОписаниеОшибки = ОписаниеОшибки();
		ДобавитьСообщение(БП, ОписаниеОшибки, ТочкаМаршрутаБизнесПроцесса, Истина, Истина);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция КонвейерЗавершен(БП)
	Возврат КонвейерОбработкиСервер.КонвейерЗавершен(БП.Хранилище, БП.ИдентификаторКонвейера, БП.ВнутреннийИдентификаторКонвейера);
КонецФункции

Функция СборРезультатаПайплайна(БП)
	ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.СборРезультатаПайплайна;
	ДействияПайплайн = Справочники.ДействияКонвейераОбработки.Пайплайн;
	СтрокаШагаКонвейера = БП.ШагиКонвейера.Найти(ДействияПайплайн, "ДействиеКонвейераОбработки");
	Если СтрокаШагаКонвейера = Неопределено Тогда
		Возврат Истина;
		БП = БизнесПроцессы.КонвейерОбработки.ПустаяСсылка();
	КонецЕсли;
	
	РезультатаПайплайна = КонвейерОбработкиСервер.ПолучитьРезультатаПайплайна(БП.Хранилище, БП.ИдентификаторКонвейера, БП.ВнутреннийИдентификаторКонвейера);
	
	Об = БП.ПолучитьОбъект();
	Об.Заблокировать();
	Об.Автотесты.Загрузить(РезультатаПайплайна);
	Об.КоличествоОшибокАвтотестов = Об.Автотесты.НайтиСтроки(Новый Структура("Ошибка", Истина)).Количество();
	
	СтрокаШагаКонвейера = Об.ШагиКонвейера.Найти(ДействияПайплайн, "ДействиеКонвейераОбработки");
	СтрокаШагаКонвейера.Выполненно = Истина;
	ОбщееКолчиествоТестов = Об.Автотесты.Количество() - Об.Автотесты.НайтиСтроки(Новый Структура("Группа", "Итоги")).Количество();
	СтрокаШагаКонвейера.Подробности = СтрШаблон("Пайплайн завершен (%1/%2)", XMLСтрока(Об.КоличествоОшибокАвтотестов), XMLСтрока(ОбщееКолчиествоТестов));
	ДобавитьСообщение(Об, СтрокаШагаКонвейера.Подробности, ТочкаМаршрутаБизнесПроцесса);
	Об.Записать();
	Об.Разблокировать();
	
	Возврат Истина;
КонецФункции

Функция СинтаксическийКонтрольЗавершен(БП)
	
	ДействияСинтаксическийКонтроль = Справочники.ДействияКонвейераОбработки.СинтаксическийКонтроль;
	ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.СинтаксическийКонтроль;
	СтрокаШагаКонвейера = БП.ШагиКонвейера.Найти(ДействияСинтаксическийКонтроль, "ДействиеКонвейераОбработки");
	Если СтрокаШагаКонвейера = Неопределено Тогда
		ДобавитьСообщение(БП, "Синтаксический контроль отключен", ТочкаМаршрутаБизнесПроцесса);
		Возврат Истина;
		БП = БизнесПроцессы.КонвейерОбработки.ПустаяСсылка();
	КонецЕсли;
	Если СтрокаШагаКонвейера.Выполненно Тогда
		ДобавитьСообщение(БП, "Синтаксический уже выполнен ранее", ТочкаМаршрутаБизнесПроцесса);
		Возврат Истина;
	КонецЕсли;
	
	ЕстьКонфигурация = АвтоматизированнаяПроверкаКода.ВыполнитьЗапросКАПК("ЕстьКонфигурация", БП.Хранилище.Наименование).ЕстьКонфигурация;
	Если Не ЕстьКонфигурация Тогда
		ДобавитьСообщение(БП, "Конфигурации нет в АПК", ТочкаМаршрутаБизнесПроцесса);
		Возврат Истина;
	КонецЕсли;
	
	НомерПоследнегоКоммитаАПК = АвтоматизированнаяПроверкаКода.ВыполнитьЗапросКАПК("НомерПоследнегоКоммита", БП.Хранилище.Наименование).НомерПоследнегоКоммита;
	Если НомерПоследнегоКоммитаАПК < БП.ПоследнийЗагруженныйКоммит.Код Тогда
		ДобавитьСообщение(БП, СтрШаблон("Коммит %1 еще не загружен в АПК", БП.ПоследнийЗагруженныйКоммит.Код), ТочкаМаршрутаБизнесПроцесса);
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсторияХранилища.Код КАК Код,
		|	ИсторияХранилища.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИсторияХранилища КАК ИсторияХранилища
		|ГДЕ
		|	ИсторияХранилища.Ссылка В(&Коммиты)";
	Запрос.УстановитьПараметр("Коммиты", БП.ПеренесенныеКоммиты.ВыгрузитьКолонку("Коммит"));
	НомераКоммитов = Запрос.Выполнить().Выгрузить();;
	РезультатАПК = АвтоматизированнаяПроверкаКода.ВыполнитьЗапросКАПК("ДанныеСинтаксическойПроверки", БП.Хранилище.Наименование, НомераКоммитов.ВыгрузитьКолонку("Код"));
	
	Для Каждого Эл Из РезультатАПК.ДанныеСинтаксическойПроверки Цикл
		Если Эл.Проверено = Ложь Тогда
			ДобавитьСообщение(БП, СтрШаблон("Коммит %1 еще не проверен", Эл.НомерКоммита), ТочкаМаршрутаБизнесПроцесса);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Об = БП.ПолучитьОбъект();
	Об.Заблокировать();
	Для Каждого Стр Из Об.ПеренесенныеКоммиты Цикл
		Стр.ПроверенАПК = Ложь;
		Стр.КоличествоОшибок = 0;
	КонецЦикла;
	Для Каждого Эл Из РезультатАПК.ДанныеСинтаксическойПроверки Цикл
		Стр = Об.ПеренесенныеКоммиты.Найти(НомераКоммитов.Найти(Эл.НомерКоммита).Ссылка, "Коммит");
		Стр.ПроверенАПК = Эл.Проверено;
		Стр.КоличествоОшибок = Эл.КоличествоОшибок;
	КонецЦикла;
	
	СтрокаШагаКонвейера = Об.ШагиКонвейера.Найти(ДействияСинтаксическийКонтроль, "ДействиеКонвейераОбработки");
	Об.КоличествоСинтаксическихОшибок = Об.ПеренесенныеКоммиты.Итог("КоличествоОшибок");
	Если Об.КоличествоСинтаксическихОшибок > 0 Тогда
		СтрокаШагаКонвейера.Выполненно = Истина;
		СтрокаШагаКонвейера.Ошибка = Истина;
		СтрокаШагаКонвейера.Подробности = СтрШаблон("Синтаксических ошибок: %1", Об.КоличествоСинтаксическихОшибок);
		Об.ДобавитьСообщение(СтрокаШагаКонвейера.Подробности, ТочкаМаршрутаБизнесПроцесса, Истина);
	Иначе
		СтрокаШагаКонвейера.Выполненно = Истина;
		СтрокаШагаКонвейера.Подробности = "Синтаксических ошибок нет";
		Об.ДобавитьСообщение(СтрокаШагаКонвейера.Подробности, ТочкаМаршрутаБизнесПроцесса);
	КонецЕсли;
	Об.Записать();
	Об.Разблокировать();
	
	Возврат Истина;
	
КонецФункции

Функция ПолучениеФайловКонфигурации(БизнесПроцесс)
	Если Не ТестоваяБазаЕщеНужна(БизнесПроцесс) Тогда
		Возврат Истина;
		БизнесПроцесс = БизнесПроцессы.КонвейерОбработки.ПустаяСсылка();
	КонецЕсли;
	Коммит = БизнесПроцесс.ПоследнийЗагруженныйКоммит;
	Если ЗначениеЗаполнено(Коммит.Владелец.БазовоеХранилище) Тогда
		Коммит = БизнесПроцесс.ПоследнийПроверенныйКоммит;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Коммит) Тогда
		Возврат Истина;
	КонецЕсли;
	Если БизнесПроцесс.Конфигурация.ТестовыеБазы.НайтиСтроки(Новый Структура("ПометкаУдаления", Ложь)).Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ПолучениеФайлаКонфигурации;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хранилища.Ссылка КАК Расширение,
		|	Хранилища.ИмяПапкиGit КАК ИмяПапкиGit,
		|	МАКСИМУМ(ИсторияХранилища.Код) КАК Код
		|ИЗ
		|	Справочник.ИсторияХранилища КАК ИсторияХранилища
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Хранилища КАК Хранилища
		|		ПО ИсторияХранилища.Владелец = Хранилища.Ссылка
		|ГДЕ
		|	Хранилища.БазовоеХранилище = &БазовоеХранилище
		|	И НЕ Хранилища.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	Хранилища.Ссылка,
		|	Хранилища.ИмяПапкиGit";
	Запрос.УстановитьПараметр("БазовоеХранилище", БизнесПроцесс.Хранилище);
	Расширения = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из БизнесПроцесс.Конфигурация.ТестовыеБазы Цикл
		Если Стр.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСоединенияИБ = Стр.СтрокаСоединенияПриемник;
		Попытка
			//ИмяФайла = КонвейерОбработкиСервер.ПолучениеФайлаКонфигурацииИзХранилища(Коммит.Владелец, Коммит.Код, СтрокаСоединенияИБ);
			ИмяФайла = КешВерсийХранилищ.ПолучитьПутьФайлаВерсии(Коммит);
			Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
				Возврат Ложь;
			КонецЕсли;
			ДобавитьСообщение(БизнесПроцесс, ИмяФайла, ТочкаМаршрутаБизнесПроцесса);
			Об = БизнесПроцесс.ПолучитьОбъект();
			Об.Заблокировать();
			Об.ПутьКФайлуКонфигурации = ИмяФайла;
			Об.Расширения.Очистить();
			Об.Записать();
			Об.Разблокировать();
			
			Для Каждого СтрРасширение Из Расширения Цикл
				//ИмяФайла = КонвейерОбработкиСервер.ПолучениеФайлаКонфигурацииИзХранилища(СтрРасширение.Расширение, СтрРасширение.Код, СтрокаСоединенияИБ);
				ИмяФайла = КешВерсийХранилищ.ПолучитьПутьФайлаВерсииПоИдентификаторам(
					Новый Структура("Хранилище,ВерсияНомер", СтрРасширение.Расширение, СтрРасширение.Код));
				ДобавитьСообщение(БизнесПроцесс, ИмяФайла, ТочкаМаршрутаБизнесПроцесса);
				Об = БизнесПроцесс.ПолучитьОбъект();
				Об.Заблокировать();
				ОбСтр = Об.Расширения.Добавить();
				ОбСтр.ИмяРасширения = СтрРасширение.ИмяПапкиGit;
				ОбСтр.ПутьКФайлуРасширения = ИмяФайла;
				Об.Записать();
				Об.Разблокировать();
			КонецЦикла;
			
			Возврат Истина;
		Исключение
			ДобавитьСообщение(БизнесПроцесс, СтрокаСоединенияИБ + Символы.ПС + ОписаниеОшибки(), ТочкаМаршрутаБизнесПроцесса, Истина);
		КонецПопытки;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции	

// Для табличной части ПеренесенныеКоммиты - получаем последний по дате коммит
//
// Возвращаемое значение:
//   СправочникСсылка.ИсторияХранилища   - последний по времени коммит
//
Функция ПоследнийПеренесенныйКоммит(БП)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Коммиты", БП.ПеренесенныеКоммиты.ВыгрузитьКолонку("Коммит"));
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Справочник.ИсторияХранилища
		|ГДЕ
		|	Ссылка В(&Коммиты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Результат = Выборка.Ссылка;
		
		Возврат Результат;
		
	Иначе
		
		ВызватьИсключение СтрШаблон("Не удалось определить хэш последнего перенесенного коммита для %1", БП);
	
	КонецЕсли; 

КонецФункции

#КонецОбласти

#КонецЕсли

