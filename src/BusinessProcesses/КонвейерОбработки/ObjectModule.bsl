#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Процедура - Добавить сообщение в табличную часть Сообщения
//
// Параметры:
//  Текст	 - Строка	 - Комментарий шага
//  Шаг		 - Строка	 - Наименование шага
//  Ошибка	 - Булево	 - Ошибка или нет
//
Процедура ДобавитьСообщение(Текст, Шаг, Ошибка = Ложь) Экспорт
	БизнесПроцессы.КонвейерОбработки.ДобавитьСообщение(ЭтотОбъект, Текст, Шаг, Ошибка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	Сообщения.Очистить();
	ПеренесенныеКоммиты.Очистить();
	Для Каждого Стр Из ШагиКонвейера Цикл
		Стр.Выполненно = Ложь;
		Стр.Ошибка = Ложь;
		Стр.Подробности = "";
	КонецЦикла;
	ЕстьБлокирующиеОшибки = Ложь;
	ПоследнийПроверенныйКоммит = Неопределено;
	ПоследнийЗагруженныйКоммит = Неопределено;
	ИдентификаторКонвейера = 0;
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	АвтотестыКоличествоСтрок = Автотесты.Количество() - Автотесты.НайтиСтроки(Новый Структура("Группа", "Итоги")).Количество();
	КоличествоОшибокАвтотестов = Автотесты.НайтиСтроки(Новый Структура("Ошибка", Истина)).Количество();
КонецПроцедуры

Процедура ОжиданиеЗавершенияПайплайнаПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	СтрокаШагаКонвейера = ШагиКонвейера.Найти(Справочники.ДействияКонвейераОбработки.Пайплайн, "ДействиеКонвейераОбработки");
	Если СтрокаШагаКонвейера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСообщение(СтрШаблон("Пайплайн завершен"), ТочкаМаршрутаБизнесПроцесса);
	Записать();
КонецПроцедуры

Процедура УстановкаМеткиПроверенноПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	Если Ложь Тогда
		Задача = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	КонецЕсли;
	
	// Сдвигаем отметку для запуска последующих проверок
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсторияХранилища.Владелец КАК Владелец,
		|	ИсторияХранилища.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИсторияХранилища.Владелец КАК Владелец,
		|		МАКСИМУМ(ИсторияХранилища.Код) КАК Код
		|	ИЗ
		|		Справочник.ИсторияХранилища КАК ИсторияХранилища
		|	ГДЕ
		|		ИсторияХранилища.Ссылка В(&Коммиты)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИсторияХранилища.Владелец) КАК Влож
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсторияХранилища КАК ИсторияХранилища
		|		ПО Влож.Владелец = ИсторияХранилища.Владелец
		|			И Влож.Код = ИсторияХранилища.Код";
	Запрос.УстановитьПараметр("Коммиты", Задача.БизнесПроцесс.ПеренесенныеКоммиты.ВыгрузитьКолонку("Коммит"));
	Выбока = Запрос.Выполнить().Выбрать();
	Пока Выбока.Следующий() Цикл
		Запись = РегистрыСведений.ПоследниеПроверенныеКоммиты.СоздатьМенеджерЗаписи();
		Запись.Период = ТекущаяДатаСеанса();
		Запись.Хранилище = Выбока.Владелец;
		Запись.Коммит = Выбока.Ссылка;
		Запись.КонвейерОбработки = Ссылка;
		Если ЕстьБлокирующиеОшибки Тогда 
			Запись.Успех = Ложь;
		ИначеЕсли БизнесПроцессы.КонвейерОбработки.СинтаксическийКонтрольОтключен(Задача.БизнесПроцесс) Тогда
			Запись.Успех = ПереносСогласован_ПроверкаПайплайна;
		Иначе
			Запись.Успех = ПереносСогласован_ПроверкаСинтаксическогоКонтроля или КоличествоСинтаксическихОшибок = 0;
		КонецЕсли;
		Запись.Записать();
	КонецЦикла;
		
	Если ЕстьБлокирующиеОшибки Тогда
		Статус = "Есть ошибки";
	Иначе
		Статус = "Проверен";
	КонецЕсли;
	ТекущаяМетка = СокрЛП(СтрРазделить(ПоследнийЗагруженныйКоммит.Метка, "[")[0]);
	НоваяМетка = СтрШаблон("%1 [%2]", ТекущаяМетка, Статус);
	
	НомераВерсийРБ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПоследнийЗагруженныйКоммит.Код);
	РаботаСХранилищами.ПометитьВерсииХранилища(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПоследнийЗагруженныйКоммит), НоваяМетка);
	РаботаСХранилищами.ПометитьНомераХранилищ(ПоследнийЗагруженныйКоммит.Владелец, НомераВерсийРБ, НоваяМетка);
	
	Записать();
	
КонецПроцедуры

Процедура ЗапускНовогоБизнесПроцессаПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	Если Не РучнойЗапуск и Конфигурация.ИспользуетсяКонвейерОбработки Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(КонвейерОбработки.Ссылка) КАК Ссылка
			|ИЗ
			|	БизнесПроцесс.КонвейерОбработки КАК КонвейерОбработки
			|ГДЕ
			|	КонвейерОбработки.Номер > &Номер
			|	И КонвейерОбработки.Конфигурация = &Конфигурация
			|	И Не КонвейерОбработки.РучнойЗапуск";
		Запрос.УстановитьПараметр("Номер", Номер);
		Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			НовыйЭкземпляр = БизнесПроцессы.КонвейерОбработки.ЗапускНовогоБизнесПроцесса(Конфигурация);
			ДобавитьСообщение("Стартован "+НовыйЭкземпляр, ТочкаМаршрутаБизнесПроцесса);
		Иначе
			ДобавитьСообщение("Уже был запущен параллельный экземпляр "+Выборка.Ссылка, ТочкаМаршрутаБизнесПроцесса);
		КонецЕсли;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЕстьБлокирующиеОшибкиПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЕстьБлокирующиеОшибки или (ПереносСогласован_ПроверкаСинтаксическогоКонтроля = Ложь и КоличествоСинтаксическихОшибок > 0);
	
КонецПроцедуры

Процедура ЕстьСинтаксическиеОшибкиПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = КоличествоСинтаксическихОшибок > 0;
	
КонецПроцедуры

Процедура ОповеститьОРезультатеСинтаксическогоКонтроляПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	ТекстТелеграм = Константы.КонвейерОбработкиОповещениеТелеграммСинтаксическийКонтроль.Получить();
	Если ЗначениеЗаполнено(ТекстТелеграм) Тогда
		ТекстТелеграм = СтрЗаменить(ТекстТелеграм, "%Проект%", Конфигурация);
		ВнешниеДанные.ОтправитьВТелеграм(ТекстТелеграм);
	КонецЕсли;
КонецПроцедуры

Процедура ОповеститьОРезультатеПайплайнаПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	ТекстТелеграм = Константы.КонвейерОбработкиОповещениеТелеграммАвтотесты.Получить();
	Если АвтотестыКоличествоСтрок = 0 Тогда
		ТекстТелеграм = СтрЗаменить(ТекстТелеграм, "с ошибками", "не отработала, тесты по пайплайну не запустились! (%/%)");
	ИначеЕсли КоличествоОшибокАвтотестов = 0 Тогда
		ТекстТелеграм = СтрЗаменить(ТекстТелеграм, "с ошибками", "без ошибок (%/%)");
	Иначе
		ТекстТелеграм = СтрЗаменить(ТекстТелеграм, "с ошибками", "с ошибками (%/%)");
	КонецЕсли;
	ТекстТелеграм = СтрЗаменить(ТекстТелеграм, "(%/%)", СтрШаблон("(%1/%2)", 
		XMLСтрока(КоличествоОшибокАвтотестов), XMLСтрока(АвтотестыКоличествоСтрок)));
	Если ЗначениеЗаполнено(ТекстТелеграм) Тогда
		ТекстТелеграм = СтрЗаменить(ТекстТелеграм, "%Проект%", Конфигурация);
		ВнешниеДанные.ОтправитьВТелеграм(ТекстТелеграм);
	КонецЕсли;
КонецПроцедуры

Процедура ОповещениеАвторовКоммитовПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	Если ЕстьБлокирующиеОшибки Тогда
		// Мазеев просил отключить письма, если ЕстьБлокирующиеОшибки
		Возврат;
	КонецЕсли;
	
	// Оповещать на почту по авторам всех коммитов
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонвейерОбработкиПеренесенныеКоммиты.Коммит КАК КоммитХО,
		|	СоотвествиеКоммитов.Коммит.Автор КАК КоммитХРАвтор,
		|	Пользователи.Ссылка КАК Разработчик,
		|	Пользователи.email КАК email,
		|	ЗадачиМетеорВерсийХранилища.ЗадачаМетеор КАК ЗадачаМетеор,
		|	ВЫРАЗИТЬ(ЗадачиМетеорВерсийХранилища.ЗадачаМетеор.НаименованиеЗадачи КАК СТРОКА(150)) КАК НаименованиеЗадачи
		|ИЗ
		|	БизнесПроцесс.КонвейерОбработки.ПеренесенныеКоммиты КАК КонвейерОбработкиПеренесенныеКоммиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.СогласованиеПереноса.Коммиты КАК СоотвествиеКоммитов
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|			ПО СоотвествиеКоммитов.Коммит.Автор = Пользователи.Код
		|		ПО КонвейерОбработкиПеренесенныеКоммиты.Коммит = СоотвествиеКоммитов.КоммитХО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
		|		ПО КонвейерОбработкиПеренесенныеКоммиты.Коммит = ЗадачиМетеорВерсийХранилища.ВерсияХранилища
		|ГДЕ
		|	КонвейерОбработкиПеренесенныеКоммиты.Ссылка = &Ссылка
		|ИТОГИ
		|	МАКСИМУМ(Разработчик),
		|	МАКСИМУМ(email)
		|ПО
		|	КоммитХРАвтор";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ВыборкаПолучатели = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПолучатели.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаПолучатели.email) Тогда
			Продолжить;
		КонецЕсли;
		
		Тема = СтрШаблон("Предпрод проверка конфигурации %1 %2 %3", Конфигурация, Ссылка.Дата, ВыборкаПолучатели.КоммитХРАвтор);
		
		ЗадачиМетеор = Новый Массив;
		ЗадачиМетеор.Добавить("<ul>");
		ВыборкаЗадачи = ВыборкаПолучатели.Выбрать();
		Пока ВыборкаЗадачи.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаЗадачи.ЗадачаМетеор) Тогда
				ЗадачиМетеор.Добавить(СтрШаблон("<li><a href='%3'>%1</a> (%2)</li>", 
					ВыборкаЗадачи.ЗадачаМетеор, 
					ВыборкаЗадачи.НаименованиеЗадачи,
					Справочники.ЗадачиМетеор.URLЗадачиМетеор(ВыборкаЗадачи.ЗадачаМетеор)));
			КонецЕсли;
		КонецЦикла;
		ЗадачиМетеор.Добавить("</ul>");
		ЗадачиМетеор = СтрСоединить(ЗадачиМетеор, Символы.ПС);
		
		Если ЕстьБлокирующиеОшибки Тогда
			ШаблонСообщения = 
				"<p>Предпрод проверка пачки %Ссылка% изменений завершена с блокирующими изменениями!
				|<p>Следующие изменения <b>НЕ попадут в рабочую базу</b> при следующем цикле обновления:
				|%Задачи%
				|<p>Примечание: Выполнялась проверка пачки из %КоличествоКоммитов% коммитов. Возможно, блокирующие изменения не ваши.
				|";
		Иначе
			ШаблонСообщения = 
				"<p>Предпрод проверка не выявила ошибок. Обновление по плану (выполняется утром по графику технической поддержки 
				|https://bookstack.vkusvill.ru/books/otdel-soprovozhdeniya/page/reglamentnye-obnovleniya-ib)
				|%Задачи%";
		КонецЕсли;
		ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "%Ссылка%", Ссылка);
		ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "%Задачи%", ЗадачиМетеор);
		ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "%КоличествоКоммитов%", ПеренесенныеКоммиты.Количество());
		
		ТекстПисьма = Новый ТекстовыйДокумент;
		ТекстПисьма.ДобавитьСтроку("<html><body>");
		ТекстПисьма.ДобавитьСтроку(ШаблонСообщения);
		
		ПочтовыеВложения = Новый ТаблицаЗначений;
		ПочтовыеВложения.Колонки.Добавить("Ключ");
		ПочтовыеВложения.Колонки.Добавить("Значение");
		ПочтовыеВложения.Колонки.Добавить("Расширение");
		Если ЕстьБлокирующиеОшибки и Не ПереносСогласован_ПроверкаСинтаксическогоКонтроля Тогда
			ТекстЗамены = ОбъединитьВложения(ПочтовыеВложения, ЗамечаниехзВложения_ПроверкаСинтаксическогоКонтроля, ЗамечаниеHTML_ПроверкаСинтаксическогоКонтроля);
			ТекстПисьма.ДобавитьСтроку(ТекстЗамены);
		КонецЕсли;
		Если ЕстьБлокирующиеОшибки и Не ПереносСогласован_ПроверкаПайплайна Тогда
			ТекстЗамены = ОбъединитьВложения(ПочтовыеВложения, ЗамечаниехзВложения_ПроверкаПайплайна, ЗамечаниеHTML_ПроверкаПайплайна);
			ТекстПисьма.ДобавитьСтроку(ТекстЗамены);
		КонецЕсли;
		
		ТекстПисьма.ДобавитьСтроку("</body></html>");
		
		ДанныеПисьма = Новый Структура;
		ДанныеПисьма.Вставить("Получатели", ВыборкаПолучатели.email);
		ДанныеПисьма.Вставить("Тема", Тема);
		ДанныеПисьма.Вставить("Тело", ТекстПисьма.ПолучитьТекст());
		ДанныеПисьма.Вставить("Вложения", ПочтовыеВложения);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЭлектронноеПисьмо.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
			|ГДЕ
			|	ЭлектронноеПисьмо.Тема = &Тема
			|	И ЭлектронноеПисьмо.Тело ПОДОБНО &Тело";
		Запрос.УстановитьПараметр("Тема", ДанныеПисьма.Тема);
		Запрос.УстановитьПараметр("Тело", "%"+Прав(ДанныеПисьма.Тело, 1000));
		Запрос.УстановитьПараметр("Получатели", ДанныеПисьма.Получатели);
		Если Запрос.Выполнить().Пустой() Тогда
			Документы.ЭлектронноеПисьмо.СоздатьПисьмо(ДанныеПисьма);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовкаТестовыхБазПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПодготовкаТестовойБазы.СтрокаСоединенияПриемник КАК СтрокаСоединенияПриемник
		|ИЗ
		|	БизнесПроцесс.ПодготовкаТестовойБазы КАК ПодготовкаТестовойБазы
		|ГДЕ
		|	ПодготовкаТестовойБазы.КонвейерОбработки = &Владелец
		|	И ПодготовкаТестовойБазы.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	СозданныеБизнесПроцессы = Запрос.Выполнить().Выгрузить();
	
	Заблокировать();
	Для Каждого КонфигурацияТестовыеБазы Из Конфигурация.ТестовыеБазы Цикл
		Если КонфигурацияТестовыеБазы.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		Если СозданныеБизнесПроцессы.Найти(КонфигурацияТестовыеБазы.СтрокаСоединенияПриемник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйПроцесс = БизнесПроцессы.ПодготовкаТестовойБазы.СоздатьБизнесПроцесс();
		НовыйПроцесс.Дата = ТекущаяДатаСеанса();
		НовыйПроцесс.Конфигурация = Конфигурация;
		НовыйПроцесс.КонвейерОбработки = Ссылка;
		НовыйПроцесс.Коммит = ПоследнийЗагруженныйКоммит;
		НовыйПроцесс.СтрокаСоединенияИсточник = КонфигурацияТестовыеБазы.СтрокаСоединенияИсточник;
		НовыйПроцесс.СтрокаСоединенияПриемник = КонфигурацияТестовыеБазы.СтрокаСоединенияПриемник;
		ФормируемыеБизнесПроцессы.Добавить(НовыйПроцесс);
		
		НоваяСтрока = ТестовыеБазы.Добавить();
		НоваяСтрока.Наименование = КонфигурацияТестовыеБазы.Наименование;
		НоваяСтрока.СтрокаСоединения = КонфигурацияТестовыеБазы.СтрокаСоединенияПриемник;
		НоваяСтрока.Подготовлена = Ложь;
	КонецЦикла;
	Записать();
	Разблокировать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбъединитьВложения(Приемник, ИсточникХЗ, Знач ТекстХТМЛ)
	Источник = ИсточникХЗ.Получить();
	Если Источник = Неопределено Тогда
		Возврат ТекстХТМЛ;
	КонецЕсли;
	Для Каждого Эл Из Источник Цикл
		Ключ = Эл.Ключ;
		Если Приемник.Найти(Ключ, "Ключ")<>Неопределено Тогда
			Ключ = "img"+XMLСтрока(ТекущаяУниверсальнаяДатаВМиллисекундах());
			ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, Эл.Ключ, Ключ);
		КонецЕсли;
		НовоеВложение = Приемник.Добавить();
		НовоеВложение.Ключ = Ключ;
		НовоеВложение.Значение = Эл.Значение;
		НовоеВложение.Расширение = "";
	КонецЦикла;
	Возврат ТекстХТМЛ;
КонецФункции

#КонецОбласти

#Иначе
  ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
