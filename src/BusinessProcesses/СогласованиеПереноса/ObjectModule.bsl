#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытийКартыМаршрута

Процедура ПереносСогласованПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПереносСогласован;
	
КонецПроцедуры

Процедура ЗапуститьПроцессКонтроляТрудозатратОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	Если ЕстьАктивныйПроцессКонтроляТрудозатрат() Тогда
		Возврат;
	КонецЕсли;
	
	ЧасыПоЗадаче = Справочники.ЗадачиМетеор.ПолучитьЧасыПоЗадачеМетеор(ЗадачаМетеор);
	Если Не ЧасыПоЗадаче.Количество() Тогда
		Возврат;
	КонецЕсли;

	ЧасыПоЗадаче.Свернуть(, "Затрачено");
	ВсегоЗатрачено = ЧасыПоЗадаче[0].Затрачено;
	
	Если ВсегоЗатрачено >= Константы.МинимальноеКоличествоЧасовДляНеобходимостиКонтроляТрудозатрат.Получить() Тогда
		УстановитьПривилегированныйРежим(Истина);
		НовыйПроцесс = БизнесПроцессы.КонтрольТрудозатрат.СоздатьБизнесПроцесс();
		НовыйПроцесс.Дата = ТекущаяДатаСеанса();
		НовыйПроцесс.ЗадачаМетеор = ЗадачаМетеор;
		НовыйПроцесс.ПроцессИсточник = Ссылка;
		НовыйПроцесс.Записать();
		НовыйПроцесс.Старт();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПеренестиИзмененияПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	// Перенос выполняется массово в рег.задании выполнения задач роботом
	Возврат;
	
КонецПроцедуры

Процедура ПеревестиНаСледующийЭтапПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	Если Не ИнтеграцияСМетеор.ПроверитьТекущийЭтапЗадачиВМетеоре(ЗадачаМетеор, Справочники.ЭтапыЗадачиМетеор.СозданиеЗаявкиНаПереносВПродуктив) Тогда
		Возврат;
	КонецЕсли;
	
	Этапы = РегистрыСведений.СледующиеЭтапыЗадачиПоТочкеМаршрута.ПолучитьЭтапыПоТочкеМаршрута(
		Бизнеспроцессы.СогласованиеПереноса.ТочкиМаршрута.ПеревестиНаСледующийЭтап,
		ПереносСогласован);
	ИнтеграцияСМетеор.ПеревестиЗадачуНаЭтапВМетеоре(ЗадачаМетеор, Этапы);
	
КонецПроцедуры

Процедура ОповеститьОРезультатеПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	АдресПолучателя = БизнесПроцессы.ПредварительнаяПроверка.АдресПолучателя(ЭтотОбъект);
	Если Не ЗначениеЗаполнено(АдресПолучателя) Тогда
		Возврат;
	КонецЕсли;
	
	Ответственный = "";
	Если ПереносСогласован Тогда
		ТемаШаблон = "Изменения по задаче %1 перенесены";
	Иначе
		ТемаШаблон = "Отказ. Изменения по задаче %1 отклонены";
		Если ПереносСогласован_ПроверкаКода = Ложь и ЗначениеЗаполнено(Проверил_ПроверкаКода) Тогда
			Ответственный = Проверил_ПроверкаКода;
		Иначе
			Ответственный = "?";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ТемаШаблон = СтрШаблон("%1 (%2)", ТемаШаблон, Ответственный);
	КонецЕсли;
	
	ТемаПисьма = СтрШаблон(ТемаШаблон, ЗадачаМетеор);
	
	ТекущийТекстHTML = "<body>";
	
	ПочтовыеВложения = Новый ТаблицаЗначений;
	ПочтовыеВложения.Колонки.Добавить("Ключ");
	ПочтовыеВложения.Колонки.Добавить("Значение");
	ПочтовыеВложения.Колонки.Добавить("Расширение");
	
	ТекстЗадачаМетеор = СтрШаблон("<FONT color=""#006600""><a href=""%1"" target=""_blank"">%2</a></FONT>", Справочники.ЗадачиМетеор.URLЗадачиМетеор(ЗадачаМетеор), ЗадачаМетеор);
	ТекстИзменений = СтрШаблон("<h2>" + ТемаШаблон + "</h2>", ТекстЗадачаМетеор);
	Если ЗначениеЗаполнено(ЗадачаМетеор.НаименованиеЗадачи) Тогда
		ТекстИзменений = ТекстИзменений + СтрШаблон("<p>(%1)</p>", ЗадачаМетеор.НаименованиеЗадачи);
	КонецЕсли;
	Для Каждого КоммитХО Из МассивУникальныхЗначений(Коммиты.Выгрузить(), "КоммитХО") Цикл
		
		Если Не ЗначениеЗаполнено(КоммитХО) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстИзменений = ТекстИзменений + СтрШаблон("<p><b>Коммит ХО %1 от %2</b></p>", КоммитХО.Код, КоммитХО.Дата);
		Для Каждого Коммит Из Коммиты.Выгрузить(Новый Структура("КоммитХО", КоммитХО), "Коммит").ВыгрузитьКолонку("Коммит") Цикл
			ТекстИзменений = ТекстИзменений + СтрШаблон("<p>Коммит ХР %1 от %2</p>", Коммит.Код, Коммит.Дата);
		КонецЦикла;
		
		ТекстДобавлено = "";
		Для Каждого Добавлен Из КоммитХО.Добавлены Цикл 
			ТекстДобавлено = ТекстДобавлено + СтрШаблон("<li>%1</li>", Добавлен.ИмяОбъекта);
		КонецЦикла;
		ТекстИзменено = "";
		Для Каждого Добавлен Из КоммитХО.Изменены Цикл 
			ТекстИзменено = ТекстИзменено + СтрШаблон("<li>%1</li>", Добавлен.ИмяОбъекта);
		КонецЦикла;
		ТекстУдалено = "";
		Для Каждого Добавлен Из КоммитХО.Удалены Цикл 
			ТекстУдалено = ТекстУдалено + СтрШаблон("<li>%1</li>", Добавлен.ИмяОбъекта);
		КонецЦикла;		
		ТекстИзменений = ТекстИзменений +
			?(НЕ ПустаяСтрока(ТекстДобавлено), СтрШаблон("Добавлено:<ul>%1</ul>", ТекстДобавлено), "") + 
			?(НЕ ПустаяСтрока(ТекстИзменено), СтрШаблон("Изменено:<ul>%1</ul>", ТекстИзменено), "") +
			?(НЕ ПустаяСтрока(ТекстУдалено), СтрШаблон("Удалено:<ul>%1</ul>", ТекстУдалено), "");
		
	КонецЦикла;
	ТекущийТекстHTML = ТекущийТекстHTML + ТекстИзменений;
	
	Для Каждого ИмяПроверки Из СтрРазделить("ПроверкаКода", ",") Цикл
		
		Текст = СтрЗаменить(ЭтотОбъект["ЗамечаниеHTML_" + ИмяПроверки], "<body>", "");
		Текст = СтрЗаменить(Текст, "</body>", "");
		ТекущийТекстHTML = ТекущийТекстHTML + Текст;
		
		ДопВложения = ЭтотОбъект["ЗамечаниехзВложения_" + ИмяПроверки].Получить();
		Если Не ДопВложения = Неопределено Тогда
			Для Каждого Элемент Из ДопВложения Цикл
				НовСтр = ПочтовыеВложения.Добавить();
				НовСтр.Ключ = Элемент.Ключ;
				НовСтр.Значение = Элемент.Значение;
				НовСтр.Расширение = "html";
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла;
	
	ТекущийТекстHTML = ТекущийТекстHTML + "</body>";
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Получатели", АдресПолучателя);
	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	ПараметрыПисьма.Вставить("Тело", ТекущийТекстHTML);
	ПараметрыПисьма.Вставить("Вложения", ПочтовыеВложения);
	Документы.ЭлектронноеПисьмо.СоздатьПисьмо(ПараметрыПисьма);
	
	Если ПереносСогласован Тогда
		// +++АК DORS 2022.04.18 ИП-00038151
		// Если перенос не согласован, то оповещение происходит при выполнении соответствующей задачи
		ВерсииПеренесены = МассивУникальныхЗначений(Коммиты.Выгрузить(), "Коммит");
		Если ВерсииПеренесены.Количество() Тогда
			ШаблонКомментарияМетеор = 
				"Перенос изменений
				|Изменения по задаче [ЗадачаМетеор] перенесены в Хранилище обновлений по коммитам [ВерсииХранилища]
				|Перенос в продуктив будет осуществлен по графику обновления базы.
				|[УРЛВерсийХранилища]";
			КодыВерсийПоВерсиям = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВерсииПеренесены, "Код");
			КодыВерсий = Новый Массив;
			УрлВерсий = Новый Массив;
			Для Каждого КоммитХР Из ВерсииПеренесены Цикл
				КодыВерсий.Добавить(КодыВерсийПоВерсиям.Получить(КоммитХР));
				УрлВерсий.Добавить(РаботаСGIT.URLGit(КоммитХР));
			КонецЦикла;
			
			ПараметрыКомментария = Новый Структура();
			ПараметрыКомментария.Вставить("ЗадачаМетеор", ЗадачаМетеор);
			ПараметрыКомментария.Вставить("ВерсииХранилища", СтрСоединить(КодыВерсий, " ,"));
			ПараметрыКомментария.Вставить("УРЛВерсийХранилища", СтрСоединить(УрлВерсий, Символы.ПС));
			ТекстКомментарияМетеор =
				СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКомментарияМетеор, ПараметрыКомментария);
		Иначе
			ТекстКомментарияМетеор = 
				"Перенос изменений
				|Нет коммитов для переноса!";
		КонецЕсли;
		ИнтеграцияСМетеор.ОтправитьФорматированныйКомментарийВМетеор(ЗадачаМетеор, ТекстКомментарияМетеор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийМодуля

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КонтрольТекущихПереносовПоЗадаче(Отказ);
	
	ПереносСогласован = ПереносСогласован_ПроверкаКода;
	ДополнительныеСвойства.Вставить("старПереносСогласован", Ссылка.ПереносСогласован);
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
	// TODO: Переработать механику согласования владельцем системы
	//Если ПереносСогласован И Не ДополнительныеСвойства.старПереносСогласован Тогда
	//	ЗафиксироватьСогласованныеДополнения();
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	РегистрыСведений.ОтветственныеПоИсточникам.ОбновитьОтвественных(Ссылка);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПереносСогласован И Не ДополнительныеСвойства.старПереносСогласован Тогда
		
		Версии = РаботаСХранилищами.ДанныеПоЗадаче(ЗадачаМетеор).Версии;
		Для Каждого Строка Из Версии.НайтиСтроки(Новый Структура("Статус", БизнесПроцессы.СогласованиеПереноса.ОсновнойСтатус())) Цикл
			РаботаСХранилищами.ЗаписатьСтатусВерсииХранилища(Строка.Коммит,
				Перечисления.СтатусыИсторииХранилищ.Перенос, , Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура КонтрольТекущихПереносовПоЗадаче(Отказ)
	
	Если Стартован
		И Не Завершен
		И Не ПометкаУдаления
		И БизнесПроцессы.СогласованиеПереноса.ЕстьАктивныйПроцесс(ЗадачаМетеор, Ссылка) Тогда
		
		ТекстСообщения = СтрШаблон("Для задачи %1 уже есть активный перенос!", ЗадачаМетеор);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьАктивныйПроцессКонтроляТрудозатрат()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрольТрудозатрат.Ссылка КАК Ссылка
		|ИЗ
		|	БизнесПроцесс.КонтрольТрудозатрат КАК КонтрольТрудозатрат
		|ГДЕ
		|	НЕ КонтрольТрудозатрат.Завершен
		|	И КонтрольТрудозатрат.Стартован
		|	И НЕ КонтрольТрудозатрат.ПометкаУдаления
		|	И КонтрольТрудозатрат.ЗадачаМетеор = &ЗадачаМетеор";
	
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция МассивУникальныхЗначений(пТаблица, пИмяКолонки) Экспорт
	
	времТаблица = пТаблица.Скопировать(, пИмяКолонки);
	времТаблица.Свернуть(пИмяКолонки);
	
	Возврат времТаблица.ВыгрузитьКолонку(пИмяКолонки);
	
КонецФункции

Процедура ЗафиксироватьСогласованныеДополнения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
	Запрос.УстановитьПараметр("СтатусДляСогласования", БизнесПроцессы.СогласованиеПереноса.ОсновнойСтатус());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиМетеорДополнений.ВерсияДополнения КАК ВерсияДополнения
		|ПОМЕСТИТЬ ДополненияПоЗадаче
		|ИЗ
		|	РегистрСведений.ЗадачиМетеорДополнений КАК ЗадачиМетеорДополнений
		|ГДЕ
		|	ЗадачиМетеорДополнений.ЗадачаМетеор = &ЗадачаМетеор
		|	И НЕ ЗадачиМетеорДополнений.ВерсияДополнения.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополненияПоЗадаче.ВерсияДополнения КАК ВерсияДополнения,
		|	СтатусыДополненийСрезПоследних.Статус КАК Статус
		|ИЗ
		|	ДополненияПоЗадаче КАК ДополненияПоЗадаче
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДополнений.СрезПоследних(
		|				,
		|				ВерсияДополнения В
		|					(ВЫБРАТЬ
		|						ДополненияПоЗадаче.ВерсияДополнения
		|					ИЗ
		|						ДополненияПоЗадаче КАК ДополненияПоЗадаче)) КАК СтатусыДополненийСрезПоследних
		|		ПО ДополненияПоЗадаче.ВерсияДополнения = СтатусыДополненийСрезПоследних.ВерсияДополнения
		|ГДЕ
		|	СтатусыДополненийСрезПоследних.Статус = &СтатусДляСогласования";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СогласованныеДополнения.Добавить(), Выборка);
		РаботаСДополнениями.ЗаписатьСтатусВерсии(Выборка.ВерсияДополнения, Перечисления.СтатусыИсторииХранилищ.Перенос);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Иначе
  ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
