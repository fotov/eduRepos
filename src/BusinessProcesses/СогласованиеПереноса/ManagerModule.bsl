#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ЗадачаВыполнима(Задача, ТочкаМаршрута) Экспорт
	
	ЗадачаВыполнима = Истина;
	ЗадачаМетеор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "БизнесПроцесс.ЗадачаМетеор");
	
	Если ТочкаМаршрута = БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ОжиданиеЗагрузкиКоммитов Тогда
		ЗадачаВыполнима = Справочники.ИсторияХранилища.ЗадачиМетеорЗагружены(Задача.Дата, Задача.БизнесПроцесс.ЗадачаМетеор);
	КонецЕсли;
	
	Возврат ЗадачаВыполнима;
	
КонецФункции

Функция МожноАвтозавершитьЗадачу(Задача, ТочкаМаршрута) Экспорт
	
	ЗадачаМетеор = Задача.БизнесПроцесс.ЗадачаМетеор;
	Можно = Ложь;
	
	Если ТочкаМаршрута = БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПроверкаКода Тогда
		Разработчик = Задача.БизнесПроцесс.Разработчик;
		
		// Задача пришла до 16:00.
		// Вчерашние подлежат автосогласованию с 9:00 следующего дня
		// Только в рабочие дни.
		// Код проверил не тот, кто поместил изменения
		// Автору изменений разрешено автоматическое согласование переноса
		// Задачи без изменений (коммитов) нужно согласовывать автоматически.
		ТекДата = ТекущаяДатаСеанса();
		НачалоПериодаПриемаНаСогласование = Дата(Год(ТекДата), Месяц(ТекДата), День(ТекДата), 9, 0, 0);
		КонецПериодаПриемаНаСогласование = Дата(Год(ТекДата), Месяц(ТекДата), День(ТекДата), 16, 0, 0);
		СвойстваДняКалендаря = РегистрыСведений.ПроизводственныйКалендарь.Получить(Новый Структура("День", НачалоДня(ТекДата)));
		// Автозавершение согласований обрабатывается с 9 до 16
		Если ТекДата < НачалоПериодаПриемаНаСогласование Или ТекДата > КонецПериодаПриемаНаСогласование Или СвойстваДняКалендаря.Выходной Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Проверка статуса версий и дополнений.
		СогласованиеВозможно(ЗадачаМетеор, ТочкаМаршрута);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Задача", Задача);
		Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
		Запрос.УстановитьПараметр("НачалоПериодаПриемаНаСогласование", НачалоПериодаПриемаНаСогласование);
		Запрос.УстановитьПараметр("КонецПериодаПриемаНаСогласование", КонецПериодаПриемаНаСогласование);
		Запрос.УстановитьПараметр("ИмяСвойстваВозможностиАвтоматическогоСогласования", "РазрешеноСогласованиеПереносаБезПроверки");
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачиМетеорВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища
			|ПОМЕСТИТЬ ВерсииПоЗадаче
			|ИЗ
			|	РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
			|ГДЕ
			|	ЗадачиМетеорВерсийХранилища.ЗадачаМетеор = &ЗадачаМетеор
			|	И ЗадачиМетеорВерсийХранилища.ВерсияХранилища.Владелец В
			|			(ВЫБРАТЬ
			|				Конфигурации.ХранилищеРазработки КАК ХранилищеРазработки
			|			ИЗ
			|				Справочник.Конфигурации КАК Конфигурации)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтатусыВерсийХранилищаСрезПоследних.ВерсияХранилища КАК ВерсияХранилища
			|ПОМЕСТИТЬ АктивныеВерсииПоЗадаче
			|ИЗ
			|	(ВЫБРАТЬ
			|		СтатусыВерсийХранилища.Статус КАК Статус,
			|		СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища
			|	ИЗ
			|		(ВЫБРАТЬ
			|			МАКСИМУМ(СтатусыВерсийХранилища.Период) КАК Период,
			|			СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
			|			МАКСИМУМ(СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК ДатаЗаписиУниверсальная
			|		ИЗ
			|			РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
			|		ГДЕ
			|			СтатусыВерсийХранилища.ВерсияХранилища В
			|					(ВЫБРАТЬ
			|						ВерсииПоЗадаче.ВерсияХранилища КАК ВерсияХранилища
			|					ИЗ
			|						ВерсииПоЗадаче КАК ВерсииПоЗадаче)
			|		
			|		СГРУППИРОВАТЬ ПО
			|			СтатусыВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
			|			ПО МаксимальныйПериод.ВерсияХранилища = СтатусыВерсийХранилища.ВерсияХранилища
			|				И МаксимальныйПериод.Период = СтатусыВерсийХранилища.Период
			|				И МаксимальныйПериод.ДатаЗаписиУниверсальная = СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК СтатусыВерсийХранилищаСрезПоследних
			|ГДЕ
			|	НЕ СтатусыВерсийХранилищаСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.Перенесено)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗадачаИсполнителя.Дата <= &КонецПериодаПриемаНаСогласование КАК ОтправленоНаПроверкуВСрок
			|ПОМЕСТИТЬ ОграничениеПоВремени
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.Ссылка = &Задача
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Пользователи.Ссылка КАК АвторИзменений
			|ПОМЕСТИТЬ АвторыИзменений
			|ИЗ
			|	Справочник.ИсторияХранилища КАК ИсторияХранилища
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО ИсторияХранилища.Автор = Пользователи.Код
			|ГДЕ
			|	ИсторияХранилища.Ссылка В
			|			(ВЫБРАТЬ
			|				АктивныеВерсииПоЗадаче.ВерсияХранилища КАК ВерсияХранилища
			|			ИЗ
			|				АктивныеВерсииПоЗадаче КАК АктивныеВерсииПоЗадаче)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) > 0 КАК ЕстьСлучаиИзменилИПроверил
			|ПОМЕСТИТЬ ПредварительнаяПроверкаАвторомИзменений
			|ИЗ
			|	АвторыИзменений КАК Изменения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ПредварительнаяПроверка.Проверил_ПроверкаКода КАК СогласовалПредварительнуюПроверку
			|		ИЗ
			|			БизнесПроцесс.ПредварительнаяПроверка КАК ПредварительнаяПроверка
			|		ГДЕ
			|			ПредварительнаяПроверка.ЗадачаМетеор = &ЗадачаМетеор
			|			И ПредварительнаяПроверка.Завершен
			|			И НЕ ПредварительнаяПроверка.ПометкаУдаления) КАК ПредварительнаяПроверка
			|		ПО Изменения.АвторИзменений = ПредварительнаяПроверка.СогласовалПредварительнуюПроверку
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(МИНИМУМ(ЕСТЬNULL(ДополнительныеСведения.Значение, ЛОЖЬ)), ИСТИНА) = ИСТИНА КАК АвторуИзмененийРазрешеноАвтоматическоеСогласование
			|ПОМЕСТИТЬ АвтоматическоеСогласованиеПоАвтору
			|ИЗ
			|	АвторыИзменений КАК АвторыИзменений
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|		ПО АвторыИзменений.АвторИзменений = ДополнительныеСведения.Объект
			|			И (ДополнительныеСведения.Свойство.Имя = &ИмяСвойстваВозможностиАвтоматическогоСогласования)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИСТИНА КАК ВыполняютсяУсловияАвтоматическогоСогласования
			|ИЗ
			|	ОграничениеПоВремени КАК ОграничениеПоВремени
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредварительнаяПроверкаАвторомИзменений КАК ПроверяющийНеЯвляетсяАвторомИзменений
			|		ПО (ИСТИНА)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АвтоматическоеСогласованиеПоАвтору КАК АвтоматическоеСогласованиеПоАвтору
			|		ПО (ИСТИНА)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КОЛИЧЕСТВО(*) КАК КоличествоВерсийИзменений
			|		ИЗ
			|			АктивныеВерсииПоЗадаче КАК АктивныеВерсииПоЗадаче) КАК КоличествоИзменений
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ОграничениеПоВремени.ОтправленоНаПроверкуВСрок
			|	И (КоличествоИзменений.КоличествоВерсийИзменений = 0
			|			ИЛИ НЕ ПроверяющийНеЯвляетсяАвторомИзменений.ЕстьСлучаиИзменилИПроверил
			|				И АвтоматическоеСогласованиеПоАвтору.АвторуИзмененийРазрешеноАвтоматическоеСогласование)";
		РезультатЗапроса = Запрос.Выполнить();
		Возврат Не РезультатЗапроса.Пустой();
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПрименениеИзменений Тогда
		Можно = Истина;
	Иначе
		Можно = Ложь;
	КонецЕсли;
	
	Возврат Можно;
	
КонецФункции

Функция ЕстьНезагруженныеКоммиты(ЗадачаМетеор, ОсновнойСтатус) Экспорт
	
	ЕстьНезагруженныеКоммиты = Ложь;
	
	Версии = РаботаСХранилищами.ДанныеПоЗадаче(ЗадачаМетеор).Версии;
	Для Каждого Строка Из Версии Цикл
		Если Перечисления.СтатусыИсторииХранилищ.Индекс(Строка.Статус) < Перечисления.СтатусыИсторииХранилищ.Индекс(ОсновнойСтатус) Тогда
			ЕстьНезагруженныеКоммиты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьНезагруженныеКоммиты;
	
КонецФункции

Функция ЕстьКоммитыКСогласованию(ЗадачаМетеор, ОсновнойСтатус) Экспорт
	
	ЕстьКоммитыКСогласованию = Ложь;
	
	Версии = РаботаСХранилищами.ДанныеПоЗадаче(ЗадачаМетеор).Версии;
	Для Каждого Строка Из Версии Цикл
		Если Строка.Статус = ОсновнойСтатус Тогда
			ЕстьКоммитыКСогласованию = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьКоммитыКСогласованию;
	
КонецФункции

Функция ОсновнойСтатус() Экспорт
	
	Возврат Перечисления.СтатусыИсторииХранилищ.СогласованиеПереноса;
	
КонецФункции

Процедура ПриАвтозавершении(Задача, ТочкаМаршрута) Экспорт
	
	Если ТочкаМаршрута = БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПроверкаКода
		Или ТочкаМаршрута = БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПрименениеИзменений Тогда
			Согласовать(Задача, Истина);
	Иначе
		ВызватьИсключение(СтрШаблон("Для точки маршрута %1 не задан алгоритм ПриАвтозавершении!", ТочкаМаршрута));
	КонецЕсли;
	
КонецПроцедуры

// TODO: Вынести в общий модуль - согласуются БП разного содержания
Процедура Согласовать(Задача, Согласовано, ДанныеЗамечания = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	ИмяПроцесса = Задача.БизнесПроцесс.Метаданные().Имя;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(СтрШаблон("БизнесПроцесс.%1", ИмяПроцесса));
	Если Задача.БизнесПроцесс.Метаданные().Реквизиты.Найти("ЗадачаМетеор") <> Неопределено Тогда
		ЭлементБлокировки.УстановитьЗначение("ЗадачаМетеор", Задача.БизнесПроцесс.ЗадачаМетеор);
	КонецЕсли;
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ТипСогласования = Задача.ТочкаМаршрута.Имя;
	
	об = Задача.БизнесПроцесс.ПолучитьОбъект();
	Если ТипЗнч(ДанныеЗамечания) = Тип("Структура") Тогда
		Если ДанныеЗамечания.Свойство("HTML") Тогда 
			об["ЗамечаниеHTML_" + ТипСогласования] = ДанныеЗамечания.HTML;
		КонецЕсли;
		Если ДанныеЗамечания.Свойство("хзВложения") Тогда 
			об["ЗамечаниехзВложения_" + ТипСогласования] = ДанныеЗамечания.хзВложения;
		КонецЕсли;
	КонецЕсли;
	Если ИмяПроцесса = "СогласованиеПереноса" Тогда
		об["ПереносСогласован_" + ТипСогласования] = Согласовано;
		об["Проверил_" + ТипСогласования] = Пользователи.ТекущийПользователь();
	ИначеЕсли ИмяПроцесса = "КонвейерОбработки" Тогда
		об["ПереносСогласован_" + ТипСогласования] = Согласовано;
		об["Проверил_" + ТипСогласования] = Пользователи.ТекущийПользователь();
		об.ЕстьБлокирующиеОшибки = об.ЕстьБлокирующиеОшибки или Не Согласовано;
	ИначеЕсли ИмяПроцесса = "СогласованиеАрхитектуры" Тогда
		об.Согласовано = Согласовано;
	Иначе
		об.ПредварительнаяПроверкаПройдена = Согласовано;
		об.Проверил_ПроверкаКода = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	об.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ЕстьАктивныйПроцесс(ЗадачаМетеор, ПроцессИсключения = Неопределено) Экспорт
	
	Возврат ЗначениеЗаполнено(АктивныйПроцесс(ЗадачаМетеор, ПроцессИсключения));
	
КонецФункции

Функция АктивныйПроцесс(ЗадачаМетеор, ПроцессИсключения = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СогласованиеПереноса.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.СогласованиеПереноса КАК СогласованиеПереноса
	|ГДЕ
	|	СогласованиеПереноса.Стартован
	|	И НЕ СогласованиеПереноса.Завершен
	|	И НЕ СогласованиеПереноса.ПометкаУдаления
	|	И СогласованиеПереноса.ЗадачаМетеор = &ЗадачаМетеор
	|	И НЕ СогласованиеПереноса.Ссылка = &ПроцессИсключения";
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
	Запрос.УстановитьПараметр("ПроцессИсключения", ПроцессИсключения);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		АктивныйПроцесс = Выборка.Ссылка;
	Иначе
		АктивныйПроцесс = БизнесПроцессы.СогласованиеПереноса.ПустаяСсылка();
	КонецЕсли;
	Возврат АктивныйПроцесс;
	
КонецФункции

// Копия метода из формы Обработки.РаботаСЗадачами.Форма
Функция СогласованиеВозможно(ЗадачаМетеор, ТекущаяТочкаМаршрута)
	// Дополнения
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадачиМетеорДополнений.ВерсияДополнения КАК ВерсияДополнения,
		|	ЗадачиМетеорДополнений.ВерсияДополнения.Владелец.ТипДополнения КАК ТипДополнения,
		|	СтатусыДополненийСрезПоследних.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.ЗадачиМетеорДополнений КАК ЗадачиМетеорДополнений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДополнений.СрезПоследних КАК СтатусыДополненийСрезПоследних
		|		ПО ЗадачиМетеорДополнений.ВерсияДополнения = СтатусыДополненийСрезПоследних.ВерсияДополнения
		|ГДЕ
		|	ЗадачиМетеорДополнений.ЗадачаМетеор = &ЗадачаМетеор
		|	И ЕСТЬNULL(СтатусыДополненийСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.)) <> ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.Перенос)
		|	И НЕ ЗадачиМетеорДополнений.ВерсияДополнения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
	Дополнения = Запрос.Выполнить().Выгрузить();
	// Версии
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияХранилища.Ссылка КАК Коммит,
		|	СтатусыВерсийХранилищаСрезПоследних.Статус КАК Статус,
		|	ИсторияХранилища.Владелец.ЗапретитьАвтоматическоеСогласование КАК ЗапретитьАвтоматическоеСогласование,
		|	ИсторияХранилища.Владелец.Владелец КАК Проект
		|ИЗ
		|	Справочник.ИсторияХранилища КАК ИсторияХранилища
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
		|		ПО (ЗадачиМетеорВерсийХранилища.ВерсияХранилища = ИсторияХранилища.Ссылка)
		|			И (ЗадачиМетеорВерсийХранилища.ЗадачаМетеор = &ЗадачаМетеор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МаксимальныйПериод.Период КАК Период,
		|			МаксимальныйПериод.ВерсияХранилища КАК ВерсияХранилища,
		|			МаксимальныйПериод.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная,
		|			СтатусыВерсийХранилища.Период КАК Период1,
		|			СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища1,
		|			СтатусыВерсийХранилища.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная1,
		|			СтатусыВерсийХранилища.Статус КАК Статус,
		|			СтатусыВерсийХранилища.Ответственный КАК Ответственный,
		|			СтатусыВерсийХранилища.Процесс КАК Процесс,
		|			СтатусыВерсийХранилища.Комментарий КАК Комментарий
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(СтатусыВерсийХранилища.Период) КАК Период,
		|				СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
		|				МАКСИМУМ(СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК ДатаЗаписиУниверсальная
		|			ИЗ
		|				РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
		|			ГДЕ
		|				ИСТИНА
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СтатусыВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
		|				ПО МаксимальныйПериод.ВерсияХранилища = СтатусыВерсийХранилища.ВерсияХранилища
		|					И МаксимальныйПериод.Период = СтатусыВерсийХранилища.Период
		|					И МаксимальныйПериод.ДатаЗаписиУниверсальная = СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК СтатусыВерсийХранилищаСрезПоследних
		|		ПО (СтатусыВерсийХранилищаСрезПоследних.ВерсияХранилища = ИсторияХранилища.Ссылка)";
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
	Версии = Запрос.Выполнить().Выгрузить();
	// Проверка
	Отказ = Ложь;
	ТочкиСогласования = Новый Массив;
	ТочкиСогласования.Добавить(ПредопределенноеЗначение("БизнесПроцесс.ПредварительнаяПроверка.ТочкаМаршрута.ПроверкаКода"));
	ТочкиСогласования.Добавить(ПредопределенноеЗначение("БизнесПроцесс.СогласованиеПереноса.ТочкаМаршрута.ПроверкаКода"));
	Если Не (ТочкиСогласования.Найти(ТекущаяТочкаМаршрута) = Неопределено) Тогда
		МинимальныйСтатус = ?(ТекущаяТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.ПредварительнаяПроверка.ТочкаМаршрута.ПроверкаКода"),
			БизнесПроцессы.ПредварительнаяПроверка.ОсновнойСтатус(),
			БизнесПроцессы.СогласованиеПереноса.ОсновнойСтатус());	
		Для Каждого Строка Из Дополнения Цикл
			Если Строка.ТипДополнения = ПредопределенноеЗначение("Перечисление.ТипыДополнений.Расширение") 
					И Перечисления.СтатусыИсторииХранилищ.Индекс(Строка.Статус) < Перечисления.СтатусыИсторииХранилищ.Индекс(МинимальныйСтатус) Тогда
				ТекстСообщения = СтрШаблон("Дополнение %1 не готово к согласованию. Проверьте статус.", Строка.ВерсияДополнения);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из Версии Цикл
			Если Перечисления.СтатусыИсторииХранилищ.Индекс(Строка.Статус) < Перечисления.СтатусыИсторииХранилищ.Индекс(МинимальныйСтатус) Тогда
				ТекстСообщения = СтрШаблон("Коммит %1 %2 не готов к согласованию. Проверьте статус.", Строка.Коммит, Строка.Проект);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
			Если Строка.ЗапретитьАвтоматическоеСогласование = Истина Тогда
				ТекстСообщения = СтрШаблон("Коммит %1 по проекту %2 у которого запрещено автосогласование .", Строка.Коммит, Строка.Проект);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти

#КонецЕсли
