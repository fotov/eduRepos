#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ЗадачаВыполнима(Задача, ТочкаМаршрута) Экспорт
	
	Если ТочкаМаршрута = БизнесПроцессы.ПодготовкаТестовойБазы.ТочкиМаршрута.ЗапуститьСозданиеКлона Тогда
		ЗадачаВыполнима = ЗапуститьСозданиеКлона(Задача.БизнесПроцесс);
	
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.ПодготовкаТестовойБазы.ТочкиМаршрута.ОжиданиеПодготовкиКлона Тогда
		ЗадачаВыполнима = ФоновоеЗаданиеПодготовкиКлонаЗавершено(Задача.БизнесПроцесс);
	
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.ПодготовкаТестовойБазы.ТочкиМаршрута.ОбновлениеДанныхВедущегоПроцесса Тогда
		ЗадачаВыполнима = ОбновлениеДанныхВедущегоПроцесса(Задача.БизнесПроцесс);
	
	Иначе
		ЗадачаВыполнима = Истина;
		
	КонецЕсли;
	
	Возврат ЗадачаВыполнима;
	
КонецФункции

Функция МожноАвтозавершитьЗадачу(Задача, ТочкаМаршрута) Экспорт
	
	Можно = Ложь;
	
	Если Не ТестоваяБазаЕщеНужна(Задача.БизнесПроцесс) Тогда
		Можно = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПодготовкаТестовойБазы.Ссылка КАК Ссылка,
		|	ПодготовкаТестовойБазы.Дата КАК Дата
		|ПОМЕСТИТЬ АктивныеПроцессы
		|ИЗ
		|	БизнесПроцесс.ПодготовкаТестовойБазы КАК ПодготовкаТестовойБазы
		|ГДЕ
		|	ПодготовкаТестовойБазы.СтрокаСоединенияПриемник = &СтрокаСоединенияПриемник
		|	И ПодготовкаТестовойБазы.ПометкаУдаления = ЛОЖЬ
		|	И ПодготовкаТестовойБазы.Завершен = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Влож.Дата КАК Дата,
		|	АктивныеПроцессы.Ссылка КАК Ссылка
		|ИЗ
		|	АктивныеПроцессы КАК АктивныеПроцессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(АктивныеПроцессы.Дата) КАК Дата
		|		ИЗ
		|			АктивныеПроцессы КАК АктивныеПроцессы) КАК Влож
		|		ПО АктивныеПроцессы.Дата = Влож.Дата";
	Запрос.УстановитьПараметр("СтрокаСоединенияПриемник", Задача.БизнесПроцесс.СтрокаСоединенияПриемник);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Можно = Можно или (Выборка.Ссылка <> Задача.БизнесПроцесс);
	КонецЕсли;
	
	Возврат Можно;
	
КонецФункции

Процедура ПриАвтозавершении(Задача, ТочкаМаршрута) Экспорт
КонецПроцедуры

Функция ЗапуститьСозданиеКлона(БизнесПроцесс, ИнтерактивныйЗапуск = Ложь) Экспорт
	Если Не ТестоваяБазаЕщеНужна(БизнесПроцесс) И ИнтерактивныйЗапуск = Ложь Тогда
		Возврат Истина;
		БизнесПроцесс = БизнесПроцессы.ПодготовкаТестовойБазы.ПустаяСсылка();
	КонецЕсли;
	ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.ПодготовкаТестовойБазы.ТочкиМаршрута.ЗапуститьСозданиеКлона;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Источник", БизнесПроцесс.СтрокаСоединенияИсточник);
	ПараметрыЗадания.Вставить("Приемник", БизнесПроцесс.СтрокаСоединенияПриемник);
	Если ТипЗнч(БизнесПроцесс.КонвейерОбработки) = Тип("БизнесПроцессСсылка.КонвейерОбработки") Тогда
		ПараметрыЗадания.Вставить("ИмяФайлаКонфигурации", БизнесПроцесс.КонвейерОбработки.ПутьКФайлуКонфигурации);
		ПараметрыЗадания.Вставить("Расширения", Новый Структура);
		Для Каждого Стр Из БизнесПроцесс.КонвейерОбработки.Расширения Цикл
			ПараметрыЗадания.Расширения.Вставить(Стр.ИмяРасширения, Стр.ПутьКФайлуРасширения);
		КонецЦикла;
	ИначеЕсли ТипЗнч(БизнесПроцесс.КонвейерОбработки) = Тип("БизнесПроцессСсылка.ПодготовкаСредыДляИнтеграционныхТестов") Тогда
		ДанныеПроект = БизнесПроцесс.КонвейерОбработки.Проекты.НайтиСтроки(Новый Структура("Конфигурация", БизнесПроцесс.Конфигурация));
		ПараметрыЗадания.Вставить("ИмяФайлаКонфигурации", "");
		ПараметрыЗадания.Вставить("Расширения", Новый Структура);
		Для Каждого Стр Из ДанныеПроект Цикл
			Если Стр.ИмяРасширения = "" Тогда
				ПараметрыЗадания.ИмяФайлаКонфигурации = Стр.ПутьКФайлуКонфигурации;
			Иначе
				ПараметрыЗадания.Расширения.Вставить(Стр.ИмяРасширения, Стр.ПутьКФайлуКонфигурации);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПараметрыЗадания.Вставить("ИмяФайлаКонфигурации", КешВерсийХранилищ.ПолучитьПутьФайлаВерсии(БизнесПроцесс.Коммит));
		ПараметрыЗадания.Вставить("Расширения", Новый Структура);
	КонецЕсли;
	
	Попытка
		Сервис = ВнешниеДанные.ПолучитьСервисРаботыСБазами(60);
		Ответ = Сервис.ЗапуститьСозданиеКлона(ЗначениеВСтрокуВнутр(ПараметрыЗадания));
		ДобавитьСообщение(БизнесПроцесс, Ответ, ТочкаМаршрутаБизнесПроцесса);
		
		Объект = БизнесПроцесс.ПолучитьОбъект();
		Объект.КлючФоновогоЗадания = Ответ;
		Объект.ПлановоеВремяПерезапускаПроцесса = '00010101';
		Объект.Записать();
		
		Возврат Истина;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ДобавитьСообщение(БизнесПроцесс, ОписаниеОшибки, ТочкаМаршрутаБизнесПроцесса, , Истина);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьСообщение(БП, Текст, Шаг, ПроцентВыполнения = 0, Ошибка = Ложь, ИсключитьДубли = Ложь)
	КонвейерОбработкиСервер.ДобавитьСообщениеБизнесПроцесс(БП, Текст, Шаг, ПроцентВыполнения, Ошибка, ИсключитьДубли);
КонецПроцедуры

Функция ТестоваяБазаЕщеНужна(БизнесПроцесс)
	
	ОшибкиДляОстановки = Новый Массив;
	ОшибкиДляОстановки.Добавить("В процессе обновления информационной базы произошла некритичная ошибка");
	ОшибкиДляОстановки.Добавить("В процессе обновления информационной базы произошла критическая ошибка");
	ОшибкиДляОстановки.Добавить("При проверке метаданных обнаружены ошибки!");
	ОшибкиДляОстановки.Добавить("Необходим анализ ошибки");
	ОшибкиДляОстановки.Добавить("Пустой текст запроса");
	ОшибкиДляОстановки.Добавить("Сервер базы источника и приемника должны совпадать");
	ОшибкиДляОстановки.Добавить("Не верный формат строки соединения");
	ОшибкиДляОстановки.Добавить("В схеме базы данных отсутствует таблица");
	ОшибкиДляОстановки.Добавить("Для одного ссылочного кода существует более одной таблицы в базе данных");
	ОшибкиДляОстановки.Добавить("Имеются записи с одинаковыми измерениями");
	Для Каждого ТекстОшибки Из ОшибкиДляОстановки Цикл
		Если СтрНайти(БизнесПроцесс.ВсеСообщения, ТекстОшибки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(БизнесПроцесс.КонвейерОбработки) Тогда
		ДатаГраница = ТекущаяДатаСеанса() - 4 * 3600;
		Если БизнесПроцесс.Дата < ДатаГраница Тогда
			Возврат Ложь;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Максимум(ПодготовкаТестовойБазы.Дата) КАК ПоследняяДата
			|ИЗ
			|	БизнесПроцесс.ПодготовкаТестовойБазы КАК ПодготовкаТестовойБазы
			|ГДЕ
			|	ПодготовкаТестовойБазы.СтрокаСоединенияПриемник = &СтрокаСоединенияПриемник
			|	И ПодготовкаТестовойБазы.Дата > &Дата
			|	И ПодготовкаТестовойБазы.ПометкаУдаления = Ложь
			|	И ПодготовкаТестовойБазы.Завершен = Ложь
			|	И ПодготовкаТестовойБазы.Ссылка <> &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", БизнесПроцесс.Ссылка);
		Запрос.УстановитьПараметр("СтрокаСоединенияПриемник", БизнесПроцесс.СтрокаСоединенияПриемник);
		Запрос.УстановитьПараметр("Дата", ДатаГраница);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Если Не ЗначениеЗаполнено(Выборка.ПоследняяДата) Тогда
			Возврат Истина;
		КонецЕсли;
		Возврат Выборка.ПоследняяДата < БизнесПроцесс.Дата
		
	ИначеЕсли ТипЗнч(БизнесПроцесс.КонвейерОбработки) = Тип("БизнесПроцессСсылка.КонвейерОбработки") Тогда
		Возврат БизнесПроцессы.КонвейерОбработки.ТестоваяБазаЕщеНужна(БизнесПроцесс.КонвейерОбработки);
	ИначеЕсли ТипЗнч(БизнесПроцесс.КонвейерОбработки) = Тип("БизнесПроцессСсылка.ПодготовкаСредыДляИнтеграционныхТестов") Тогда
		Возврат БизнесПроцессы.ПодготовкаСредыДляИнтеграционныхТестов.ТестоваяБазаЕщеНужна(БизнесПроцесс.КонвейерОбработки);
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

Функция ФоновоеЗаданиеПодготовкиКлонаЗавершено(БизнесПроцесс)
	Если Не ТестоваяБазаЕщеНужна(БизнесПроцесс) Тогда
		Возврат Истина;
		БизнесПроцесс = БизнесПроцессы.ПодготовкаТестовойБазы.ПустаяСсылка();
	КонецЕсли;
	ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.ПодготовкаТестовойБазы.ТочкиМаршрута.ОжиданиеПодготовкиКлона;
	
	Если БизнесПроцесс.ПлановоеВремяПерезапускаПроцесса > ТекущаяДатаСеанса() Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(БизнесПроцесс.ПлановоеВремяПерезапускаПроцесса) Тогда
		ЗапуститьСозданиеКлона(БизнесПроцесс);
	КонецЕсли;
	
	Попытка
		Сервис = ВнешниеДанные.ПолучитьСервисРаботыСБазами(60);
		Ответ = Сервис.ПолучитьСтатусСозданияКлона(БизнесПроцесс.КлючФоновогоЗадания);
		
		Данные = ЗначениеИзСтрокиВнутр(Ответ);
		
		Если Данные.Состояние = Строка(СостояниеФоновогоЗадания.Активно) Тогда
			ДобавитьСообщение(БизнесПроцесс, Данные.ТекстОшибки, Данные.ТекущаяОперация, Данные.ПроцентВыполнения, Данные.Ошибка, Истина);
			Возврат Ложь;
			
		ИначеЕсли Данные.Состояние = Строка(СостояниеФоновогоЗадания.Завершено) Тогда
			ДобавитьСообщение(БизнесПроцесс, "Завершено", Данные.ТекущаяОперация, Данные.ПроцентВыполнения, Данные.Ошибка, Истина);
			Объект = БизнесПроцесс.ПолучитьОбъект();
			Объект.ОшибкаСозданияКлона = Ложь;
			Объект.ВсеСообщения = Данные.Сообщения;
			Объект.Записать();
			Возврат Истина;
			
		ИначеЕсли Данные.Состояние = Строка(СостояниеФоновогоЗадания.ЗавершеноАварийно) Тогда
			ДобавитьСообщение(БизнесПроцесс, "ЗавершеноАварийно", ТочкаМаршрутаБизнесПроцесса, , Истина, Ложь);
			Объект = БизнесПроцесс.ПолучитьОбъект();
			Объект.ОшибкаСозданияКлона = Истина;
			Объект.ВсеСообщения = Данные.ИнформацияОбОшибке;
			Объект.ПлановоеВремяПерезапускаПроцесса = ТекущаяДатаСеанса() + 600; // Пауза на 10 минут
			Объект.Записать();
			Возврат Ложь;
			
		ИначеЕсли Данные.Состояние = Строка(СостояниеФоновогоЗадания.Отменено) Тогда
			ДобавитьСообщение(БизнесПроцесс, "Отменено", ТочкаМаршрутаБизнесПроцесса, , Истина, Ложь);
			Объект = БизнесПроцесс.ПолучитьОбъект();
			Объект.ОшибкаСозданияКлона = Истина;
			Объект.ВсеСообщения = Данные.Сообщения;
			Объект.ПлановоеВремяПерезапускаПроцесса = ТекущаяДатаСеанса() + 600; // Пауза на 10 минут
			Объект.Записать();
			Возврат Ложь;
			
		Иначе 
			ДобавитьСообщение(БизнесПроцесс, "Неизвестное состояние "+Данные.Состояние, ТочкаМаршрутаБизнесПроцесса, , Истина, Истина);
			Объект = БизнесПроцесс.ПолучитьОбъект();
			Объект.ОшибкаСозданияКлона = Истина;
			Объект.ВсеСообщения = Данные.Сообщения;
			Объект.Записать();
			Возврат Истина;
			
		КонецЕсли;
		
		Возврат Истина;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ДобавитьСообщение(БизнесПроцесс, ОписаниеОшибки, ТочкаМаршрутаБизнесПроцесса, , Истина);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ОбновлениеДанныхВедущегоПроцесса(БизнесПроцесс)
	
	Если Не ЗначениеЗаполнено(БизнесПроцесс.КонвейерОбработки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.ПодготовкаТестовойБазы.ТочкиМаршрута.ОбновлениеДанныхВедущегоПроцесса;
	
	Попытка
		БП = БизнесПроцесс.КонвейерОбработки.ПолучитьОбъект();
		Строка = БП.ТестовыеБазы.Найти(БизнесПроцесс.СтрокаСоединенияПриемник, "СтрокаСоединения");
		Если Строка = Неопределено Тогда
			Строка = БП.ТестовыеБазы.Добавить();
			Строка.СтрокаСоединения = БизнесПроцесс.СтрокаСоединенияПриемник;
			Строка.Наименование = Строка.СтрокаСоединения;
		КонецЕсли;
		Если БизнесПроцесс.ОшибкаСозданияКлона Тогда
			Строка.Подготовлена = Ложь;
			Строка.ОшибкаПроготовки = Истина;
			Строка.Причина = "Обновите конфигурацию вручную (через конфигуратор)";
		Иначе
			Строка.Подготовлена = Истина;
			Строка.ОшибкаПроготовки = Ложь;
			Строка.Причина = "";
		КонецЕсли;
		БП.Записать();
		
		ДобавитьСообщение(БизнесПроцесс, "Подготовка завершена"+?(БизнесПроцесс.ОшибкаСозданияКлона, " с ошибкой", ""), ТочкаМаршрутаБизнесПроцесса, 100, БизнесПроцесс.ОшибкаСозданияКлона);
		
		Возврат Истина;
	Исключение
		ДобавитьСообщение(БизнесПроцесс, ОписаниеОшибки(), ТочкаМаршрутаБизнесПроцесса, , Истина);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#КонецЕсли

