#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВложенныеБизнесПроцессы.Параметры.Элементы.Найти("БизнесПроцесс").Использование = Истина;
	ВложенныеБизнесПроцессы.Параметры.Элементы.Найти("БизнесПроцесс").Значение = Объект.Ссылка;
	
	ОписаниеЗадачи = БизнесПроцессы.ПодготовкаСредыДляИнтеграционныхТестов.ПолучитьПредставлениеЗадачиВHTML(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(Объект.Хранилище) Тогда
		Объект.Хранилище = Константы.ПроектПодготовкаСредыДляИнтеграционныхТестов.Получить();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СхемаБП = ТекущийОбъект.ПолучитьКартуМаршрута();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если Параметр = Объект.Ссылка Тогда
		Прочитать();
		ОбновитьСхемуНаСервере();
		Элементы.ВложенныеБизнесПроцессы.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	РазблокироватьДанныеФормыДляРедактирования();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СхемаБПВыбор(Элемент)
	Задача = ПолучитьСсылкуНаЗадачу(Элемент.ТекущийЭлемент.Значение);
	Если ЗначениеЗаполнено(Задача) Тогда
		ПоказатьЗначение(, Задача);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВнутреннийИдентификаторКонвейераОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения, 
		КаталогРезультатовПайплайнов(Объект.Хранилище)+Объект.ВнутреннийИдентификаторКонвейера);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонвейерНажатие(Элемент)
	НачатьЗапускПриложения(Новый ОписаниеОповещения, URLКонвейера());
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогРезультатовНажатие(Элемент)
	НачатьЗапускПриложения(Новый ОписаниеОповещения, ПутьКРезультатамПайплайна());
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеЗадачиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСФормамиКлиент.ОбработкаКликаПоСсылке(Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьШаг(Команда)
	Если Модифицированность Тогда
		Сообщить("Надо записать");
		Возврат;
	КонецЕсли;
	Прочитать();
	ВыполнитьШагНаСервере();
	Прочитать();
	ОбновитьСхему(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСхему(Команда)
	Прочитать();
	ОбновитьСхемуНаСервере();
	ТекущийЭлемент = Элементы.СхемаБП;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьШагПодготовкаТестовойБазы(Команда)
	ВыполнитьШагПодготовкаТестовойБазыНаСервере(Элементы.ВложенныеБизнесПроцессы.ТекущаяСтрока);
	Элементы.ВложенныеБизнесПроцессы.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ИзмененныеОбъекты(Команда)
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(ИзмененныеОбъектыНаСервере());
	ТекстДок.Показать("Измененные объекты");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


&НаСервере
Процедура ВыполнитьШагНаСервере()
	КонвейерОбработкиСервер.ВыполнитьШагБизнесПроцесса(Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСхемуНаСервере()
	СхемаБП = РеквизитФормыВЗначение("Объект").ПолучитьКартуМаршрута();
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНаЗадачу(ТочкаМаршрута)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";
	Запрос.УстановитьПараметр("БизнесПроцесс", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Если ТочкаМаршрута.Вид = ВидТочкиМаршрутаБизнесПроцесса.Действие Тогда
		Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		Задача.БизнесПроцесс = Объект.Ссылка;
		Задача.ТочкаМаршрута = ТочкаМаршрута;
		Задача.Наименование = Задача.ТочкаМаршрута;
		Задача.Дата = ТекущаяДатаСеанса();
		Задача.РольИсполнителя = ТочкаМаршрута.РольИсполнителя;
		Задача.Записать();
		Возврат Задача.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция КаталогРезультатовПайплайнов(Хранилище)
	Возврат Хранилище.КаталогРезультатовПайплайнов;
КонецФункции

&НаСервере
Функция URLКонвейера()
	Возврат КонвейерОбработкиСервер.URLКонвейера(Объект.Хранилище, Объект.ИдентификаторКонвейера);
КонецФункции

&НаСервере
Функция ПутьКРезультатамПайплайна()
	Возврат КонвейерОбработкиСервер.ПутьКРезультатамПайплайна(Объект.Хранилище, Объект.ИдентификаторКонвейера, Объект.ВнутреннийИдентификаторКонвейера);
КонецФункции

&НаСервере
Процедура ВыполнитьШагПодготовкаТестовойБазыНаСервере(БП)
	КонвейерОбработкиСервер.ВыполнитьШагБизнесПроцесса(БП);
КонецПроцедуры

&НаСервере
Функция ИзмененныеОбъектыНаСервере()
	мРез = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ПодготовкаСредыДляИнтеграционныхТестов.Дата) КАК Дата
		|ПОМЕСТИТЬ ОтметкаВремени
		|ИЗ
		|	БизнесПроцесс.ПодготовкаСредыДляИнтеграционныхТестов КАК ПодготовкаСредыДляИнтеграционныхТестов
		|ГДЕ
		|	ПодготовкаСредыДляИнтеграционныхТестов.ПометкаУдаления = ЛОЖЬ
		|	И ПодготовкаСредыДляИнтеграционныхТестов.Дата < &Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонфигурацииОбъектыЗапускаИнтеграционныхТестов.Ссылка.ХранилищеОбновления КАК Хранилище,
		|	КонфигурацииОбъектыЗапускаИнтеграционныхТестов.ИмяОбъекта + ""%"" КАК ШаблонФайла
		|ПОМЕСТИТЬ ИменаФайлов
		|ИЗ
		|	Справочник.Конфигурации.ОбъектыЗапускаИнтеграционныхТестов КАК КонфигурацииОбъектыЗапускаИнтеграционныхТестов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
		|	ВЫРАЗИТЬ(ИсторияХранилищаФайлыGit.Файл КАК СТРОКА(1023)) КАК Файл,
		|	ИсторияХранилищаФайлыGit.Ссылка.Владелец КАК Хранилище
		|ИЗ
		|	Справочник.ИсторияХранилища.ФайлыGit КАК ИсторияХранилищаФайлыGit
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИменаФайлов КАК ИменаФайлов
		|		ПО ИсторияХранилищаФайлыGit.Ссылка.Владелец = ИменаФайлов.Хранилище
		|			И (ИсторияХранилищаФайлыGit.Файл ПОДОБНО ИменаФайлов.ШаблонФайла)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтметкаВремени КАК ОтметкаВремени
		|		ПО (ИсторияХранилищаФайлыGit.Ссылка.Дата МЕЖДУ ОтметкаВремени.Дата И &Дата)";
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		мРез.Добавить(СтрШаблон("%1 (%2)", Выборка.Файл, Выборка.Хранилище));
	КонецЦикла;
	Возврат СтрСоединить(мРез, Символы.ПС);
КонецФункции

&НаСервере
Процедура ПерезапуститьПодготовкуТестовыхБазНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Задача
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ВыборкаЗадачи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗадачи.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаЗадачи.Задача) Тогда
			Продолжить;
		КонецЕсли;
		Задача = ВыборкаЗадачи.Задача.ПолучитьОбъект();
		Задача.Удалить();
	КонецЦикла;
	
	Объект.Стартован = Ложь;
	Объект.Завершен = Ложь;
	Объект.ОшибкаОбновленияТестовыхБаз = Ложь;
	Объект.Дата = ТекущаяДатаСеанса();
	Объект.Сообщения.Очистить();
	Для Каждого Стр Из Объект.ТестовыеБазы Цикл
		Стр.Подготовлена = Ложь;
		Стр.ОшибкаПроготовки = Ложь;
		Стр.Причина = "";
	КонецЦикла;
	
	Об = РеквизитФормыВЗначение("Объект");
	Об.Старт();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезапуститьПодготовкуТестовыхБаз(Команда)
	ПерезапуститьПодготовкуТестовыхБазНаСервере();
	Прочитать();
КонецПроцедуры

#КонецОбласти

