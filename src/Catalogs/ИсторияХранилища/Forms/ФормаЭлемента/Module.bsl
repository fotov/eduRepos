
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗначенияРесурсов = РегистрыСведений.ЗадачиМетеорВерсийХранилища.Получить(Новый Структура("ВерсияХранилища", Объект.Ссылка));
	ЗадачаМетеор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "ЗадачаМетеор");
	ЗначенияРесурсов = РегистрыСведений.ХешиGitВерсийХранилища.Получить(Новый Структура("ВерсияХранилища", Объект.Ссылка));
	ХешGit = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "Хеш");
	ЗначенияРесурсов = РегистрыСведений.ПоказателиВерсийХранилища.Получить(Новый Структура("ВерсияХранилища", Объект.Ссылка));
	ПроверкаКодаВручную = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "ПроверкаКодаВручную");
	ДанныеЗагружены_Автотесты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "ДанныеЗагружены_Автотесты");
	ОшибокАвтотесты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "ОшибокАвтотесты");
	АвтотестыОписание = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "АвтотестыОписание");
	Тег = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "Тег");
	ЗначенияРесурсов = РегистрыСведений.РезультатыСинтаксическойПроверки.Получить(Новый Структура("ОбъектПроверки", Объект.Ссылка));
	ДанныеЗагружены_ОшибокАПК = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "ПровереноАПК", Ложь);
	ОшибокАПК = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "КоличествоОшибокАПК", 0);
	КоличествоОшибокBSL_LS = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "КоличествоОшибокBSL_LS", 0);
	Статус = ТекущийСтатусВерсииХранилища();
	
	УстановитьОтборДинамическимСпискам();
	
	URLЗадачиМетеор = Справочники.ЗадачиМетеор.URLЗадачиМетеор(ЗадачаМетеор);
	URLGit 			= Справочники.ИсторияХранилища.URLGit(Объект.Ссылка);
	URLAllure 		= Справочники.ИсторияХранилища.URLAllure(Объект);
	URLJUnit        = Справочники.ИсторияХранилища.URLJUnit(Объект);
	
	РаботаСФормамиСервер.НастроитьЭлементыФормыКонфликтыИзменений(КонфликтыИзменений, Элементы.ГруппаКонфликтыИзменений, ЗадачаМетеор, Объект.Ссылка);
	Элементы.ГруппаСломанныеТесты.Видимость = ЗначениеЗаполнено(ОшибокАвтотесты);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьОтборДинамическимСпискам();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура URLЗадачаМетеорНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения, URLЗадачиМетеор);
	
КонецПроцедуры

&НаКлиенте
Процедура ХэшGitНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения, URLGit);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибокАПКНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//РезультатПроверки = ОтчетПоОшибкамСинтаксическойПроверкиАПК(Объект.Ссылка);
	//РезультатПроверки.Показать("Результат проверки АПК");
	ОткрытьОтчетСинтаксическойПроверки(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоОшибокBSL_LSНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ТабличныйДокумент = ОшибкиПоКоммиту(Объект.Ссылка);
	//ТабличныйДокумент.Показать();
	ОткрытьОтчетСинтаксическойПроверки(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОшибокАвтотестыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтчетов = Новый СписокЗначений;
	СписокОтчетов.Добавить(URLAllure, "Allure");
	СписокОтчетов.Добавить(URLJUnit,  "JUnit");
	
	Оповещение = Новый ОписаниеОповещения("ОшибокАвтотестыНажатиеЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(Оповещение, СписокОтчетов, Элемент); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибокАвтотестыНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения, ВыбранныйЭлемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура КонфликтыИзмененийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	РаботаСФормамиКлиент.КонфликтыИзмененийВыбор(Элемент, Поле);
КонецПроцедуры

&НаКлиенте
Процедура ФайлыGitВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Адрес = ПолучитьURLФайлаХранилища(Элемент.ТекущиеДанные.Файл);
	НачатьЗапускПриложения(Новый ОписаниеОповещения(), Адрес);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ИзмененыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьОбъектМетаданных(Элементы.Изменены.ТекущиеДанные.ИмяОбъекта, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДобавленыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьОбъектМетаданных(Элементы.Добавлены.ТекущиеДанные.ИмяОбъекта, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УдаленыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьОбъектМетаданных(Элементы.Удалены.ТекущиеДанные.ИмяОбъекта, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьМетку(Команда)
	УстановитьМеткуНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Функция ПолучитьURLФайлаХранилища(ИмяФайла)
	Если ЗначениеЗаполнено(Объект.Владелец.БазовоеХранилище) Тогда
		ЧастьURL = Объект.Владелец.БазовоеХранилище.ПроектGit.СсылкаURL;
	Иначе
		ЧастьURL = Объект.Владелец.ПроектGit.СсылкаURL;
	КонецЕсли;
	Части = Новый Массив;
	Части.Добавить(ЧастьURL);
	Части.Добавить("/-/blob/master/");
	Части.Добавить(ИмяФайла);
	Возврат СтрСоединить(Части, "");
КонецФункции

&НаСервере
Процедура УстановитьОтборДинамическимСпискам()
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ИсторияИзмененийСтатусов.Отбор, "ВерсияХранилища", Объект.Ссылка,,, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СломанныеТесты.Отбор, "Коммит", Объект.Ссылка,,, Истина);
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОбновлениеИБНаСервере()
	РегистрыСведений.ИсторияПримененияКонфигураций.ЗарегистрироватьОбновлениеИБ(Строка(Объект.Владелец), Объект.Код, "", "ИсторияХранилища.ФормаЭлемента", Пользователи.ТекущийПользователь().Код);
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьОбновлениеИБ(Команда)
	ЗарегистрироватьОбновлениеИБНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбъектМетаданных(ИмяОбъекта, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбъектМетаданных = ОбъектМетаданныхПоИмени(Объект.Владелец, ИмяОбъекта);
	ОбъектМетаданных = ?(ОбъектМетаданных.Пустая(), "Объект метаданных не найден.", ОбъектМетаданных);
	ПоказатьЗначение(, ОбъектМетаданных);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбъектМетаданныхПоИмени(Хранилище, ПолноеИмяОбъекта)
	
	ОбъектМетаданных = Справочники.ОбъектыМетаданных.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыМетаданных.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|ГДЕ
		|	ОбъектыМетаданных.Владелец.ХранилищеРазработки = &ХранилищеРазработки
		|	И ОбъектыМетаданных.Наименование = &ИмяОбъекта";
	
	ПозицияТочки = СтрНайти(ПолноеИмяОбъекта, ".",,,2);
	Запрос.УстановитьПараметр("ИмяОбъекта", Сред(ПолноеИмяОбъекта, 1, ПозицияТочки - 1));
	Запрос.УстановитьПараметр("ХранилищеРазработки", Хранилище);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОбъектМетаданных = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат ОбъектМетаданных;
	
КонецФункции

Функция ТекущийСтатусВерсииХранилища()

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатусыВерсийХранилищаСрезПоследних.Статус
		|Из
		|	(ВЫБРАТЬ
		|		*
		|	ИЗ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(СтатусыВерсийХранилища.Период) КАК Период,
		|			СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
		|			МАКСИМУМ(СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК ДатаЗаписиУниверсальная
		|		ИЗ
		|			РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
		|		ГДЕ
		|			ВерсияХранилища = &ВерсияХранилища
		|		СГРУППИРОВАТЬ ПО
		|			СтатусыВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
		|			ПО МаксимальныйПериод.ВерсияХранилища = СтатусыВерсийХранилища.ВерсияХранилища
		|			И МаксимальныйПериод.Период = СтатусыВерсийХранилища.Период
		|			И МаксимальныйПериод.ДатаЗаписиУниверсальная = СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК
		|		СтатусыВерсийХранилищаСрезПоследних";
	Запрос.УстановитьПараметр("ВерсияХранилища", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Статус;
	КонецЕсли;
	Возврат Перечисления.СтатусыИсторииХранилищ.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ОшибкиПоКоммиту(Коммит)
	Возврат СинтаксическаяПроверкаBSLLS.ОшибкиПоКоммиту(Коммит);
КонецФункции

&НаСервереБезКонтекста
Функция ОтчетПоОшибкамСинтаксическойПроверкиАПК(ВерсияХранилища)
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияХранилища, "Код, Владелец.Наименование");
	Возврат АвтоматизированнаяПроверкаКода.ПолучитьДанныеПроверкиАПК(РеквизитыВерсии.Код, РеквизитыВерсии.ВладелецНаименование);
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетСинтаксическойПроверки(ПроверяемаяВерсия)
    ПараметрыОтчета = Новый Структура;
    ПараметрыОтчета.Вставить("ПроверяемаяВерсия", ПроверяемаяВерсия);
    Отбор = Новый Структура;
	//Отбор.Вставить("Номенклатура", Объект.Продукция);
	//Отбор.Вставить("Организация", Объект.Организация);    
    ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("АнализСинтаксическойПроверки", ПараметрыОтчета);
    ПараметрыФормы = Новый Структура("Отбор, ПользовательскиеНастройки, СформироватьПриОткрытии", Отбор, ПользовательскиеНастройки, Истина);
    ОткрытьФорму("Отчет.АнализСинтаксическойПроверки.Форма", ПараметрыФормы); 
КонецПроцедуры

&НаСервере
Функция УстановитьПользовательскиеНастройкиОтчета(ТипОтчета,СтруктураПараметров)
    СтруктураНастроек = Новый Структура;
    ОтчетОбъект = Отчеты[ТипОтчета].Создать();
    
    ПользовательскиеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
    Для Каждого ЭлПараметр  Из СтруктураПараметров Цикл
        Для Каждого ПараметрСКД Из ПользовательскиеНастройки.Элементы Цикл
            Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда  
                Если Строка(ПараметрСКД.Параметр) = ЭлПараметр.Ключ Тогда 
                    ПараметрСКД.Значение = ЭлПараметр.Значение;
                    ПараметрСКД.Использование = Истина;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;    
    КонецЦикла;
        
    Возврат ПользовательскиеНастройки;
КонецФункции

&НаСервере
Процедура УстановитьМеткуНаСервере()
	РаботаСХранилищамиСлужебный.УстановитьМетку(Объект.Владелец, Объект.Код, Объект.Метка);
КонецПроцедуры

#КонецОбласти
