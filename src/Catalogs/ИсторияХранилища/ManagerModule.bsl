#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция URLGit(ВерсияХранилища) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ИсторияХранилища.Владелец.БазовоеХранилище = ЗНАЧЕНИЕ(Справочник.Хранилища.ПустаяСсылка)
		|			ТОГДА ИсторияХранилища.Владелец.ПроектGit.СсылкаURL
		|		ИНАЧЕ ИсторияХранилища.Владелец.БазовоеХранилище.ПроектGit.СсылкаURL
		|	КОНЕЦ КАК URLGit,
		|	ЕСТЬNULL(ХешиGitВерсийХранилища.Хеш, """") КАК Хеш
		|ИЗ
		|	Справочник.ИсторияХранилища КАК ИсторияХранилища
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ХешиGitВерсийХранилища КАК ХешиGitВерсийХранилища
		|		ПО (ХешиGitВерсийХранилища.ВерсияХранилища = ИсторияХранилища.Ссылка)
		|ГДЕ
		|	ИсторияХранилища.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ВерсияХранилища);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрШаблон("%1/-/commit/%2", Выборка.URLGit, Выборка.Хеш);
КонецФункции

Функция URLАПК(Коммит, Коммит2 = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Пользователь = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПКГость", "Пользователь");
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПКГость", "Пароль");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяФормы", "Отчет.ОтчетПоКоммитам.Форма.ФормаОтчетаПоПользователю");
	СтруктураПараметров.Вставить("КлючВарианта", "ПоНомеруКоммита");
	СтруктураПараметров.Вставить("НомерКоммита", Коммит.Код);
	СтруктураПараметров.Вставить("Конфигурация", Коммит.Владелец.Наименование);
	Если ЗначениеЗаполнено(Коммит2) Тогда
		СтруктураПараметров.НомерКоммита = СтрШаблон("%1..%2", XMLСтрока(Коммит.Код), XMLСтрока(Коммит2.Код));
		СтруктураПараметров.Вставить("ИмяФормы", "Отчет.ОтчетПоКоммитамОшибкиПроверкиКонфигурации.Форма.ФормаОтчетаПоПользователю");
	КонецЕсли;
	МассивПараметров = Новый Массив;
	Для Каждого Элемент Из СтруктураПараметров Цикл
		МассивПараметров.Добавить(СтрШаблон("%1=%2", Элемент.Ключ, Элемент.Значение));
	КонецЦикла;
	стрПараметрыЗапуска = СтрСоединить(МассивПараметров, ";");
	Возврат СтрШаблон("http://%1/apk?N=%2&P=%3&C=%4", Константы.АдресСервераАПК.Получить(), Пользователь, Пароль, стрПараметрыЗапуска);
	
КонецФункции

Функция URLAllure(Коммит) Экспорт
	
	ЗначенияРесурсов = РегистрыСведений.ПоказателиВерсийХранилища.Получить(Новый Структура("ВерсияХранилища", Коммит));
	АвтотестыНомерЗаданияAllure = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "АвтотестыНомерЗаданияAllure");
	
	Возврат СтрШаблон("https://vkusvill-1c.gitlab.automacon.net/-/%1/-/jobs/%2/artifacts/out/allure-result/index.html",
		РаботаСХранилищами.ИмяПапкиGitХранилища(Коммит.Владелец), Формат(АвтотестыНомерЗаданияAllure, "ЧН=;ЧГ=;"));
	
КонецФункции

Функция URLJUnit(Коммит) Экспорт
	
	ЗначенияРесурсов = РегистрыСведений.ПоказателиВерсийХранилища.Получить(Новый Структура("ВерсияХранилища", Коммит));
	АвтотестыНомерПайпа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "АвтотестыНомерПайпа");
	Если ЗначениеЗаполнено(Коммит.Владелец.БазовоеХранилище) Тогда
		URLПроектаGit = Коммит.Владелец.БазовоеХранилище.ПроектGit.СсылкаURL;
	Иначе
		URLПроектаGit = Коммит.Владелец.ПроектGit.СсылкаURL;
	КонецЕсли;
	
	Возврат СтрШаблон("%1/-/pipelines/%2/test_report", URLПроектаGit, Формат(АвтотестыНомерПайпа, "ЧН=;ЧГ=;"));
	
КонецФункции

Функция ЗадачиМетеорЗагружены(Дата, ЗадачаМетеор = Неопределено) Экспорт
	
	ДатаОбновления = РегистрыСведений.ИсторияОбновленияХранилища.ПредпоследняяДатаОбновленияХранилищ();
	ДанныеЗагружены = Не (ДатаОбновления < Дата);
	Если Не ДанныеЗагружены Тогда
		Возврат ДанныеЗагружены;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсторияХранилища.Ссылка КАК Версия
		|ИЗ
		|	Справочник.ИсторияХранилища КАК ИсторияХранилища
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МаксимальныйПериод.Период КАК Период,
		|			МаксимальныйПериод.ВерсияХранилища КАК ВерсияХранилища,
		|			МаксимальныйПериод.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная,
		|			СтатусыВерсийХранилища.Период КАК Период1,
		|			СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища1,
		|			СтатусыВерсийХранилища.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная1,
		|			СтатусыВерсийХранилища.Статус КАК Статус,
		|			СтатусыВерсийХранилища.Ответственный КАК Ответственный,
		|			СтатусыВерсийХранилища.Процесс КАК Процесс,
		|			СтатусыВерсийХранилища.Комментарий КАК Комментарий
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(СтатусыВерсийХранилища.Период) КАК Период,
		|				СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
		|				МАКСИМУМ(СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК ДатаЗаписиУниверсальная
		|			ИЗ
		|				РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
		|			ГДЕ
		|				НЕ СтатусыВерсийХранилища.ВерсияХранилища В
		|							(ВЫБРАТЬ
		|								ЗадачиМетеорВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища
		|							ИЗ
		|								РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища)
		|				И СтатусыВерсийХранилища.ВерсияХранилища.Владелец В
		|						(ВЫБРАТЬ
		|							Конфигурации.ХранилищеРазработки
		|						ИЗ
		|							Справочник.Конфигурации КАК Конфигурации)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СтатусыВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
		|				ПО МаксимальныйПериод.ВерсияХранилища = СтатусыВерсийХранилища.ВерсияХранилища
		|					И МаксимальныйПериод.Период = СтатусыВерсийХранилища.Период
		|					И МаксимальныйПериод.ДатаЗаписиУниверсальная = СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК СтатусыВерсийХранилищаСрезПоследних
		|		ПО (СтатусыВерсийХранилищаСрезПоследних.ВерсияХранилища = ИсторияХранилища.Ссылка)
		|ГДЕ
		|	ИсторияХранилища.Дата <= &Дата
		|	И (СтатусыВерсийХранилищаСрезПоследних.Статус ЕСТЬ NULL
		|			ИЛИ СтатусыВерсийХранилищаСрезПоследних.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.ЗагрузкаДанных), ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.Ошибка)))
		|	И НЕ ИсторияХранилища.Ссылка В
		|				(ВЫБРАТЬ
		|					ЗадачиМетеорВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища
		|				ИЗ
		|					РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища)
		|	И ИсторияХранилища.Владелец В
		|			(ВЫБРАТЬ
		|				Конфигурации.ХранилищеРазработки
		|			ИЗ
		|				Справочник.Конфигурации КАК Конфигурации)";
	
	Настрокйка = ПланыВидовХарактеристик.НастройкиПрограммы.ИспользоватьФильтрПоКомментариюОжиданиеЗагрузкиМетеор;
	ИспользоватьФильтрПоКомментарию = РегистрыСведений.ЗначенияНастроекПрограммы.ПолучитьЗначениеНастройки(Настрокйка) = Истина;
	Если ИспользоватьФильтрПоКомментарию И ЗначениеЗаполнено(ЗадачаМетеор) Тогда
		НомерЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаМетеор, "id");
		Если ЗначениеЗаполнено(НомерЗадачи) Тогда
			Запрос.Текст = Запрос.Текст + "
				|И ИсторияХранилища.Комментарий ПОДОБНО &Шаблон";
			Запрос.УстановитьПараметр("Шаблон", НомерЗадачи + "%");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Функция АдресаАвторовКоммитов(МассивКоммитов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пользователи.email КАК email
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ИсторияХранилища.Автор = Пользователи.Код
	|ГДЕ
	|	ИсторияХранилища.Ссылка В(&МассивКоммитов)
	|	И НЕ Пользователи.email = """"";
	Запрос.УстановитьПараметр("МассивКоммитов", МассивКоммитов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

// Функция - Количество измененных строк
//
// Параметры:
//  Коммиты	 - Массив - СправочникСсылка.ИсторияХранилища
// 
// Возвращаемое значение:
//  Число - Среднеарифметическое между количеством добавленных и удаленных строк
//
Функция КоличествоИзмененныхСтрок(Коммиты) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ИсторияХранилищаФайлыGit.СтрокДобавлено = 0
		|					ИЛИ ИсторияХранилищаФайлыGit.СтрокУдалено = 0
		|				ТОГДА ИсторияХранилищаФайлыGit.СтрокДобавлено + ИсторияХранилищаФайлыGit.СтрокУдалено
		|			ИНАЧЕ (ИсторияХранилищаФайлыGit.СтрокДобавлено + ИсторияХранилищаФайлыGit.СтрокУдалено) / 2
		|		КОНЕЦ) КАК КоличествоИзмененныхСтрок
		|ИЗ
		|	Справочник.ИсторияХранилища.ФайлыGit КАК ИсторияХранилищаФайлыGit
		|ГДЕ
		|	ИсторияХранилищаФайлыGit.Ссылка В(&Коммиты)
		|	И ИсторияХранилищаФайлыGit.Файл ПОДОБНО ""%.bsl""";
	Запрос.УстановитьПараметр("Коммиты", Коммиты);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.КоличествоИзмененныхСтрок) Тогда
			Возврат Выборка.КоличествоИзмененныхСтрок;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

#КонецОбласти

#КонецЕсли
