#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	РасширитьИзменныеДанные();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		РаботаСХранилищами.ЗаписатьСтатусВерсииХранилища(Ссылка, Перечисления.СтатусыИсторииХранилищ.ЗагрузкаДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "ХранилищеРазработки") Тогда
		ЗначенияРесурсов = РегистрыСведений.ЗадачиМетеорВерсийХранилища.Получить(Новый Структура("ВерсияХранилища", Ссылка));
		ЗадачаМетеор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "ЗадачаМетеор");
		Если ДополнительныеСвойства.ЭтоНовый Тогда
				Мониторинг.ЗаписатьНачалоОперации(
				Справочники.КлючевыеОперацииМониторинга.АвтоматизированнаяПроверкаВерсииХранилища,
				Ссылка,
				ЗадачаМетеор
				);
			Попытка
				НаборЗаписей = РегистрыСведений.ЖурналМониторинга.СоздатьНаборЗаписей();
				Запись = НаборЗаписей.Добавить();	
				Запись.КлючеваяОперация = Справочники.КлючевыеОперацииМониторинга.СинхронизацияХранилищаС_GIT;
				Запись.Идентификатор = Ссылка;
				Запись.ДатаЗаписиУниверсальная = (УниверсальноеВремя(Дата) - '00010101')*1000;
				Запись.НомерСеанса = НомерСеансаИнформационнойБазы();
				Запись.Этап = Перечисления.ЭтапыОперацийМониторинга.Начало;
				Запись.ДатаЗаписи = Дата;
				Запись.ДатаЗаписиНачалоДня = НачалоДня(Запись.ДатаЗаписи);
				Запись.Комментарий = "Фиксация события датой помещения версии в хранилище.";
				
				ЗаписьЗагрузкаИОбработка = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьЗагрузкаИОбработка, Запись);
				ЗаписьЗагрузкаИОбработка.ДатаЗаписиУниверсальная = (УниверсальноеВремя(Дата) - '00010101')*1000;
				ЗаписьЗагрузкаИОбработка.КлючеваяОперация = Справочники.КлючевыеОперацииМониторинга.ЗагрузкаИОбработкаВерсииИсторииХранилища;
				
				НаборЗаписей.Записать(Ложь);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		Попытка
			КешВерсийХранилищ.ДобавитьВерсиюВОчередьВыгрузки(Ссылка);
		Исключение
			ЗаписьЖурналаРегистрации(
				"Кеш версий хранилищ.Добавление версии в очередь",
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.ОчередьПолученияВерсийКонфигурации,
				Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		Попытка
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИсторияХранилища.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ИсторияХранилища КАК ИсторияХранилища
				|ГДЕ
				|	ИсторияХранилища.Ссылка = &Ссылка
				|	И ИсторияХранилища.Владелец В
				|			(ВЫБРАТЬ
				|				Конфигурации.ХранилищеРазработки КАК ХранилищеРазработки
				|			ИЗ
				|				Справочник.Конфигурации КАК Конфигурации)";
			Если Не Запрос.Выполнить().Пустой() Тогда
				Менеджер = РегистрыСведений.ОчередьПолученияИзмененийОбъектовВерсийХранилища.СоздатьМенеджерЗаписи();
				Менеджер.Период = ТекущаяДатаСеанса();
				Менеджер.ВерсияХранилища = Ссылка;
				Менеджер.Статус = Перечисления.СтатусыОперацийОбработкиОчереди.ОжидаетОбработки;
				Менеджер.Записать();
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации(
				"Получение изменений версий.Добавление версии в очередь",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.ОчередьПолученияИзмененийОбъектовВерсийХранилища,
				Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РасширитьИзменныеДанные()
	
	Для Каждого СтрокаИзмененияПоGit Из ИзменнынеОбъектыПоGit() Цикл
		
		СтрокаНовоеИмя = НайтиСтрокуПоИмени(СтрокаИзмененияПоGit.НовоеИмя, Изменены);
		Если СтрокаНовоеИмя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтароеИмя = СтрЗаменить(СтрокаНовоеИмя.ИмяОбъекта, СтрокаИзмененияПоGit.НовоеИмя, СтрокаИзмененияПоGit.СтароеИмя);
		СтрокаСтароеИмя = НайтиСтрокуПоИмени(СтароеИмя, Изменены);
		Если СтрокаСтароеИмя = Неопределено Тогда
			НоваяСтрока = Изменены.Добавить();
			НоваяСтрока.ИмяОбъекта = СтароеИмя;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИзменнынеОбъектыПоGit()
	
	ИзменнынеОбъектыПоGit = Новый ТаблицаЗначений;
	ИзменнынеОбъектыПоGit.Колонки.Добавить("НовоеИмя");
	ИзменнынеОбъектыПоGit.Колонки.Добавить("СтароеИмя");
	
	Для Каждого Строка Из ФайлыGit Цикл
		
		Если Не Строка.Флаг = Флаг_Переименован() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ИзменнынеОбъектыПоGit.Добавить();
		НоваяСтрока.НовоеИмя = ИмяФайла(Строка.Файл);
		НоваяСтрока.СтароеИмя = ИмяФайла(Строка.СтарыйФайл);
		
	КонецЦикла;
	
	Возврат ИзменнынеОбъектыПоGit;
	
КонецФункции

Функция Флаг_Переименован()
	
	Возврат "R";
	
КонецФункции

Функция ИмяФайла(ПолныйПуть)
	
	Начало = СтрНайти(ПолныйПуть, "/", НаправлениеПоиска.СКонца) + 1;
	Конец = СтрНайти(ПолныйПуть, ".", НаправлениеПоиска.СКонца) - 1;
	Если Конец = -1 Тогда
		Конец = СтрДлина(ПолныйПуть);
	КонецЕсли;
			
	Возврат Сред(ПолныйПуть, Начало, Конец - Начало + 1);
	
КонецФункции

Функция НайтиСтрокуПоИмени(Имя, ТабличнаяЧасть)
	
	НайденнаяСтрока = Неопределено;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Начало = СтрНайти(Строка.ИмяОбъекта, Имя);
		Если Не Начало = 0
			И Не (Начало > 1 И Не Сред(Строка.ИмяОбъекта, Начало - 1, 1) = ".")
			И Начало + СтрДлина(Имя) - 1 = СтрДлина(Строка.ИмяОбъекта) Тогда
			НайденнаяСтрока = Строка;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

#КонецОбласти

#КонецЕсли
