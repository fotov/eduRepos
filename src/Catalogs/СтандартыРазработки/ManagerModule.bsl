Функция ПолучитьЭлемент(Наименование, Родитель, ЭтоГруппа) Экспорт

	Если Наименование = "" Тогда
	
		Возврат Справочники.СтандартыРазработки.ПустаяСсылка();
	
	КонецЕсли;
	
	НайденнаяСсылка = Справочники.СтандартыРазработки.НайтиПоНаименованию(Наименование, Истина, Родитель);
	
	Если НайденнаяСсылка.Пустая() Тогда
	
		Если ЭтоГруппа Тогда
			НовыйЭлемент = Справочники.СтандартыРазработки.СоздатьГруппу();
		Иначе
			НовыйЭлемент = Справочники.СтандартыРазработки.СоздатьЭлемент();
		КонецЕсли;
		
		НовыйЭлемент.Наименование = Наименование;
		НовыйЭлемент.Родитель = Родитель;
		
		НовыйЭлемент.Записать();
		
		НайденнаяСсылка = НовыйЭлемент.Ссылка;
	
	КонецЕсли;
	
	Возврат НайденнаяСсылка;

КонецФункции

Процедура ЗагрузитьСтандарты() Экспорт 

	ДеревоСтандартов = ДеревоСтандартов();
	Родитель = Справочники.СтандартыРазработки.Стандарты1С;
	
	ПолучитьСтандартыИерархически(ДеревоСтандартов.Строки, Родитель);

КонецПроцедуры

Процедура ПолучитьСтандартыИерархически(Строки, Группа)

	Для каждого Строка Из Строки Цикл
	
		ЭтоГруппа = Не СтрЗаканчиваетсяНа(Строка.Ссылка, "hdoc");
		
		Стандарт = Справочники.СтандартыРазработки.ПолучитьЭлемент(Строка.Наименование, Группа, ЭтоГруппа);
		
		Если ЭтоГруппа Тогда
			
			ПолучитьСтандартыИерархически(Строка.Строки, Стандарт);
			
		Иначе
			
			СтандартОбъект = Стандарт.ПолучитьОбъект();
			
			ЧастиСсылки = СтрРазделить(Строка.Ссылка, "/");
			КодСтандарта = Число(ЧастиСсылки[ЧастиСсылки.ВГраница() - 1]);
			СтандартОбъект.КодСтандарта = КодСтандарта;
			
			СодержаниеСтандарта = СодержаниеСтандарта(Строка.Ссылка);
			СтандартОбъект.Содержание = СодержаниеСтандарта;

			Построитель = Новый ПостроительDOM;
			ЧтениеHTML = Новый ЧтениеHTML;
			
			СодержаниеСтандарта = СтрЗаменить (СодержаниеСтандарта,"</div><div>",Символы.ПС);
			СодержаниеСтандарта = СтрЗаменить (СодержаниеСтандарта,"</div>",Символы.ПС);
			СодержаниеСтандарта = СтрЗаменить (СодержаниеСтандарта,"<div>",Символы.ПС);

			ЧтениеHTML.УстановитьСтроку(СодержаниеСтандарта);
			ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
			ТекстСтандарта = ДокументHTML.Тело.ТекстовоеСодержимое;

			СтандартОбъект.ТекстСтандарта = ТекстСтандарта;
			
			СтандартОбъект.Записать();
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Функция ДеревоСтандартов() Экспорт
	
	ДеревоСтандартов = ПустоеДеревоСтандартов();
	
	ЗагрузитьСтраницыИерархически(ДеревоСтандартов.Строки, "db/v8std");
	
	Возврат ДеревоСтандартов;
	
КонецФункции 

Функция СодержаниеСтандарта(Ссылка) Экспорт

	СодержаниеСтандарта = "";
	
	СсылкиСтраниц = ЗагрузитьСсылкиСоСтраницыПоСсылкеПоИдентификатору(Ссылка, ИдентификаторКонтейнераФреймов());
	
	Для каждого ОписаниеСсылки Из СсылкиСтраниц Цикл
	
		Ссылка = ОписаниеСсылки.Ссылка;
		
		СодержаниеСтандарта = ПолучитьТекстСтраницыПоАдресу(Ссылка);
		
		// Корректируем ссылки на картинки
		ЧастиАдреса = СтрРазделить(Ссылка, "/");
		СтрокаЗамены = СтрЗаменить("https://its.1c.ru" + Ссылка, ЧастиАдреса[ЧастиАдреса.ВГраница()], "");
		СодержаниеСтандарта= СтрЗаменить(СодержаниеСтандарта, "src=""i", СтрШаблон("src=""%1i", СтрокаЗамены));
		
		Прервать;
	
	КонецЦикла;
	
	Возврат СодержаниеСтандарта;

КонецФункции

Функция ПустоеДеревоСтандартов()
	
	ДеревоСтандартов = Новый ДеревоЗначений();
	ДеревоСтандартов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоСтандартов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("Строка"));
	
	Возврат ДеревоСтандартов;
	
КонецФункции

Функция ЗагрузитьСсылкиСоСтраницыПоСсылкеПоИдентификатору(Ссылка, Идентификатор)

	СсылкиСтраниц = Новый Массив;
	
	ТекстСтраницы = ПолучитьТекстСтраницыПоАдресу(Ссылка);
	
	Если ЗначениеЗаполнено(ТекстСтраницы) Тогда
	
		ЗаполнитьСсылкиПоИдентификатору(ТекстСтраницы, СсылкиСтраниц, Идентификатор);
	
	КонецЕсли;
	
	Возврат СсылкиСтраниц;

КонецФункции

Функция ПолучитьТекстСтраницыПоАдресу(Адрес)

	ТекстСтраницы = "";
	
	Соединение = Новый HTTPСоединение("its.1c.ru",,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	Запрос = Новый HTTPЗапрос(Адрес);
	
	Ответ = Соединение.Получить(Запрос);
	
	Если Ответ.КодСостояния < 300 Тогда
		
		ТекстСтраницы= Ответ.ПолучитьТелоКакСтроку();
		
	Иначе
		
		Сообщить(Ответ.КодСостояния);
		Сообщить(Ответ.ПолучитьТелоКакСтроку());
	
	КонецЕсли;
	
	Возврат ТекстСтраницы;
	
КонецФункции

Процедура ЗагрузитьСтраницыИерархически(СтрокиДерева, СсылкаРодителя)
	
	Идентификатор = ИдентификаторКонтейнераСсылок();
	
	СсылкиСтраниц = ЗагрузитьСсылкиСоСтраницыПоСсылкеПоИдентификатору(СсылкаРодителя, Идентификатор);
	
	Для каждого ОписаниеСсылки Из СсылкиСтраниц Цикл
	
		НоваяСтрока = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСсылки);
		
		Если НЕ СтрЗаканчиваетсяНа(ОписаниеСсылки.Ссылка, "hdoc") Тогда
			
			ЗагрузитьСтраницыИерархически(НоваяСтрока.Строки, ОписаниеСсылки.Ссылка);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиПоИдентификатору(КодHTML, СсылкиСтраниц, Идентификатор)

	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(КодHTML);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	Узел = НайтиРекурсивноПоИдентификатору(ДокументDOM.ЭлементДокумента.ДочерниеУзлы, Идентификатор);
	
	Если Узел <> Неопределено Тогда
	
		ЗаполнитьСсылкиУзлов(Узел.ДочерниеУзлы, СсылкиСтраниц);
		
		Если ТипЗнч(Узел) = Тип("ЭлементПлавающийФреймHTML") Тогда
			
			ОписаниеСсылки = ОписаниеСсылки(Узел.Источник, Узел.Источник);
			
			СсылкиСтраниц.Добавить(ОписаниеСсылки);
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСсылкиУзлов(Узлы, СсылкиСтраниц)

	Для каждого Узел Из Узлы Цикл
	
		Если Узел.ИмяУзла = "a" Тогда
			
			ОписаниеСсылки = ОписаниеСсылки(Узел.ГиперСсылка, Узел.ТекстовоеСодержимое);
			
			СсылкиСтраниц.Добавить(ОписаниеСсылки );
			
		КонецЕсли;
		
		ЗаполнитьСсылкиУзлов(Узел.ДочерниеУзлы, СсылкиСтраниц);
	
	КонецЦикла;

КонецПроцедуры

Функция НайтиРекурсивноПоИдентификатору(Узлы, Идентификатор)
	
	НайденныйУзел = Неопределено;
	
	Для каждого Узел Из Узлы Цикл
	
		Если ТипЗнч(Узел) <> Тип("ТекстDOM")
			И ТипЗнч(Узел) <> Тип("КомментарийDOM")
			И Узел.Идентификатор = Идентификатор Тогда
			
			НайденныйУзел = Узел;
			Прервать;
			
		Иначе
			
			НайденныйУзел = НайтиРекурсивноПоИдентификатору(Узел.ДочерниеУзлы, Идентификатор);
			
			Если НайденныйУзел <> Неопределено Тогда
				Прервать;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныйУзел;
	
КонецФункции

Функция ОписаниеСсылки(Ссылка, Наименование)

	Возврат Новый Структура("Ссылка, Наименование", Ссылка, Наименование);

КонецФункции

Функция ИдентификаторКонтейнераСсылок() 
	
	Возврат "w_metadata_navlist";
	
КонецФункции

Функция ИдентификаторКонтейнераФреймов() 
	
	Возврат "w_metadata_doc_frame";
	
КонецФункции