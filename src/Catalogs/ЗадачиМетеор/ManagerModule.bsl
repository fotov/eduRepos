#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ЗадачаМетеор(Знач НомерЗадачи) Экспорт
	Возврат Справочники.ЗадачиМетеор.НайтиПоКоду(НомерЗадачи, Истина);
КонецФункции

Функция СоздатьЕслиОтсутствует(Знач НомерЗадачи) Экспорт
	Возврат Справочники.ЗадачиМетеор.ПолучитьЭлементПоКоду(НомерЗадачи, "ЗадачиМетеор");
КонецФункции

Процедура ПриСозданииОбъекта(Объект) Экспорт
	
	Объект.ОбновитьДанныеИзМетеора();
	
КонецПроцедуры

Процедура ОбновитьДанныеИзМетеора(ЗадачаМетеор) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗадачаМетеор) Тогда
		Возврат
	КонецЕсли;
	
	об = ЗадачаМетеор.ПолучитьОбъект();
	об.ОбновитьДанныеИзМетеора();
	об.Записать();
	
КонецПроцедуры

Функция ПолучитьПредставлениеЗадачиВHTML(Знач ЗадачаМетеор, Знач ПолучатьОбертку = Истина) Экспорт
	
	Попытка
		ДанныеМетеор = ИнтеграцияСМетеор.ПолучитьДанныеЗадачиИзМетеор(ЗадачаМетеор);
		Если ДанныеМетеор = Неопределено Тогда
			Возврат "";
		КонецЕсли;
	Исключение
		Возврат "";
	КонецПопытки;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаМетеор, "Ссылка,Код");
	ОписаниеРодительскойЗадачи = "";
	Если Найти(РеквизитыЗадачи.Код, "^") Или Найти(РеквизитыЗадачи.Код, "*") Тогда
		Попытка
			ИндексРазделителя = Макс(Найти(РеквизитыЗадачи.Код, "^"), Найти(РеквизитыЗадачи.Код, "*"));
			КодРодительскойЗадачи = Лев(РеквизитыЗадачи.Код, ИндексРазделителя - 1);
			РодительскаяЗадача = ПолучитьЭлементПоКоду(КодРодительскойЗадачи, "ЗадачиМетеор");
			ОписаниеРодительскойЗадачи = ПолучитьПредставлениеЗадачиВHTML(РодительскаяЗадача, Ложь);
		Исключение
			ОписаниеРодительскойЗадачи = "";
		КонецПопытки;
	КонецЕсли; 
	
	ШаблонHTML =
		"<html>
		|<head>  	  	
		| <style>
		|  h1 {	 
		|   font-size: 10pt;	 
		|	 font-family:Arial; 
		|  } 
		|  p {
		|   font-size: 10pt;	 
		|	 font-family:Arial; 
		|  }
		|	BODY {
		|	 margin: 0px; 
		|	 padding: 3px;   	 
		|	}
		| </style>	 
		|</head>
		|<body scroll=auto>
		|%1
		|</body></html>";
	
	Описание = Новый Массив;
	
	#Область Шапка
	Описание.Добавить(СтрШаблон("<h2><FONT color=""#006600"">Задача: <a href=""%1"" target=""_blank"">%2</a></FONT> (%3)</h2>",
								URLЗадачиМетеор(ДанныеМетеор),
								РеквизитыЗадачи.Код,
								ДанныеМетеор.НаименованиеЭтапа));
	Описание.Добавить(СтрШаблон("<p><b>%1</b></br>%2</p>", ДанныеМетеор.НаименованиеЗадачи, Справочники.ЗадачиМетеор.URLЗадачиМетеор(ЗадачаМетеор)));
	Описание.Добавить(СтрШаблон("<p><b>Проект: %1</b></p>", ДанныеМетеор.Проект));
	Описание.Добавить(СтрШаблон("<p><b>Вид задачи: %1</b></p>", ДанныеМетеор.ВидЗадачи));
	#КонецОбласти
	
	#Область Метки
	ОписаниеМеток = Новый Массив;
	Для Каждого ТекСтр Из ДанныеМетеор.Метки Цикл
		Если ЗначениеЗаполнено(ТекСтр.Комментарий) Тогда
			ОписаниеМеток.Добавить(СтрШаблон("%1 (%2)", ТекСтр.Наименование, ТекСтр.Комментарий)); 
		Иначе
			ОписаниеМеток.Добавить(ТекСтр.Наименование); 
		КонецЕсли;	
	КонецЦикла;
	Если ОписаниеМеток.Количество() > 0 Тогда
		Описание.Добавить(СтрШаблон("<p><b>Метки:</b> %1</p>", СтрСоединить(ОписаниеМеток,", ")));
	КонецЕсли;
	#КонецОбласти
	
	Описание.Добавить(СтрШаблон("<p><details><summary><b>Общая информация</b></summary> %1</details></p>", ДанныеМетеор.ОбщаяИнформацияПредставление));
	Описание.Добавить(СтрШаблон("<p><details><summary><b>Первичное обращение</b></summary> %1</details></p>", ДанныеМетеор.ПервичноеОбращениеПредставление));
	Если ДанныеМетеор.Свойство("ТехническоеЗадание") Тогда
		Описание.Добавить(СтрШаблон("<p><details><summary><b>Техническое задание</b></summary> %1</details></p>", ДанныеМетеор.ТехническоеЗадание));
	КонецЕсли;
	Описание.Добавить(СтрШаблон("<p><details><summary><b>Тех. проект</b></summary> %1</details></p>", ДанныеМетеор.Техпроект));
	
	#Область Тестирование
	ОписаниеТестирования = Новый Массив;
	ОписаниеТестирования.Добавить(СтрШаблон("<p><b>Тестирование требуется: %1</b></p>",				ДанныеМетеор.ТестированиеТребуется));
	ОписаниеТестирования.Добавить(СтрШаблон("<p><b>Причина:</b> %1</p>",							ДанныеМетеор.ТестированиеПричина));
	ОписаниеТестирования.Добавить(СтрШаблон("<p><b>Строка подключения: %1</b></p>",					ДанныеМетеор.ТестированиеСтрокаПодключения));
	ОписаниеТестирования.Добавить(СтрШаблон("<p><b>Версия платформы: %1</b></p>",					ДанныеМетеор.ТестированиеВерсияПлатформы));
	ОписаниеТестирования.Добавить(СтрШаблон("<p><b>Версия типового релиза: %1</b></p>",				ДанныеМетеор.ТестированиеВерсияТиповогоРелиза));
	ОписаниеТестирования.Добавить(СтрШаблон("<p><b>Тестирование список ролей или групп: %1</b></p>",ДанныеМетеор.ТестированиеСписокРолейИлиГрупп));
	ОписаниеТестирования.Добавить(СтрШаблон("<p><b>Пользователь пароль: %1</b></p>",				ДанныеМетеор.ТестированиеПользовательПароль));
	ОписаниеТестирования.Добавить(СтрШаблон("<p><b>Особые требования: </b> %1</p>",					ДанныеМетеор.ТестированиеОсобыеТребования));
	ОписаниеТестирования.Добавить(СтрШаблон("<p><b>Описание:</b> %1</p>",							ДанныеМетеор.ТестированиеОписание));
	
	Описание.Добавить(СтрШаблон("<p><details><summary><b>Тестирование</b></summary> %1</details></p>", СтрСоединить(ОписаниеТестирования, Символы.ПС)));
	#КонецОбласти
	
	Описание.Добавить(СтрШаблон("<p><details><summary><b>Что сделано</b></summary> %1</details></p>", ДанныеМетеор.ЧтоСделано));
	Описание.Добавить(СтрШаблон("<p><details><summary><b>Документация</b></summary> %1</details></p>", ДанныеМетеор.ДокументацияПредставлениеHTML));
	
	Если ЗначениеЗаполнено(ОписаниеРодительскойЗадачи) Тогда
		Описание.Добавить(СтрШаблон("<p><details><summary><b>Родительская задача</b></summary> %1</details></p>", ОписаниеРодительскойЗадачи));
	КонецЕсли; 
	
	// FIXME: Сделать рефакторинг
	Возврат ?(ПолучатьОбертку, СтрШаблон(ШаблонHTML, СтрСоединить(Описание,Символы.ПС)), СтрСоединить(Описание,Символы.ПС));
	
КонецФункции

Функция URLЗадачиМетеор(ЗадачаМетеор) Экспорт
	
	// Эти данные можно получить по коду из Метеор. см. ВнешниеДанные.ПолучитьДанныеЗадачиМетеорПоНомеру
	Возврат СтрШаблон("https://meteor.automacon.ru/projects/%1/%2?tab=all", ЗадачаМетеор.project_id, ЗадачаМетеор.id);
	
КонецФункции

Функция ПолучитьЧасыПоЗадачеМетеор(ЗадачаМетеор) Экспорт
	
	Результат = ТаблицаЧасовПоЗадаче();
	
	ЧасыПоЗадаче = ИнтеграцияСМетеор.ПолучитьЧасыПоЗадачеМетеор(ЗадачаМетеор);
	Если ЧасыПоЗадаче = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ТекСтр Из ЧасыПоЗадаче.data Цикл
		НовСтр = Результат.Добавить();
		НовСтр.Пользователь = ТекСтр.user;
		НовСтр.Роль = ТекСтр.role;
		НовСтр.Дата = ПрочитатьДатуJSON(ТекСтр.date,ФорматДатыJSON.ISO);
		НовСтр.Затрачено = Число(ТекСтр.hours);
		НовСтр.Описание = СтрШаблон("%1: %2", ТекСтр.work_name, ТекСтр.description);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЭлементПоКоду(Знач Код, ИмяСправочника) Экспорт
	
	Код = СокрЛП(Код);
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		Возврат Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли;
	
	Ссылка = Справочники[ИмяСправочника].НайтиПоКоду(Код, Истина);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(СтрШаблон("Справочник.%1", ИмяСправочника));
	ЭлементБлокировки.УстановитьЗначение("Код", Код);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	Ссылка = Справочники[ИмяСправочника].НайтиПоКоду(Код, Истина);
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		об = Справочники[ИмяСправочника].СоздатьЭлемент();
		об.Код = Код;
		Справочники[ИмяСправочника].ПриСозданииОбъекта(об);
		об.Записать();
		
		Ссылка = об.Ссылка;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Ссылка;
	
КонецФункции

Функция ЭтоИнцидент(ЗадачаМетеор) Экспорт
	Возврат РегистрыСведений.ТекущийЭтапЗадачиМетеор.ДанныеЭтапа(ЗадачаМетеор).Тип = Справочники.ТипыЗадачиМетеор.Инциденты;	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаЧасовПоЗадаче() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Пользователь", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Результат.Колонки.Добавить("Роль", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Результат.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Результат.Колонки.Добавить("Затрачено", ОбщегоНазначения.ОписаниеТипаЧисло(5,2));
	Результат.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#КонецЕсли
