//////////////////////////////////////////////////////////////////////////
// HTTP сервис Дополнения.
// Версия: см. метод ВерсияGET
// Предназначен для работы с дополнениями: 
// расширения, дополнительные отчёты/обработки и пр.
//////////////////////////////////////////////////////////////////////////
// Код ответа:
//    * Успех - 200
//    * Ошибка - 400.
// - Если необходимо передать двоичные данные
//    * Успех - запрашиваемые двоичные данные
//    * Ошибка - строка ошибки в двоичных данных
// - Если передаётся строка
//    * Успех - структура в JSON. см. КонструкторСтруктурыОтвета
//    * Ошибка - текст ошибки.
//////////////////////////////////////////////////////////////////////////

#Область ОбработкаЗапросов

Функция СостояниеДополненийGETЗапрос(Запрос)
	
	Возврат СостояниеДополненийGETОтвет(Запрос);
	
КонецФункции

Функция ДанныеДополненийGETЗапрос(Запрос)
	
	Возврат ДанныеДополненийGETОтвет(Запрос);
	
КонецФункции

Функция ДанныеДополненийСпискомGETЗапрос(Запрос)
	Возврат ДанныеДополненийСпискомGETОтвет(Запрос);
КонецФункции

Функция ИзменениеПараметровPOSTЗапрос(Запрос)
	
	Возврат ИзменениеПараметровPOSTОтвет(Запрос);
	
КонецФункции

Функция УдалениеДополненийPOSTЗапрос(Запрос)
	
	Возврат УдалениеДополненийPOSTОтвет(Запрос);
	
КонецФункции

Функция УстановкаPOST(Запрос)
	
	Возврат УстановкаPOSTОтвет(Запрос);
	
КонецФункции

Функция ВерсияGET(Запрос)
	ВерсияСервиса = "1.0.1.7";
	Возврат ОтветСервиса(200, ВерсияСервиса);
КонецФункции

#КонецОбласти

#Область ПолучениеОтветов
Функция СостояниеДополненийGETОтвет(Запрос)
	
	СтруктураОтвета = КонструкторСтруктурыОтвета();
	РСДИ = РаботаСДополнениямиИнтеграция;
	СловарьЗначенийПараметров = РСДИ.СловарьЗначенийПараметровЗапроса();
	ПараметрыЗапроса = РСДИ.КонвертированныеПараметрыЗапроса(Запрос.ПараметрыЗапроса, СловарьЗначенийПараметров);
	
	Если Не ПараметрыЗапроса.Свойство("ТипДополнения") Тогда
		ТекстОшибки = "Не переданы, или неверные параметры запроса";
		Возврат ОтветСервиса(400, ТекстОшибки);
	КонецЕсли;
	
	СостояниеДополнений = Новый Массив;
	Если ПараметрыЗапроса.ТипДополнения = РСДИ.ТипДополненияРасширение() Тогда
		СостояниеДополнений = СостояниеРасширений();
	ИначеЕсли ПараметрыЗапроса.ТипДополнения = РСДИ.ТипДополненияДопОтчетОбработка() Тогда
		СостояниеДополнений = СостояниеДополнительныхОтчетовИОбработок();
	КонецЕсли;
	
	СтруктураОтвета.Результат = СостояниеДополнений;
	
	Попытка
		КодОтвета = 200;
		СтрокаОтвета = РСДИ.ЗаписатьЗначениеJSON(СтруктураОтвета);
	Исключение
		КодОтвета = 400;
		СтрокаОтвета = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ОтветСервиса(КодОтвета, СтрокаОтвета);
	
КонецФункции

Функция ДанныеДополненийGETОтвет(Запрос)
		
	РСДИ = РаботаСДополнениямиИнтеграция;
	СловарьЗначенийПараметров = РСДИ.СловарьЗначенийПараметровЗапроса();
	ПараметрыЗапроса = РСДИ.КонвертированныеПараметрыЗапроса(Запрос.ПараметрыЗапроса, СловарьЗначенийПараметров);
	
	Если Не ПараметрыЗапроса.Свойство("ТипДополнения") Тогда
		ТекстОшибки = ПолучитьДвоичныеДанныеИзСтроки("Не переданы, или неверные параметры запроса");
		Возврат ОтветСервиса(400, ТекстОшибки, Тип("ДвоичныеДанные"));
	КонецЕсли;
	
	ДвоичныеДанныеДополнения = Неопределено;
	Если ПараметрыЗапроса.ТипДополнения = РСДИ.ТипДополненияРасширение() Тогда
		ДвоичныеДанныеДополнения = ДвоичныеДанныеРасширения(ПараметрыЗапроса);
	ИначеЕсли ПараметрыЗапроса.ТипДополнения = РСДИ.ТипДополненияДопОтчетОбработка() Тогда
		ДвоичныеДанныеДополнения = ДанныеДополненияОтчетаОбработки(ПараметрыЗапроса);
	КонецЕсли;
	
	Если ДвоичныеДанныеДополнения = Неопределено Тогда
		КодОтвета = 400;
		ТекстОшибки = ПолучитьДвоичныеДанныеИзСтроки("Не найдено запрашиваемое дополнение.");
		Возврат ОтветСервиса(КодОтвета, ТекстОшибки, Тип("ДвоичныеДанные"));
	КонецЕсли;
	
	Попытка
		КодОтвета = 200;
		ОтветСервиса = ОтветСервиса(КодОтвета, ДвоичныеДанныеДополнения, Тип("ДвоичныеДанные"));
	Исключение
		КодОтвета = 400;
		ТелоОтвета = ПолучитьДвоичныеДанныеИзСтроки(ОписаниеОшибки());
		ОтветСервиса = ОтветСервиса(КодОтвета, ТелоОтвета, Тип("ДвоичныеДанные"));
	КонецПопытки;
	
	Возврат ОтветСервиса;
	
КонецФункции

Функция ДанныеДополненийСпискомGETОтвет(Запрос)
		
	РСДИ = РаботаСДополнениямиИнтеграция;
	СловарьЗначенийПараметров = РСДИ.СловарьЗначенийПараметровЗапроса();
	ПараметрыЗапроса = РСДИ.КонвертированныеПараметрыЗапроса(Запрос.ПараметрыЗапроса, СловарьЗначенийПараметров);
	
	Если Не ПараметрыЗапроса.Свойство("ТипДополнения") Тогда
		ТекстОшибки = ПолучитьДвоичныеДанныеИзСтроки("Не переданы, или неверные параметры запроса");
		Возврат ОтветСервиса(400, ТекстОшибки, Тип("ДвоичныеДанные"));
	КонецЕсли;
	
	ДанныеДополнений = Новый Массив;
	Если ПараметрыЗапроса.ТипДополнения = РСДИ.ТипДополненияРасширение() Тогда
		ДанныеДополнений = ДвоичныеДанныеРасширений(ПараметрыЗапроса);
	ИначеЕсли ПараметрыЗапроса.ТипДополнения = РСДИ.ТипДополненияДопОтчетОбработка() Тогда
		ДанныеДополнений = ДанныеДополненияОтчетаОбработки(ПараметрыЗапроса);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДополнений) Тогда
		КодОтвета = 400;
		ТекстОшибки = ПолучитьДвоичныеДанныеИзСтроки("Не найдено запрашиваемое дополнение.");
		Возврат ОтветСервиса(КодОтвета, ТекстОшибки, Тип("ДвоичныеДанные"));
	КонецЕсли;
	
	// Здесь уместно сжать данные, чтобы уменьшить объем для передачи.
	// См. КоннекторHTTP ЗаписатьGZip
	ДвоичныеДанныеДополнений = РСДИ.ЗаписатьЗначениеДвоичныеДанные(ДанныеДополнений);
	Попытка
		КодОтвета = 200;
		ОтветСервиса = ОтветСервиса(КодОтвета, ДвоичныеДанныеДополнений, Тип("ДвоичныеДанные"));
	Исключение
		КодОтвета = 400;
		ТелоОтвета = ПолучитьДвоичныеДанныеИзСтроки(ОписаниеОшибки());
		ОтветСервиса = ОтветСервиса(КодОтвета, ТелоОтвета, Тип("ДвоичныеДанные"));
	КонецПопытки;
	
	Возврат ОтветСервиса;
	
КонецФункции

Функция ИзменениеПараметровPOSTОтвет(Запрос)
	
	Возврат ИзменитьДополнение(Запрос);
	
КонецФункции

Функция УдалениеДополненийPOSTОтвет(Запрос)
	
	Возврат ИзменитьДополнение(Запрос, ОперацияДополненияУдаление());
	
КонецФункции

Функция УстановкаPOSTОтвет(Запрос)
	
	СтруктураОтвета = КонструкторСтруктурыОтвета();
	РСДИ = РаботаСДополнениямиИнтеграция;
	СловарьЗначенийПараметров = РСДИ.СловарьЗначенийПараметровЗапроса();
	ПараметрыЗапроса = РСДИ.КонвертированныеПараметрыЗапроса(Запрос.ПараметрыЗапроса, СловарьЗначенийПараметров);
	
	Если Не ПараметрыЗапроса.Свойство("ТипДополнения") Тогда
		ТекстОшибки = "Необходимо преедать обязательный параметр ""ТипДополнения""";
		Возврат ОтветСервиса(400, ТекстОшибки);
	КонецЕсли;
	
	ДвоичныеДанныеДополнения = Запрос.ПолучитьТелоКакДвоичныеДанные();
	
	Если ДвоичныеДанныеДополнения = Неопределено Тогда
		КодОтвета = 400;
		СтрокаОтвета = "Не переданы двоичные данные дополнения.";
		Возврат ОтветСервиса(КодОтвета, СтрокаОтвета);
	КонецЕсли;
	
	Отказ = Ложь;
	ТекстОшибки = "";
	
	Если ПараметрыЗапроса.ТипДополнения = РСДИ.ТипДополненияРасширение() Тогда
		УстановитьРасширение(ДвоичныеДанныеДополнения, ПараметрыЗапроса, Отказ, ТекстОшибки);
	Иначе
		Отказ = Истина;
		ТекстОшибки = "Установка дополнениий переданного типа не автоматизирована.";
	КонецЕсли;
	
	Если Отказ Тогда
		КодОтвета = 400;
		СтрокаОтвета = ТекстОшибки;
	Иначе
		КодОтвета = 200;
		СтруктураОтвета.Статус = "Выполнено";
		СтрокаОтвета = РСДИ.ЗаписатьЗначениеJSON(СтруктураОтвета);
	КонецЕсли;
	
	Возврат ОтветСервиса(КодОтвета, СтрокаОтвета);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Конструктор структуры для ответа сервиса
//
// Возвращаемое значение:
//  Структура
//
Функция КонструкторСтруктурыОтвета()
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Результат");
	СтруктураОтвета.Вставить("Статус", "");
	СтруктураОтвета.Вставить("ПредставлениеОшибки", "");
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Формирует ответ сервиса
//
// Параметры:
//  КодОтвета	 - Число - код ответа сервиса.
//  СтрокаОтвета - Строка - будет передана в теле ответа.
// 
// Возвращаемое значение:
//  HTTPСервисОтвет
//
Функция ОтветСервиса(КодОтвета, ТелоОтвета, ТипТелаОтвета = Неопределено)
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	Ответ.Заголовки.Вставить("Content-Type", "application/json;charset=utf-8");
	
	Если ТипТелаОтвета = Неопределено Или ТипТелаОтвета = Тип("Строка") Тогда
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
	ИначеЕсли ТипТелаОтвета = Тип("ДвоичныеДанные") Тогда
		Ответ.УстановитьТелоИзДвоичныхДанных(ТелоОтвета);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#Область СостояниеДополнений

// Конструктор структуры свойств Дополнения
// 
// Возвращаемое значение:
//  Структура
//
Функция КонструкторСостояниеДополнения()
	
	СостояниеДополнения = Новый Структура();
	
	СостояниеДополнения.Вставить("ТипДополнения");
	СостояниеДополнения.Вставить("Имя");
	СостояниеДополнения.Вставить("ИмяФайла");
	СостояниеДополнения.Вставить("Синоним");
	СостояниеДополнения.Вставить("Версия");
	СостояниеДополнения.Вставить("Активно", Истина);
	СостояниеДополнения.Вставить("УникальныйИдентификатор");
	СостояниеДополнения.Вставить("ХешСумма", "");
	СостояниеДополнения.Вставить("БезопасныйРежим", Ложь);
	СостояниеДополнения.Вставить("ЗащитаОтОпасныхДействий", Ложь);
	
	Возврат СостояниеДополнения;
	
КонецФункции

// Подготавливает данные о состоянии расширений в базе
// 
// Возвращаемое значение:
//  Массив - состоит из структур со свойствами расширений
//
Функция СостояниеРасширений()
	
	Расширения = РасширенияКонфигурации.Получить();
	Результат = Новый Массив;
	
	Для Каждого Расширение Из  Расширения Цикл
		СостояниеРасширения = КонструкторСостояниеДополнения();
		ЗаполнитьЗначенияСвойств(СостояниеРасширения, Расширение,,"УникальныйИдентификатор, ЗащитаОтОпасныхДействий");
		СостояниеРасширения.УникальныйИдентификатор = Строка(Расширение.УникальныйИдентификатор);
		СостояниеРасширения.ЗащитаОтОпасныхДействий = Расширение.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях;
		СостояниеРасширения.ТипДополнения = РаботаСДополнениямиИнтеграция.ТипДополненияРасширение();
		СостояниеРасширения.ИмяФайла = СостояниеРасширения.Имя + ".cfe";
		СостояниеРасширения.ХешСумма = СтрЗаменить(Расширение.ХешСумма, " ", "");
		Результат.Добавить(СостояниеРасширения);
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Функция СостояниеДополнительныхОтчетовИОбработок()
	
	УстановитьПривилегированныйРежим(Истина);

	Результат = Новый Массив;
	
	МетаданныеДополнительныеОтчетыИОбработки = Метаданные.Справочники.Найти("ДополнительныеОтчетыИОбработки");
	Если Не МетаданныеДополнительныеОтчетыИОбработки = Неопределено Тогда
		СведенияДопОтчетыОбработки = СведенияСправочникаДополнительныеОтчетыИОбработки();
		РаботаСДополнениямиИнтеграция.ДополнитьМассив(Результат, СведенияДопОтчетыОбработки);
	КонецЕсли;
	
	МетаданныеВнешниеОбработки = Метаданные.Справочники.Найти("ВнешниеОбработки");
	Если Не МетаданныеВнешниеОбработки = Неопределено Тогда
		СведенияВнешниеОбработки = СведенияСправочникаВнешниеОбработки();
		РаботаСДополнениямиИнтеграция.ДополнитьМассив(Результат, СведенияВнешниеОбработки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СведенияСправочникаДополнительныеОтчетыИОбработки()
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеОтчетыИОбработки.Наименование КАК Синоним,
		|	ДополнительныеОтчетыИОбработки.Версия КАК Версия,
		|	ДополнительныеОтчетыИОбработки.ИмяОбъекта КАК Имя,
		|	НЕ ДополнительныеОтчетыИОбработки.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена)
		|		И НЕ ДополнительныеОтчетыИОбработки.ПометкаУдаления КАК Активно,
		|	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка,
		|	ДополнительныеОтчетыИОбработки.ИмяФайла КАК ИмяФайла
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	НЕ ДополнительныеОтчетыИОбработки.ЭтоГруппа";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаОтчетыОбработки = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаОтчетыОбработки.Следующий() Цикл
		СостояниеДополнения = КонструкторСостояниеДополнения();
		ЗаполнитьЗначенияСвойств(СостояниеДополнения, ВыборкаОтчетыОбработки);
		СостояниеДополнения.УникальныйИдентификатор = Строка(ВыборкаОтчетыОбработки.Ссылка.УникальныйИдентификатор());
		СостояниеДополнения.ТипДополнения = РаботаСДополнениямиИнтеграция.ТипДополненияДопОтчетОбработка();
		Результат.Добавить(СостояниеДополнения);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СведенияСправочникаВнешниеОбработки()
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки.Ссылка КАК Ссылка,
		|	ВнешниеОбработки.Код КАК Синоним,
		|	ВнешниеОбработки.Версия КАК Версия,
		|	ВнешниеОбработки.Наименование КАК Имя,
		|	НЕ ВнешниеОбработки.ПометкаУдаления КАК Активно,
		|	ВнешниеОбработки.ВидОбработки КАК ВидОбработки,
		|	ВЫБОР
		|		КОГДА ВнешниеОбработки.ВидОбработки = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхВнешнихОбработок.Отчет)
		|			ТОГДА "".erf""
		|		ИНАЧЕ "".epf""
		|	КОНЕЦ КАК РасширениеФайла
		|ИЗ
		|	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
		|ГДЕ
		|	НЕ ВнешниеОбработки.ЭтоГруппа";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаОтчетыОбработки = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаОтчетыОбработки.Следующий() Цикл
		СостояниеДополнения = КонструкторСостояниеДополнения();
		ЗаполнитьЗначенияСвойств(СостояниеДополнения, ВыборкаОтчетыОбработки);
		СостояниеДополнения.УникальныйИдентификатор = Строка(ВыборкаОтчетыОбработки.Ссылка.УникальныйИдентификатор());
		СостояниеДополнения.ТипДополнения = РаботаСДополнениямиИнтеграция.ТипДополненияДопОтчетОбработка();
		
		ИмяФайлаБезРасширения = РаботаСДополнениямиИнтеграция.ЗаменитьНедопустимыеСимволыВИмениФайла(ВыборкаОтчетыОбработки.Имя);
		СостояниеДополнения.ИмяФайла = ИмяФайлаБезРасширения + " " + ВыборкаОтчетыОбработки.Версия + ВыборкаОтчетыОбработки.РасширениеФайла;
		Результат.Добавить(СостояниеДополнения);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ДвоичныеДанныеРасширения(ПараметрыПоиска)
	
	ДвоичныеДанныеРасширения = Неопределено;
	ДвоичныеДанныеРасширений = ДвоичныеДанныеРасширений(ПараметрыПоиска);
	Если ДвоичныеДанныеРасширений.Количество() Тогда
		ДвоичныеДанныеРасширения = ДвоичныеДанныеРасширений[0].ДвоичныеДанные;
	КонецЕсли;
	Возврат ДвоичныеДанныеРасширения;
		
КонецФункции

Функция ДвоичныеДанныеРасширений(ПараметрыПоиска)
	
	ДвоичныеДанныеРасширений = Новый Массив;
	
	ОтборРасширения = Новый Структура;
	Если ПараметрыПоиска.Свойство("УникальныйИдентификатор") Тогда
		ОтборРасширения.Вставить("УникальныйИдентификатор",
			Новый УникальныйИдентификатор(ПараметрыПоиска.УникальныйИдентификатор));
	ИначеЕсли ПараметрыПоиска.Свойство("Имя") Тогда
		ОтборРасширения.Вставить("Имя", ПараметрыПоиска.Имя);
	КонецЕсли;
		
	Расширения = РасширенияКонфигурации.Получить(ОтборРасширения);
	Для Каждого Расширение Из Расширения Цикл
		ДвоичныеДанныеРасширений.Добавить(
			Новый Структура("Имя, УникальныйИдентификатор, ДвоичныеДанные",
				Расширение.Имя,
				Расширение.УникальныйИдентификатор,
				Расширение.ПолучитьДанные()));
	КонецЦикла;
	
	Возврат ДвоичныеДанныеРасширений;
	
КонецФункции

Функция ДанныеДополненияОтчетаОбработки(ПараметрыПоиска)
	
	УстановитьПривилегированныйРежим(Истина);

	Результат = Неопределено;
	
	МетаданныеДополнительныеОтчетыИОбработки = Метаданные.Справочники.Найти("ДополнительныеОтчетыИОбработки");
	Если Не МетаданныеДополнительныеОтчетыИОбработки = Неопределено Тогда
		Результат = ДанныеДополненияДополнительныеОтчетыИОбработки(ПараметрыПоиска);
	КонецЕсли;
	
	МетаданныеВнешниеОбработки = Метаданные.Справочники.Найти("ВнешниеОбработки");
	Если Не МетаданныеВнешниеОбработки = Неопределено Тогда
		Результат = ДанныеДополненияВнешниеОбработки(ПараметрыПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеДополненияДополнительныеОтчетыИОбработки(ПараметрыПоиска)
	
	ДвоичныеДанные = Неопределено;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеОтчетыИОбработки.ХранилищеОбработки КАК ХранилищеОбработки,
	|	ВЫБОР ДополнительныеОтчетыИОбработки.Публикация
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
	|			ТОГДА 1
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ИСТИНА
	|	И &Ссылка В (ДополнительныеОтчетыИОбработки.Ссылка, ЗНАЧЕНИЕ(Справочник.ДополнительныеОтчетыИОбработки.ПустаяСсылка))
	|	И &ИмяОбъекта В (ДополнительныеОтчетыИОбработки.ИмяОбъекта, """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка();
	ИмяОбъекта = "";
	Если ПараметрыПоиска.Свойство("УникальныйИдентификатор") Тогда
		Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(
			Новый УникальныйИдентификатор(ПараметрыПоиска.УникальныйИдентификатор));
	ИначеЕсли ПараметрыПоиска.Свойство("Имя") Тогда
		ИмяОбъекта = ПараметрыПоиска.Имя;
	Иначе
		Возврат ДвоичныеДанные;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ИмяОбъекта", ИмяОбъекта);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат ДвоичныеДанные;
	КонецЕсли;
	
	Возврат Выборка.ХранилищеОбработки.Получить();
	
КонецФункции

Функция ДанныеДополненияВнешниеОбработки(ПараметрыПоиска)
	
	ДвоичныеДанные = Неопределено;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнешниеОбработки.ХранилищеВнешнейОбработки КАК ХранилищеОбработки,
	|	ВЫБОР
	|		КОГДА НЕ ВнешниеОбработки.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
	|ГДЕ
	|	ИСТИНА
	|	И &Ссылка В (ВнешниеОбработки.Ссылка, ЗНАЧЕНИЕ(Справочник.ВнешниеОбработки.ПустаяСсылка))
	|	И &ИмяОбъекта В (ВнешниеОбработки.Наименование, """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Ссылка = Справочники["ВнешниеОбработки"].ПустаяСсылка();
	ИмяОбъекта = "";
	Если ПараметрыПоиска.Свойство("УникальныйИдентификатор") Тогда
		Ссылка = Справочники["ВнешниеОбработки"].ПолучитьСсылку(
			Новый УникальныйИдентификатор(ПараметрыПоиска.УникальныйИдентификатор));
	ИначеЕсли ПараметрыПоиска.Свойство("Имя") Тогда
		ИмяОбъекта = ПараметрыПоиска.Имя;
	Иначе
		Возврат ДвоичныеДанные;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ИмяОбъекта", ИмяОбъекта);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат ДвоичныеДанные;
	КонецЕсли;
	
	Возврат Выборка.ХранилищеОбработки.Получить();
	
КонецФункции

Функция ИзменитьДополнение(Запрос, Операция = "Изменение")
	
	СтруктураОтвета = КонструкторСтруктурыОтвета();
	РСДИ = РаботаСДополнениямиИнтеграция;
	СловарьЗначенийПараметров = РСДИ.СловарьЗначенийПараметровЗапроса();
	ПараметрыЗапроса = РСДИ.КонвертированныеПараметрыЗапроса(Запрос.ПараметрыЗапроса, СловарьЗначенийПараметров);
	
	Если Не ПараметрыЗапроса.Свойство("ТипДополнения") Тогда
		ТекстОшибки = "Необходимо преедать обязательный параметр ""ТипДополнения""";
		Возврат ОтветСервиса(400, ТекстОшибки);
	КонецЕсли;
	
	Отказ = Ложь;
	ТекстОшибки = "";
	
	Если ПараметрыЗапроса.ТипДополнения = РСДИ.ТипДополненияРасширение() Тогда
		ИзменитьРасширение(ПараметрыЗапроса, Отказ, ТекстОшибки, Операция);
	КонецЕсли;
	
	Если Отказ Тогда
		КодОтвета = 400;
		СтрокаОтвета = ТекстОшибки;
	Иначе
		КодОтвета = 200;
		СтруктураОтвета.Статус = "Выполнено";
		СтрокаОтвета = РСДИ.ЗаписатьЗначениеJSON(СтруктураОтвета);
	КонецЕсли;
	
	Возврат ОтветСервиса(КодОтвета, СтрокаОтвета);
	
КонецФункции

Процедура ИзменитьРасширение(ПараметрыЗапроса, Отказ, ТекстОшибки, Операция = "Изменение")
	
	ОтборРасширения = Новый Структура;
	Если ПараметрыЗапроса.Свойство("УникальныйИдентификатор") Тогда
		ОтборРасширения.Вставить("УникальныйИдентификатор",
			Новый УникальныйИдентификатор(ПараметрыЗапроса.УникальныйИдентификатор));
	ИначеЕсли ПараметрыЗапроса.Свойство("Имя") Тогда
		ОтборРасширения.Вставить("Имя", ПараметрыЗапроса.Имя);
	КонецЕсли;
	
	Если Не ОтборРасширения.Количество() Тогда
		Отказ = Истина;
		ТекстОшибки = "Неверно переданы параметры для поиска расширения.";
		Возврат;
	КонецЕсли;
	
	ИзменяемыеРеквизиты = СтрРазделить("Активно,БезопасныйРежим", ",", Ложь);
	
	Расширения = РасширенияКонфигурации.Получить(ОтборРасширения);
	
	Если Не Расширения.Количество() Тогда
		Отказ = Истина;
		ТекстОшибки = "По переданным параметрам расширение не найдено";
		Возврат;
	КонецЕсли;
		
	Расширение = Расширения[0];
	Попытка
		Если Операция = ОперацияДополненияУдаление() Тогда
			Расширение.Удалить();
		Иначе
			Для Каждого Реквизит Из ИзменяемыеРеквизиты Цикл
				Если ПараметрыЗапроса.Свойство(Реквизит) Тогда
					Расширение[Реквизит] = ПараметрыЗапроса[Реквизит];
				КонецЕсли;
			КонецЦикла;
			Расширение.Записать();
		КонецЕсли;
	Исключение
		Отказ = Истина;
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Функция ОперацияДополненияУдаление()
	Возврат "Удаление";
КонецФункции

Функция ТекстОшибкиОбязательныйПараметр(ИмяПраметра)
	Возврат СтрШаблон("Не передан обязательный параметр ""%1"".", ИмяПраметра);
КонецФункции

Процедура УстановитьРасширение(ДвоичныеДанныеРасширения, ПараметрыЗапроса, Отказ, ТекстОшибки)
	
	Перем Имя;
	Если Не Параметрызапроса.Свойство("Имя", Имя) Тогда
		Отказ = Истина;
		ТекстОшибки = ТекстОшибкиОбязательныйПараметр("Имя");
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОтборПоиска = Новый Структура("Имя", Имя);
	Расширения = РасширенияКонфигурации.Получить(ОтборПоиска);
	КоличествоНайденныхРасширений = Расширения.Количество();
	
	Если КоличествоНайденныхРасширений = 0 Тогда
		Расширение = РасширенияКонфигурации.Создать();
		Расширение.БезопасныйРежим = Ложь;
		Расширение.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
	ИначеЕсли КоличествоНайденныхРасширений = 1 Тогда
		Расширение = Расширения[0];
	Иначе
		Отказ = Истина;
		ТекстОшибки = "По переданному имени найдено несколько расширений.
			|Необходимо проверить корректность данных.";
	КонецЕсли;
	
	Попытка
		Расширение.Записать(ДвоичныеДанныеРасширения);
	Исключение
		Отказ = Истина;
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти
