//////////////////////////////////////////////////////////////////////////
// HTTP сервис УправлениеПользователями.
// Версия: см. метод ВерсияGET
// Предназначен для работы с пользователями: 
// получение списка пользователей с правом и т.д.
//////////////////////////////////////////////////////////////////////////
// Код ответа:
//    * Успех - 200
//    * Ошибка - 400.
// - Если необходимо передать двоичные данные
//    * Успех - запрашиваемые двоичные данные
//    * Ошибка - строка ошибки в двоичных данных
// - Если передаётся строка
//    * Успех - структура в JSON. см. КонструкторСтруктурыОтвета
//    * Ошибка - текст ошибки.
//////////////////////////////////////////////////////////////////////////

#Область ОбработкаЗапросов

Функция СписокПользователейСПравомGETЗапрос(Запрос)
	Возврат СписокПользователейСПравомGETОтвет(Запрос, Запрос.ПараметрыURL["Право"]);
КонецФункции

Функция ВерсияGET(Запрос)
	ВерсияСервиса = "2023.08.24.001";
	Возврат ОтветСервиса(200, ВерсияСервиса);
КонецФункции

#КонецОбласти

#Область ПолучениеОтветов

Функция СписокПользователейСПравомGETОтвет(Запрос, Право)

	СтруктураОтвета = КонструкторСтруктурыОтвета();
	КодОтвета = 200;
	Попытка
		СписокИменПользователей = Новый Массив;
		Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
			Если ПравоДоступа(Право, Метаданные, ПользовательИБ) Тогда
				СписокИменПользователей.Добавить(ПользовательИБ.Имя);
			КонецЕсли;
		КонецЦикла;
		СтруктураОтвета.Результат = СписокИменПользователей;
		СтруктураОтвета.Статус = "Успех";
	Исключение
		КодОтвета = 400;
		СтруктураОтвета.Результат = Новый Массив;
		СтруктураОтвета.Статус = "Ошибка";
		СтруктураОтвета.ПредставлениеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	СтрокаОтвета = ЗаписатьЗначениеJSON(СтруктураОтвета);
	Возврат ОтветСервиса(КодОтвета, СтрокаОтвета);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Конструктор структуры для ответа сервиса
//
// Возвращаемое значение:
//  Структура
//
Функция КонструкторСтруктурыОтвета()
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Результат");
	СтруктураОтвета.Вставить("Статус", "");
	СтруктураОтвета.Вставить("ПредставлениеОшибки", "");
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Формирует ответ сервиса
//
// Параметры:
//  КодОтвета	 - Число - код ответа сервиса.
//  СтрокаОтвета - Строка - будет передана в теле ответа.
// 
// Возвращаемое значение:
//  HTTPСервисОтвет
//
Функция ОтветСервиса(КодОтвета, ТелоОтвета, ТипТелаОтвета = Неопределено)
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	Ответ.Заголовки.Вставить("Content-Type", "application/json;charset=utf-8");
	
	Если ТипТелаОтвета = Неопределено Или ТипТелаОтвета = Тип("Строка") Тогда
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
	ИначеЕсли ТипТелаОтвета = Тип("ДвоичныеДанные") Тогда
		Ответ.УстановитьТелоИзДвоичныхДанных(ТелоОтвета);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Сериализует переданные данные в строку JSON
//
// Параметры:
//  Данные	 - Произвольный	 - данные для преобразования. В общем случае - структура.
// 
// Возвращаемое значение:
//  Строка - строка в формате JSON
//
Функция ЗаписатьЗначениеJSON(Данные)
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат СтрокаJSON;
КонецФункции

// Получает данные из строки JSON
//
// Параметры:
//  СтрокаJSON - Строка - строка в формате JSON
// 
// Возвращаемое значение:
//  Произвольный
//
Функция ПрочитатьЗначениеJSON(СтрокаJSON)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Возврат Результат;
КонецФункции

#КонецОбласти

