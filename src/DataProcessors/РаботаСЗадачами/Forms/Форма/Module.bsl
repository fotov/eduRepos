
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТолькоМои = Истина;
	КешДанныхЗадач = ЗначениеВСтрокуВнутр(Новый Соответствие);
	НастроитьЭлементыФормыКонфликтыИзменений();
	НастроитьФорму("ПриСозданииНаСервере");
	УстановитьОтборДинамическимСпискам();
	УстановитьУсловноеОформление();
	ЗаполнитьСписокОтбораТочекМаршрута();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Заявки.Отбор,
		"ЖелаемыйИсполнитель",
		Пользователи.ТекущийПользователь(),
		,
		,
		ТолькоМои,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОписаниеЗадачиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РаботаСФормамиКлиент.ОбработкаКликаПоСсылке(Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТолькоМоиПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Заявки.Отбор,
		"ЖелаемыйИсполнитель",
		ПользователиКлиент.ТекущийПользователь(),
		,
		,
		ТолькоМои,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
КонецПроцедуры

&НаКлиенте
Процедура ОтборТочкаМаршрутаПриИзменении(Элемент)
	
	ИспользоватьОтбор = Не (ОтборТочкаМаршрута = ТочкаМаршрутаБезОтбора());
	Если ИспользоватьОтбор Тогда
		ТекущаяТочкаМаршрута = ОтборТочкаМаршрута;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Заявки.Отбор,
		"ТочкаМаршрута",
		ОтборТочкаМаршрута,
		,
		,
		ИспользоватьОтбор,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		
	НастроитьФорму();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаявки

&НаКлиенте
Процедура ЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ЗаявкиБизнесПроцессЗадачаМетеор Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ЗадачаМетеор(Элементы.Заявки.ТекущаяСтрока));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиПриАктивизацииСтроки(Элемент)
	ТекДанныеЗадачи = Элементы.Заявки.ТекущиеДанные;
	ТекущаяТочкаМаршрута = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекДанныеЗадачи, "ТочкаМаршрута");
	ПодключитьОбработчикОжидания("ЗаявкиПриАктивизацииСтрокиНаКлиенте", 0.5, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВерсии

&НаКлиенте
Процедура ВерсииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Поле = Элементы.ВерсииХэшGitСокр Тогда
		НачатьЗапускПриложения(Новый ОписаниеОповещения, Элемент.ТекущиеДанные.URLGit);
	ИначеЕсли Поле = Элементы.ВерсииОшибокАПК Тогда
		//РезультатПроверки = ОтчетПоОшибкамСинтаксическойПроверкиАПК(Элемент.ТекущиеДанные.Коммит);
		//РезультатПроверки.Показать("Результат проверки АПК");
		ОткрытьОтчетСинтаксическойПроверки(Элемент.ТекущиеДанные.Коммит);
	ИначеЕсли Поле = Элементы.ВерсииОшибокАвтотесты Тогда
		НачатьЗапускПриложения(Новый ОписаниеОповещения, Элемент.ТекущиеДанные.URLAllure);
		НачатьЗапускПриложения(Новый ОписаниеОповещения, Элемент.ТекущиеДанные.URLJUnit);
	ИначеЕсли Поле = Элементы.КоммитыПоОбъектамХэшGitСокр Тогда
		НачатьЗапускПриложения(Новый ОписаниеОповещения, URLGit(Элемент.ТекущиеДанные.Коммит));
	ИначеЕсли Поле = Элементы.ВерсииКоличествоОшибокBSL_LS Тогда
		//РезультатПроверки = ОтчетПоОшибкамСинтаксическойПроверки(Элемент.ТекущиеДанные.Коммит);
		//РезультатПроверки.Показать("Результат проверки BSL-LS");
		ОткрытьОтчетСинтаксическойПроверки(Элемент.ТекущиеДанные.Коммит);
	ИначеЕсли Поле = Элементы.ВерсииИзмененияСвойств Тогда
		ОткрытьОтчетАнализИзмененийСвойствОбъектов(Элемент.ТекущиеДанные.Коммит);
	Иначе
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Коммит);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИтоговыеИзменения

&НаКлиенте
Процедура ИтоговыеИзмененияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.ИтоговыеИзмененияУРЛГит Тогда
		СтандартнаяОбработка = Ложь;
		НачатьЗапускПриложения(Новый ОписаниеОповещения, Элемент.ТекущиеДанные.УРЛГит);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнения

&НаКлиенте
Процедура ДополненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Поле = Элементы.ДополненияОшибокBSL_LS Тогда
		ОткрытьОтчетСинтаксическойПроверки(Элемент.ТекущиеДанные.ВерсияДополнения);
	ИначеЕсли Поле = Элементы.ДополненияАдресКоммита Тогда
		НачатьЗапускПриложения(Новый ОписаниеОповещения, Элемент.ТекущиеДанные.АдресКоммита);
	Иначе
		ПоказатьЗначение(, Элемент.ТекущиеДанные.ВерсияДополнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОбъектов

&НаКлиенте
Процедура ТаблицаОбъектовПриАктивизацииСтроки(Элемент)
	ИмяОбъекта = "";
	Если Элементы.ТаблицаОбъектов.ТекущиеДанные <> Неопределено Тогда
		ИмяОбъекта = Элементы.ТаблицаОбъектов.ТекущиеДанные.ИмяОбъекта;
	КонецЕсли;
	КоммитыПоОбъектам.Отбор.Элементы.Очистить();
	СтрОтбор = КоммитыПоОбъектам.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	СтрОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмяОбъекта");
	СтрОтбор.ПравоеЗначение = ИмяОбъекта;
	СтрОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтрОтбор.Использование = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТаблицаОбъектовКоличествоРолей" Тогда
		Ключ = Элементы.ТаблицаОбъектов.ТекущиеДанные.ОбъектМетаданных;
		Если ЗначениеЗаполнено(Ключ) Тогда
			СтандартнаяОбработка = Ложь; 
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Отбор", Новый Структура);
			ПараметрыОткрытия.Отбор.Вставить("ОбъектМетаданных", Ключ);
			ОткрытьФорму("РегистрСведений.ОбъектыМетаданныхПрава.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект, Ключ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКоммитыПоОбъектам

&НаКлиенте
Процедура КоммитыПоОбъектамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(Неопределено, Элементы.КоммитыПоОбъектам.ТекущиеДанные.Коммит);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыGit

&НаКлиенте
Процедура ФайлыGitВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	НачатьЗапускПриложения(Новый ОписаниеОповещения, Элемент.ТекущиеДанные.Префикс+Элемент.ТекущиеДанные.Файл);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонфликтыИзменений

&НаКлиенте
Процедура КонфликтыИзмененийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	РаботаСФормамиКлиент.КонфликтыИзмененийВыбор(Элемент, Поле);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура Согласовать(Команда)
	
	Если Элементы.Заявки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗадачаИсполнителя", Элементы.Заявки.ТекущиеДанные.Ссылка);
	
	Отказ = Ждать ПередатьЗадачуДругомуИсполнителюПриНеобходимости(ДополнительныеПараметры.ЗадачаИсполнителя);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("ПослеОценкиКачестваКода", ЭтотОбъект);
	ТочкиСогласования = Новый Массив;
	ТочкиСогласования.Добавить(ПредопределенноеЗначение("БизнесПроцесс.ПредварительнаяПроверка.ТочкаМаршрута.ПроверкаКода"));
	ТочкиСогласования.Добавить(ПредопределенноеЗначение("БизнесПроцесс.СогласованиеПереноса.ТочкаМаршрута.ПроверкаКода"));
	Если Не (ТочкиСогласования.Найти(ТекущаяТочкаМаршрута) = Неопределено) Тогда
		ОткрытьФорму(
			"Обработка.РаботаСЗадачами.Форма.ФормаОценкиКачестваКода",
			ДополнительныеПараметры,
			ЭтотОбъект,
			УникальныйИдентификатор,
			,
			,
			ОповещениеПродолжения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Ждать ВопросАсинх("Продолжить согласование?", Режим);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура СогласоватьСЗамечанием(Команда)
	
	Если Не ЗначениеЗаполнено(Элементы.Заявки.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗадачаИсполнителя", Элементы.Заявки.ТекущиеДанные.Ссылка);

	Отказ = Ждать ПередатьЗадачуДругомуИсполнителюПриНеобходимости(ДополнительныеПараметры.ЗадачаИсполнителя);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("ПослеОценкиКачестваКодаСЗамечаниями", ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.РаботаСЗадачами.Форма.ФормаОценкиКачестваКода",
		ДополнительныеПараметры,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		ОповещениеПродолжения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НеСогласовать(Команда)
	
	Если Не ЗначениеЗаполнено(Элементы.Заявки.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуЗамечания(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОценкуТрудозатрат(Команда)
	
	ТекущиеДанные = Элементы.Заявки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Необходимо выбрать задачу для оценки!");
		Возврат;
	КонецЕсли;
		
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
	
	// На случай открытия внешнего файла или из конфигурации
	ИмяОткрываемойФормы = СтрРазделить(ИмяФормы, ".")[0] + ".РаботаСЗадачами.Форма.ФормаОценкиКонтроляТрудозатрат";
	ОткрытьФорму(
		ИмяОткрываемойФормы,
		ПараметрыОткрытияФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьКонтрольТрудозатрат(Команда)
	
	ТекущиеДанные = Элементы.Заявки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Необходимо выбрать задачу для оценки!");
		Возврат;
	КонецЕсли;
		
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
	// На случай открытия внешнего файла или из конфигурации
	ИмяОткрываемойФормы = СтрРазделить(ИмяФормы, ".")[0] + ".РаботаСЗадачами.Форма.ФормаРешенияКонтроляТрудозатрат";
	ОткрытьФорму(
		ИмяОткрываемойФормы,
		ПараметрыОткрытияФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(Команда)
	
	Если Элементы.Заявки.ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Необходимо выбрать задачу.");
		Возврат;
	КонецЕсли;
	
	Если ТекущаяТочкаМаршрута = "" Тогда
		// какие-то действия
		ОбновитьДанныеЗадачи();
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не задан обработчик для данного режима проверки.");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВсеСсылки(Команда)
	
	Для Каждого Строка Из Версии Цикл
		Если Строка.Статус = ПредопределенноеЗначение("Перечисление.СтатусыИсторииХранилищ.Перенесено") Тогда
			Продолжить;
		КонецЕсли;
		НачатьЗапускПриложения(Новый ОписаниеОповещения, Строка.URLGit);
	КонецЦикла;
	
	Для Каждого Строка Из Версии Цикл
		Если Строка.Статус = ПредопределенноеЗначение("Перечисление.СтатусыИсторииХранилищ.Перенесено")
			Или Не ЗначениеЗаполнено(Строка.ОшибокАПК) Тогда
			Продолжить;
		КонецЕсли;
		РезультатПроверки = ОтчетПоОшибкамСинтаксическойПроверкиАПК(Объект.Ссылка);
		РезультатПроверки.Показать("Результат проверки АПК");
	КонецЦикла;
	
	Для Каждого Строка Из Версии Цикл
		Если Строка.Статус = ПредопределенноеЗначение("Перечисление.СтатусыИсторииХранилищ.Перенесено")
			Или Не ЗначениеЗаполнено(Строка.ОшибокАвтотесты) Тогда
			Продолжить;
		КонецЕсли;
		НачатьЗапускПриложения(Новый ОписаниеОповещения, Строка.URLAllure);
		НачатьЗапускПриложения(Новый ОписаниеОповещения, Строка.URLJUnit);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗамечание(Команда)
	
	ТекущиеДанныеВерсий = Элементы.Версии.ТекущиеДанные;
	ЗадачаИсполнителя = Элементы.Заявки.ТекущаяСтрока;
	
	Если ТекущиеДанныеВерсий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗадачаИсполнителя) Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаМетеор = ЗадачаМетеор(ЗадачаИсполнителя);
	Коммит = ТекущиеДанныеВерсий.Коммит;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ЗадачаМетеор", ЗадачаМетеор);
	ЗначенияЗаполнения.Вставить("Коммит", Коммит);
	ЗначенияЗаполнения.Вставить("Дата", ОбщегоНазначенияКлиент.ДатаСеанса());
	ЗначенияЗаполнения.Вставить("Автор", ПользователиКлиент.ТекущийПользователь());
	ЗначенияЗаполнения.Вставить("ИсточникЗамечаний", ИсточникЗамечаний());
	ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения ", ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ЗамечанияКоммита.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗамечания(Команда)
	
	Если Не ЗначениеЗаполнено(Элементы.Заявки.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьЗамечанияСервер(Элементы.Заявки.ТекущаяСтрока);
	
	Элементы.Замечания.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатусИсправления(Команда)
	
	ТекущиеДанныеЗамечания = Элементы.Замечания.ТекущиеДанные;
	
	Если ТекущиеДанныеЗамечания = Неопределено Тогда
	
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбрано замечание");
		Возврат;
	
	КонецЕсли;
	
	ЗначенияИзмерений = Новый Структура;
	ЗначенияИзмерений.Вставить("ЗадачаМетеор");
	ЗначенияИзмерений.Вставить("ИсточникЗамечаний");
	ЗначенияИзмерений.Вставить("Дата");
	ЗначенияИзмерений.Вставить("Коммит");
	ЗначенияИзмерений.Вставить("Автор");
	
	ЗаполнитьЗначенияСвойств(ЗначенияИзмерений, ТекущиеДанныеЗамечания);
	
	ИзменитьСтатусИсправленияСервер(ЗначенияИзмерений);
	
	Элементы.Замечания.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьПроверкуАПК(Команда)
	
	ВерсииТекущиеДанные = Элементы.Версии.ТекущиеДанные;
	Если ВерсииТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбран коммит для пропуска проверки.");
		Возврат;
	КонецЕсли;

	ПропуститьПроверкуАПКНаСервере(ВерсииТекущиеДанные.Коммит);
	Элементы.Версии.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДокументацию(Команда)
	
	ТекущиеДанные = Элементы.Заявки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Необходимо выбрать задачу для оценки!");
		Возврат;
	КонецЕсли;
		
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
	
	ИмяОткрываемойФормы = "БизнесПроцесс.ПроверкаДокументации.Форма.ФормаЗадачиПроверкиДокументации";
	ОткрытьФорму(
		ИмяОткрываемойФормы,
		ПараметрыОткрытияФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьЗаявки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЛогическуюПодсистемуОбъектам(Команда)
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ПослеВыбораЛогическойПодсистемы", ЭтотОбъект);
	ПараметрыВыбора = Новый Структура("УстановитьПользовательскийОтборПоТекущемуПользователю", Истина);
	ОткрытьФорму(
		"РегистрСведений.ОтветственныеЛогическихПодсистем.Форма.ФормаВыбора",
		ПараметрыВыбора,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		ОповещениеОВыборе,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДругомуИсполнителю(Команда)
	
	ОткрытьФормуСменыИсполнителя();
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИтоговыеИзменения(Команда)
	ТекущиеДанные = Элементы.Заявки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Необходимо выбрать задачу.");
		Возврат;
	КонецЕсли;
	
	ЗадачаМетеор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущиеДанные, "ЗадачаМетеор");	
	ДобавитьВОчередьФормированияИтоговыхИзменений(ЗадачаМетеор);
	Элементы.ИтоговыеИзменения.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИзменения(Команда)
	
	Коммиты = Новый СписокЗначений;
	Для каждого СтрокаВерсии Из Версии Цикл
		Коммиты.Добавить(СтрокаВерсии.Коммит);
	КонецЦикла; 
	
	ПараметрыОткрытия = Новый Структура("Коммиты", Коммиты);
	
	ОткрытьФорму("ОбщаяФорма.ПросмотрИзмененийShowDiff1C", ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьФормуСменыИсполнителя()

	Если Элементы.Заявки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗадачаИсполнителя", Элементы.Заявки.ТекущиеДанные.Ссылка);
	ДополнительныеПараметры.Вставить("ТочкаМаршрута", ТекущаяТочкаМаршрута);
	ОповещениеЗакрытия = Новый ОписаниеОповещения("ПослеСменыИсполнителя", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.РаботаСЗадачами.Форма.ФормаСменыИсполнителя",
		ДополнительныеПараметры,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		ОповещениеЗакрытия,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыИсполнителя(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Истина Тогда
		ОбновитьЗаявки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЛогическуюПодсистемуОбъектамНаСервере(ЛогическаяПодсистема)
	ТекДата = ТекущаяДатаСеанса();
	
	ВыбранныеСтроки = Новый Массив;
	Для Каждого ИдСтроки Из Элементы.ТаблицаОбъектов.ВыделенныеСтроки Цикл
		ВыбранныеСтроки.Добавить(ТаблицаОбъектов.НайтиПоИдентификатору(ИдСтроки));
	КонецЦикла;
	ВыбранныеОбъекты = ТаблицаОбъектов.Выгрузить(ВыбранныеСтроки, "Проект, ИмяОбъекта");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Проект КАК Проект,
		|	Т.ИмяОбъекта КАК ИмяОбъекта
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ВыбранныеОбъекты КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектов.ИмяОбъекта КАК ИмяОбъекта,
		|	ЕСТЬNULL(ОбъектыМетаданных.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыМетаданных.ПустаяСсылка)) КАК ОбъектМетаданных
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|		ПО (ТаблицаОбъектов.ИмяОбъекта ПОДОБНО ОбъектыМетаданных.Наименование + ""%"")
		|			И (НЕ ОбъектыМетаданных.ПометкаУдаления)
		|			И ТаблицаОбъектов.Проект = ОбъектыМетаданных.Владелец
		|ИТОГИ ПО
		|	ОбъектМетаданных";
	Запрос.УстановитьПараметр("ВыбранныеОбъекты", ВыбранныеОбъекты);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОбъектМетаданных = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъектМетаданных.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаОбъектМетаданных.ОбъектМетаданных) Тогда
			// Создаём связь
			Попытка
				Запись = РегистрыСведений.СоставЛогическихПодсистем.СоздатьМенеджерЗаписи();
				Запись.Период = ТекДата;
				Запись.ОбъектМетаданных = ВыборкаОбъектМетаданных.ОбъектМетаданных;
				Запись.ЛогическаяПодсистема = ЛогическаяПодсистема;
				Запись.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					"Не удалось установить логическую подсистему для объекта метаданных: "
					+ ВыборкаОбъектМетаданных.ОбъектМетаданных
					+ " по причине: "
					+ ОписаниеОшибки());
			КонецПопытки;
		Иначе
			// Оповещаем, что не найден
			ВыборкаИмяОбъекта = ВыборкаОбъектМетаданных.Выбрать();
			Пока ВыборкаИмяОбъекта.Следующий() Цикл
				ОбщегоНазначения.СообщитьПользователю(
					"Не удалось найти объект метаданных по имени: "
					+ ВыборкаИмяОбъекта.ИмяОбъекта
					+ ". Установка подсистемы пропущена.");
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЛогическойПодсистемы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Тип Результата РегистрСведенийКлючЗаписи
	ПослеВыбораЛогическойПодсистемыНаСервере(Результат, ДополнительныеПараметры);
	ОбновитьЗаявки();

КонецПроцедуры

&НаСервере
Процедура ПослеВыбораЛогическойПодсистемыНаСервере(Результат, ДополнительныеПараметры)
	УстановитьЛогическуюПодсистемуОбъектамНаСервере(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаявки()
	
	Элементы.Заявки.Обновить();
	ЗаявкиПриАктивизацииСтрокиНаКлиенте();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьСтатусИсправленияСервер(ЗначенияИзмерений)

	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ЗамечанияКоммита.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, ЗначенияИзмерений);
	Запись.Прочитать();
	
	Запись.Исправлено = Не Запись.Исправлено;
	
	Запись.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьЗамечанияСервер(Задача)
	
	ЗадачаМетеор = ЗадачаМетеор(Задача);
	РегистрыСведений.ЗамечанияКоммита.ЗагрузитьЗамечанияЗадачиМетеорИзGit(ЗадачаМетеор);
	
КонецПроцедуры

&НаСервере
Функция СогласованиеВозможно(Задача)
	
	Отказ = Ложь;
	ТочкиСогласования = Новый Массив;
	ТочкиСогласования.Добавить(ПредопределенноеЗначение("БизнесПроцесс.ПредварительнаяПроверка.ТочкаМаршрута.ПроверкаКода"));
	ТочкиСогласования.Добавить(ПредопределенноеЗначение("БизнесПроцесс.СогласованиеПереноса.ТочкаМаршрута.ПроверкаКода"));
	Если Не (ТочкиСогласования.Найти(ТекущаяТочкаМаршрута) = Неопределено) Тогда
		МинимальныйСтатус = ?(ТекущаяТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.ПредварительнаяПроверка.ТочкаМаршрута.ПроверкаКода"),
			БизнесПроцессы.ПредварительнаяПроверка.ОсновнойСтатус(),
			БизнесПроцессы.СогласованиеПереноса.ОсновнойСтатус());
		Для Каждого Строка Из Дополнения Цикл
			Если Строка.ТипДополнения = ПредопределенноеЗначение("Перечисление.ТипыДополнений.Расширение") 
					И Перечисления.СтатусыИсторииХранилищ.Индекс(Строка.Статус) < Перечисления.СтатусыИсторииХранилищ.Индекс(МинимальныйСтатус) Тогда
				ТекстСообщения = СтрШаблон("Дополнение %1 не готово к согласованию. Проверьте статус.", Строка.ВерсияДополнения);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из Версии Цикл
			Если Перечисления.СтатусыИсторииХранилищ.Индекс(Строка.Статус) < Перечисления.СтатусыИсторииХранилищ.Индекс(МинимальныйСтатус) Тогда
				ТекстСообщения = СтрШаблон("Коммит %1 %2 не готов к согласованию. Проверьте статус.", Строка.Коммит, Строка.Проект);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаСервере
Процедура ДобавитьСообщениеМетеор(Задача, Согласовано, ДанныеЗамечания)
	
	Если ДанныеЗамечания = Неопределено Тогда
		ДанныеЗамечания = Новый Структура;
	КонецЕсли;
	
	ДанныеЗамечания_HTML = "";
	ДанныеЗамечания.Свойство("HTML", ДанныеЗамечания_HTML);
	
	Если Согласовано = Ложь Тогда
		Статус = "Не согласовано";
	ИначеЕсли ЗначениеЗаполнено(ДанныеЗамечания_HTML) Тогда
		Статус = "Согласовано с замечаниями";
	Иначе
		Статус = "Согласовано";
	КонецЕсли;
	
	ТипСогласования = Задача.ТочкаМаршрута.НаименованиеЗадачи;
	
	МассивСтрокДляМетеора = Новый Массив;
	МассивСтрокДляМетеора.Добавить("Этап согласования - " + ТипСогласования);
	МассивСтрокДляМетеора.Добавить(Статус);
	МассивСтрокДляМетеора.Добавить(Пользователи.ТекущийПользователь());
	Если ЗначениеЗаполнено(ДанныеЗамечания_HTML) Тогда
		МассивСтрокДляМетеора.Добавить(ИнтеграцияСМетеор.УдалитьТеги(ДанныеЗамечания_HTML));
	КонецЕсли;
	ТекстМетеор = СтрСоединить(МассивСтрокДляМетеора, Символы.ПС);
	ИнтеграцияСМетеор.ОтправитьФорматированныйКомментарийВМетеор(Задача.БизнесПроцесс.ЗадачаМетеор, ТекстМетеор);
	
КонецПроцедуры

&НаСервере
Функция СогласоватьНаСервере(Задача, Согласовано, ДанныеЗамечания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Задача.БизнесПроцесс.Метаданные().Реквизиты.Найти("ЗадачаМетеор") <> Неопределено Тогда
		ДобавитьСообщениеМетеор(Задача, Согласовано, ДанныеЗамечания);
	КонецЕсли;
	
	ОбновитьДанныеЗадачи();
	
	Если Согласовано И Не СогласованиеВозможно(Элементы.Заявки.ТекущаяСтрока) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	БизнесПроцессы.СогласованиеПереноса.Согласовать(Задача, Согласовано, ДанныеЗамечания);
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.ВыполнитьЗадачу();
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Асинх Функция ПередатьЗадачуДругомуИсполнителюПриНеобходимости(ЗадачаИсполнителя, Отказ = Ложь)
	
	Если НеобходимоПредложитьПередатьЗадачуДругомуИсполнителю(ЗадачаИсполнителя, ТекущаяТочкаМаршрута) Тогда
		Режим = Новый СписокЗначений;
		Режим.Добавить("Передать", "Передать другому исполнителю");
		Режим.Добавить("Продолжить", "Согласовать самостоятельно");
		Режим.Добавить("Отмена", "Отменить согласование");
		Ответ = Ждать ВопросАсинх("По задаче имеются ваши коммиты. 
			|Рекомендуется передать код-ревью другому исполнителю", Режим);
		Если Ответ = "Отмена" Тогда
			Отказ = Истина;
		ИначеЕсли Ответ = "Передать" Тогда
			Отказ = Истина;
			ОткрытьФормуСменыИсполнителя();
		Иначе
			Отказ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПослеОценкиКачестваКода(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗакрытия = Истина Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Согласование прервано");
		Возврат;
	КонецЕсли;
	
	ЗадачаИсполнителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметры, "ЗадачаИсполнителя", Элементы.Заявки.ТекущаяСтрока);
	
	ТочкиВводаЗамечаний = Новый Массив;
	ТочкиВводаЗамечаний.Добавить(ПредопределенноеЗначение("БизнесПроцесс.ПредварительнаяПроверка.ТочкаМаршрута.ПроверкаКода"));
	ТочкиВводаЗамечаний.Добавить(ПредопределенноеЗначение("БизнесПроцесс.СогласованиеПереноса.ТочкаМаршрута.ПроверкаКода"));
	Если Не (ТочкиВводаЗамечаний.Найти(ТекущаяТочкаМаршрута) = Неопределено) Тогда
		ЗамечанияПоЗадаче = ЗамечанияПоЗадаче(ЗадачаИсполнителя, ИсточникЗамечаний());
		Элементы.Замечания.Обновить(); // Возможно при проверке замечаний были загружены новые замечания.
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗамечанияПоЗадаче) Тогда
		ОткрытьФормуЗамечания(Истина);
	Иначе
		СогласоватьНаКлиенте(ЗадачаИсполнителя, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОценкиКачестваКодаСЗамечаниями(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если Не РезультатЗакрытия = Истина Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Согласование прервано");
		Возврат;
	КонецЕсли;
	ОткрытьФормуЗамечания(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗамечания(Согласовано)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Задача", Элементы.Заявки.ТекущаяСтрока);
	СтруктураПараметров.Вставить("ИсточникЗамечаний", ИсточникЗамечаний());
	СтруктураПараметров.Вставить("Согласовано", Согласовано);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЗамечанияЗавершение", ЭтотОбъект, СтруктураПараметров);
	
	ОткрытьФорму("Обработка.РаботаСЗадачами.Форма.ФормаЗамечания", СтруктураПараметров, ЭтотОбъект, УникальныйИдентификатор, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗамечанияЗавершение(Данные, СтруктураПараметров) Экспорт
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СогласоватьНаКлиенте(СтруктураПараметров.Задача, СтруктураПараметров.Согласовано, Данные.ДанныеЗамечания);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура СогласоватьНаКлиенте(Задача, Согласовано, ДанныеЗамечания = Неопределено)
	
	СтрокиОбъектовБезПодсистем = ТаблицаОбъектов.НайтиСтроки(Новый Структура("Подсистемы", ""));
	Если СтрокиОбъектовБезПодсистем.Количество() Тогда
		ВсеОбъектыБезПодсистем = Новый Массив;
		Для Каждого СтрокаОбъекта Из СтрокиОбъектовБезПодсистем Цикл
			ВсеОбъектыБезПодсистем.Добавить(СтрокаОбъекта.ИмяОбъекта);
		КонецЦикла;
		ОбъектыБезОтветственных = СтрСоединить(ВсеОбъектыБезПодсистем, ", ");
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Ждать ВопросАсинх(
			"По объектам:
			|" + ОбъектыБезОтветственных + "
			|Не установлены подсистемы. Прервать согласование и установить подсистемы?",
			Режим);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	СогласованоУспешно = СогласоватьНаСервере(Задача, Согласовано, ДанныеЗамечания);
	ТочкиСОтражениемЧасов = Новый Массив;
	ТочкиСОтражениемЧасов.Добавить(ПредопределенноеЗначение("БизнесПроцесс.ПредварительнаяПроверка.ТочкаМаршрута.ПроверкаКода"));
	ТочкиСОтражениемЧасов.Добавить(ПредопределенноеЗначение("БизнесПроцесс.СогласованиеАрхитектуры.ТочкаМаршрута.СогласоватьАрхитектуру"));
	Если СогласованоУспешно И Не (ТочкиСОтражениемЧасов.Найти(ТекущаяТочкаМаршрута) = Неопределено) Тогда
		ДобавитьЧасыПоЗадаче(Задача);
	КонецЕсли;
	ОповеститьОбИзменении(Задача);
	ЗаявкиПриАктивизацииСтрокиНаКлиенте();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЧасыПоЗадачеМетеор(ЗадачаИсполнителя)

	ЗадачаМетеор = ЗадачаМетеор(ЗадачаИсполнителя);
	Если Не ЗначениеЗаполнено(ЗадачаМетеор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Попытка
	
		Возврат ИнтеграцияСМетеор.ПолучитьЧасыПоЗадачеМетеор(ЗадачаМетеор);
	
	Исключение
		
		Возврат Неопределено;
	
	КонецПопытки;

КонецФункции

&НаСервере
Процедура ОбновитьДанныеЗадачи()
	
	ОписаниеЗадачи = "";
	Версии.Очистить();
	ТаблицаОбъектов.Очистить();
	КоличествоВерсий = 0;
	КоличествоОбъектов = 0;
	
	ЗадачаИсполнителя = Элементы.Заявки.ТекущаяСтрока;
	ЗадачаИсполнителяВыбрана = ЗначениеЗаполнено(ЗадачаИсполнителя);
	
	Если ЗадачаИсполнителяВыбрана Тогда
		ЗадачаМетеор = ЗадачаМетеор(ЗадачаИсполнителя);
	Иначе
		ЗадачаМетеор = Справочники.ЗадачиМетеор.ПустаяСсылка();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Замечания.Отбор, "ЗадачаМетеор", ЗадачаМетеор,,, Истина);
	КоммитыПоОбъектам.Параметры.УстановитьЗначениеПараметра("ЗадачаМетеор", ЗадачаМетеор);
	
	Если Элементы.ГруппаКонфликтыИзменений.Видимость Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КонфликтыИзменений.Отбор, "ЗадачаМетеор", ЗадачаМетеор,,, Истина);
		УстановитьЗаголовокКонфликтыИзменений(ЗадачаМетеор)
	КонецЕсли;
	
	Если Элементы.СтраницаДополнения.Видимость Тогда
		ЗаполнитьДополнения(ЗадачаМетеор);
	КонецЕсли;
	
	Если Не ЗадачаИсполнителяВыбрана Тогда
		Возврат;
	КонецЕсли;

	ЭтоОценкаТрудозатрат =
		(ТекущаяТочкаМаршрута = БизнесПроцессы.КонтрольТрудозатрат.ТочкиМаршрута.ОценкаТрудозатратАналитики
			Или ТекущаяТочкаМаршрута = БизнесПроцессы.КонтрольТрудозатрат.ТочкиМаршрута.ОценкаТрудозатратРазработки);
	ДанныеПоЗадаче = РаботаСХранилищами.ДанныеПоЗадаче(ЗадачаМетеор, Не ЭтоОценкаТрудозатрат);
	Версии.Загрузить(ДанныеПоЗадаче.Версии);
	ТаблицаОбъектов.Загрузить(ДанныеПоЗадаче.ТаблицаОбъектов);
	КоличествоВерсий = Версии.НайтиСтроки(Новый Структура("Статус", БизнесПроцессы.ПредварительнаяПроверка.ОсновнойСтатус())).Количество();
	КоличествоОбъектов = ТаблицаОбъектов.Количество();
	
	ПроцентВсеХорошо = 100;
	Если ТаблицаОбъектов.НайтиСтроки(Новый Структура("Подсистемы", "")).Количество() > 0 Тогда
		ПроцентВсеХорошо = ПроцентВсеХорошо - 1;
	КонецЕсли;
	
	Отбор = Новый Структура("НеобходимыРоли, КоличествоРолей", Истина, 0);
	КоличествоНулевыхРолей = ТаблицаОбъектов.НайтиСтроки(Отбор).Количество();
	Если КоличествоНулевыхРолей > 0 Тогда
		ПроцентВсеХорошо = 0;
	КонецЕсли;
	
	Если КоличествоОбъектов = 0 Тогда
		Элементы.ГруппаОбъекты.Картинка = Новый Картинка;
	ИначеЕсли ПроцентВсеХорошо = 100 Тогда
		Элементы.ГруппаОбъекты.Картинка = БиблиотекаКартинок.ОформлениеКругЗеленый;
	ИначеЕсли ПроцентВсеХорошо > 0 Тогда
		Элементы.ГруппаОбъекты.Картинка = БиблиотекаКартинок.ОформлениеКругЖелтый;
	Иначе
		Элементы.ГруппаОбъекты.Картинка = БиблиотекаКартинок.ОформлениеКругКрасный;
	КонецЕсли;
	
	ФайлыGit.Загрузить(ДанныеПоЗадаче.ФайлыGit);
	КоличествоФайлов = ФайлыGit.Количество();
	
	Если ТипЗнч(ЗадачаИсполнителя.БизнесПроцесс) = Тип("БизнесПроцессСсылка.КонвейерОбработки") Тогда
		ОписаниеЗадачи = БизнесПроцессы.КонвейерОбработки.ПолучитьПредставлениеЗадачиВHTML(ЗадачаИсполнителя);
	Иначе 
		ОписаниеЗадачи = Справочники.ЗадачиМетеор.ПолучитьПредставлениеЗадачиВHTML(ЗадачаМетеор);
	КонецЕсли;
	
	Автотесты.Отбор.Элементы.Очистить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Автотесты.Отбор, "БизнесПроцесс", 
		?(Элементы.Заявки.ТекущаяСтрока = Неопределено, Неопределено, Элементы.Заявки.ТекущаяСтрока.БизнесПроцесс),,, Истина);
		
	Если Элементы.ГруппаИзменения.Видимость Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ИтоговыеИзменения.Отбор, "ЗадачаМетеор", ЗадачаМетеор,,, Истина);
	КонецЕсли;
	
	Если ОтборТочкаМаршрута = ТочкаМаршрутаБезОтбора() Тогда
		НастроитьФорму();
	КонецЕсли; 
	ЗаполнитьЧасыПоЗадаче();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЧасыПоЗадаче()
	
	Если Не Элементы.ГруппаЧасы.Видимость Тогда
		Возврат;
	КонецЕсли;
		
	СтрокиТрудозатрат = ЧасыПоЗадаче.ПолучитьЭлементы();
	СтрокиТрудозатрат.Очистить();
	ЧасыПоЗадачеЗатраченоИтог = 0;
	
	ЧасыПоЗадачеМетеор = ЧасыПоЗадачеМетеор(Элементы.Заявки.ТекущаяСтрока);
	
	Если ЧасыПоЗадачеМетеор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиРолей = Новый Соответствие;
	СтрокиРолейПользователей = Новый Соответствие;
	
	Для каждого Трудозатраты Из ЧасыПоЗадачеМетеор.data Цикл
		
		// Группа Роль
		Роль = Трудозатраты.role;
		СтрокаРоли = СтрокиРолей[Роль];
		
		Если СтрокаРоли = Неопределено Тогда
			
			СтрокаРоли = СтрокиТрудозатрат.Добавить();
			СтрокаРоли.Узел = Роль;
			СтрокиРолей.Вставить(Роль, СтрокаРоли);
			
			СтрокиРолейПользователей.Вставить(Роль, Новый Соответствие);
			
		КонецЕсли;
		
		// Группа Пользователь
		Пользователь = Трудозатраты.user;
		СтрокаПользователя = СтрокиРолейПользователей[Роль][Пользователь];
		
		Если СтрокаПользователя = Неопределено Тогда
			
			СтрокаПользователя = СтрокиРолей[Роль].ПолучитьЭлементы().Добавить();
			СтрокаПользователя.Узел = Пользователь;
			СтрокиРолейПользователей[Роль].Вставить(Пользователь, СтрокаПользователя);
			
		КонецЕсли;
		
		// Группа детализация
		Затрачено = Число(Трудозатраты.hours);
		СтрокаДетализации = СтрокаПользователя.ПолучитьЭлементы().Добавить();
		СтрокаДетализации.Дата = ПрочитатьДатуJSON(Трудозатраты.date, ФорматДатыJSON.ISO);
		СтрокаДетализации.Затрачено = Затрачено;
		СтрокаДетализации.Узел = СтрШаблон("%1: %2", Трудозатраты.work_name, Трудозатраты.description);
		СтрокаПользователя.Затрачено = Затрачено + СтрокаПользователя.Затрачено;
		СтрокаРоли.Затрачено = Затрачено + СтрокаРоли.Затрачено;
		ЧасыПоЗадачеЗатраченоИтог = ЧасыПоЗадачеЗатраченоИтог + Затрачено;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиПриАктивизацииСтрокиНаКлиенте()
	
	ОтключитьОбработчикОжидания("ЗаявкиПриАктивизацииСтрокиНаКлиенте");
	ОбновитьДанныеЗадачи();
	Попытка
		СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ЧасыПоЗадаче",, Истина);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗадачаМетеор(Задача)
	
	Возврат Задачи.ЗадачаИсполнителя.ЗадачаМетеор(Задача);
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// ЗадачаИсполнителя адресована текущему пользователю
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Заявки.Имя);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор, "Заявки.ЖелаемыйИсполнитель", Пользователи.ТекущийПользователь(), ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	// Коммит перенесен
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Версии.Имя);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор, "Версии.Статус", Перечисления.СтатусыИсторииХранилищ.Перенесено,,, Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	// Ошибки АПК
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВерсииОшибокАПК.Имя);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор, "Версии.ДанныеЗагружены_ОшибокАПК", Ложь,,, Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Лосось);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "<На проверке>");
	// Ошибки BSL LS
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВерсииКоличествоОшибокBSL_LS.Имя);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор, "Версии.ПровереноBSLLS", Ложь,,, Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Лосось);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "<На проверке>");
	// Ошибки Автотесты
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВерсииОшибокАвтотесты.Имя);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор, "Версии.ДанныеЗагружены_Автотесты", Ложь,,, Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Лосось);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "<На проверке>");
	// Есть изменения свойств версии хранилища
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВерсииИзмененияСвойств.Имя);
	//ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
	//	Элемент.Отбор,
	//	"Изменения свойств версии",
	//	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор, "Версии.ИзмененияСвойств",
		"Не получено", ВидСравненияКомпоновкиДанных.НеНачинаетсяС,, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор, "Версии.ИзмененияСвойств",
		ВидСравненияКомпоновкиДанных.НеРавно, "0; +0; -0",, Истина);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор, "Версии.ИзмененияСвойств",
	//	"0; +0; -0", ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму(Режим = "")
	
	Если Режим = "ПриСозданииНаСервере" Тогда
		// Для элементов, параметры которых не зависят от переключения режима проверки.
		Элементы.ВерсииПропуститьПроверкуАПК.Видимость = РолиДоступенПропускПроверки();
	КонецЕсли;

	// Команды
	// Согласовать
	РежимыСогласования = Новый Массив;
	РежимыСогласования.Добавить(БизнесПроцессы.ПредварительнаяПроверка.ТочкиМаршрута.ПроверкаКода);
	РежимыСогласования.Добавить(БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПроверкаКода);
	РежимыСогласования.Добавить(БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ПроверкаСинтаксическогоКонтроля);
	РежимыСогласования.Добавить(БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ПроверкаПайплайна);
	РежимыСогласования.Добавить(БизнесПроцессы.СогласованиеАрхитектуры.ТочкиМаршрута.СогласоватьАрхитектуру);
	Элементы.Согласовать.Видимость = Не (РежимыСогласования.Найти(ТекущаяТочкаМаршрута) = Неопределено);
	// Согласовать с замечаниями
	РежимыСогласоватьСЗамечанием = Новый Массив;
	РежимыСогласоватьСЗамечанием.Добавить(БизнесПроцессы.ПредварительнаяПроверка.ТочкиМаршрута.ПроверкаКода);
	РежимыСогласоватьСЗамечанием.Добавить(БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПроверкаКода);
	РежимыСогласоватьСЗамечанием.Добавить(БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ПроверкаСинтаксическогоКонтроля);
	РежимыСогласоватьСЗамечанием.Добавить(БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ПроверкаПайплайна);
	Элементы.СогласоватьСЗамечанием.Видимость = Не (РежимыСогласоватьСЗамечанием.Найти(ТекущаяТочкаМаршрута) = Неопределено);
	// Не согласовать
	РежимыНеСогласовать = Новый Массив;
	РежимыНеСогласовать.Добавить(БизнесПроцессы.ПредварительнаяПроверка.ТочкиМаршрута.ПроверкаКода);
	РежимыНеСогласовать.Добавить(БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПроверкаКода);
	РежимыНеСогласовать.Добавить(БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ПроверкаСинтаксическогоКонтроля);
	РежимыНеСогласовать.Добавить(БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ПроверкаПайплайна);
	РежимыНеСогласовать.Добавить(БизнесПроцессы.СогласованиеАрхитектуры.ТочкиМаршрута.СогласоватьАрхитектуру);
	Элементы.НеСогласовать.Видимость = Не (РежимыНеСогласовать.Найти(ТекущаяТочкаМаршрута) = Неопределено);
	// Оценка трудозатрат
	ТочкиОценкиТрудозатрат = Новый Массив;
	ТочкиОценкиТрудозатрат.Добавить(БизнесПроцессы.КонтрольТрудозатрат.ТочкиМаршрута.ОценкаТрудозатратАналитики);
	ТочкиОценкиТрудозатрат.Добавить(БизнесПроцессы.КонтрольТрудозатрат.ТочкиМаршрута.ОценкаТрудозатратРазработки);
	Элементы.УстановитьОценкуТрудозатрат.Видимость = Не (ТочкиОценкиТрудозатрат.Найти(ТекущаяТочкаМаршрута) = Неопределено);
	// Согласование трудозатрат
	Элементы.СогласоватьКонтрольТрудозатрат.Видимость = (ТекущаяТочкаМаршрута = БизнесПроцессы.КонтрольТрудозатрат.ТочкиМаршрута.СогласованиеФактическихТрудозатрат);
	// Проверка документации
	Элементы.ПроверитьДокументацию.Видимость = (ТекущаяТочкаМаршрута = БизнесПроцессы.ПроверкаДокументации.ТочкиМаршрута.ПроверкаДокументации);
		
	/////// Блоки верхнего уровня
	// Страницы данных по задаче
	ЭтоКонвейерОбработки = ТекущаяТочкаМаршрута = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ПроверкаСинтаксическогоКонтроля
		Или ТекущаяТочкаМаршрута = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ПроверкаПайплайна;
	Элементы.СтраницаВерсии.Видимость = Не ЭтоКонвейерОбработки;
	Элементы.ГруппаОбъекты.Видимость = Не ЭтоКонвейерОбработки;
	Элементы.ГруппаАвтотесты.Видимость = ТекущаяТочкаМаршрута = БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ПроверкаПайплайна; // здесь отличается от конвеер обработки синтаксический контроль...
	Элементы.ЗаявкиГруппаЗадачаМетеор.Видимость = Не ЭтоКонвейерОбработки;
	Элементы.ЗаявкиГруппаКонвейерОбработки.Видимость = ЭтоКонвейерОбработки;
	// Часы
	ТочкиОтображенияЧасовПоЗадаче = Новый Массив;
	ТочкиОтображенияЧасовПоЗадаче.Добавить(БизнесПроцессы.КонтрольТрудозатрат.ТочкиМаршрута.СогласованиеФактическихТрудозатрат);
	ТочкиОтображенияЧасовПоЗадаче.Добавить(БизнесПроцессы.КонтрольТрудозатрат.ТочкиМаршрута.ОценкаТрудозатратАналитики);
	ТочкиОтображенияЧасовПоЗадаче.Добавить(БизнесПроцессы.КонтрольТрудозатрат.ТочкиМаршрута.ОценкаТрудозатратРазработки);
	ТочкиОтображенияЧасовПоЗадаче.Добавить(БизнесПроцессы.ПредварительнаяПроверка.ТочкиМаршрута.ПроверкаКода);
	ТочкиОтображенияЧасовПоЗадаче.Добавить(БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПроверкаКода);
	Элементы.ГруппаЧасы.Видимость = Не (ТочкиОтображенияЧасовПоЗадаче.Найти(ТекущаяТочкаМаршрута) = Неопределено);
	// КонфликтовИзменений
	РежимыКонфликтовИзменений = Новый Массив;
	РежимыКонфликтовИзменений.Добавить(БизнесПроцессы.ПредварительнаяПроверка.ТочкиМаршрута.ПроверкаКода);
	РежимыКонфликтовИзменений.Добавить(БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПроверкаКода);
	Элементы.ГруппаКонфликтыИзменений.Видимость = Не (РежимыКонфликтовИзменений.Найти(ТекущаяТочкаМаршрута) = Неопределено);
	// Дополнения
	РежимыВидимостиДополнений = Новый Массив;
	РежимыВидимостиДополнений.Добавить(БизнесПроцессы.ПредварительнаяПроверка.ТочкиМаршрута.ПроверкаКода);
	РежимыВидимостиДополнений.Добавить(БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПроверкаКода);
	Элементы.СтраницаДополнения.Видимость = Не (РежимыВидимостиДополнений.Найти(ТекущаяТочкаМаршрута) = Неопределено);
	// Колонки таблицы Версии	
	Элементы.ВерсииПроверил.Видимость =
		(Не ТекущаяТочкаМаршрута = БизнесПроцессы.ПредварительнаяПроверка.ТочкиМаршрута.ПроверкаКода);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическимСпискам()
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Замечания.Отбор, "ИсточникЗамечаний", ИсточникЗамечаний(),,, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ИтоговыеИзменения.Отбор, "ЗадачаМетеор", Справочники.ЗадачиМетеор.ПустаяСсылка(),,, Истина);
	КоммитыПоОбъектам.Параметры.УстановитьЗначениеПараметра("ЗадачаМетеор", Справочники.ЗадачиМетеор.ПустаяСсылка()); // Инициализация параметра
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЧасыПоЗадаче(ЗадачаИсполнителя)
	
	Описание = ?(ТекущаяТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.СогласованиеАрхитектуры.ТочкаМаршрута.СогласоватьАрхитектуру"),
		"Проверка тех. проекта",
		"Аудит кода");
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗадачаМетеор", ЗадачаМетеор(ЗадачаИсполнителя));
	СтруктураПараметров.Вставить("КодРоли", КодРолиМетеорДляОтраженияЧасов());
	СтруктураПараметров.Вставить("Описание", Описание);
	ОткрытьФорму("Обработка.РаботаСЗадачами.Форма.ФормаДобавленияЧасов", СтруктураПараметров, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИсточникЗамечаний()
	
	Возврат ПредопределенноеЗначение("Перечисление.ИсточникиЗамечаний.ПроверкаКода");

КонецФункции
 
&НаСервереБезКонтекста
Функция ЗамечанияПоЗадаче(Задача, ИсточникЗамечаний)

	// Перед согласованием необходимо проверить наличие новых замечаний, и загрузить их.
	Попытка
		ЗагрузитьЗамечанияСервер(Задача);
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось загрузить замечания.");
	КонецПопытки;
	
	ЗадачаМетеор = Задачи.ЗадачаИсполнителя.ЗадачаМетеор(Задача);
	Замечания = РегистрыСведений.ЗамечанияКоммита.ЗамечанияПоЗадаче(ЗадачаМетеор, ИсточникЗамечаний);
	
	Возврат Замечания;

КонецФункции 

&НаСервереБезКонтекста
Функция URLGit(Коммит)
	Возврат Справочники.ИсторияХранилища.URLGit(Коммит);
КонецФункции

&НаСервере
Процедура ПропуститьПроверкуАПКНаСервере(ВерсияХранилища)
	
	РазрешеноПропускать = ДоступенПропускПроверкиАПК(ВерсияХранилища);
	
	Если Не РазрешеноПропускать Тогда
		ОбщегоНазначения.СообщитьПользователю("Нельзя пропустить проверку для выбранного коммита.");
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РаботаСХранилищами.ЗаписатьПоказателиВерсииХранилища(
		ВерсияХранилища,
		Новый Структура("ПроверкаКодаВручную,ПроверкаКодаВручнуюОтветственный", Истина, Пользователи.ТекущийПользователь()));
	ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Признак пропуска проверки для коммита %1 установлен.", ВерсияХранилища));
	
КонецПроцедуры

&НаСервере
Функция ДоступенПропускПроверкиАПК(ВерсияХранилища)
	
	РазрешеноПропуститьПроверку = Пользователи.ЭтоПолноправныйПользователь();
	
	Если РазрешеноПропуститьПроверку Тогда
		Возврат РазрешеноПропуститьПроверку;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
		|				КОГДА РегистрАдресации.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ВладелецСистемы)
		|					ТОГДА 9999999999
		|				КОГДА РегистрАдресации.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ВедущийПрограммист)
		|					ТОГДА &ДопустимоеКоличествоИзменений
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ДоступноДляПропуска
		|ПОМЕСТИТЬ ДоступноеКоличествоДляПропуска
		|ИЗ
		|	РегистрСведений.РегистрАдресации КАК РегистрАдресации
		|ГДЕ
		|	РегистрАдресации.Исполнитель = &Исполнитель
		|	И РегистрАдресации.РольИсполнителя В (ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ВладелецСистемы), ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ВедущийПрограммист))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ИсторияХранилищаФайлыGit.СтрокДобавлено + ИсторияХранилищаФайлыGit.СтрокУдалено) КАК КоличествоИзменений
		|ПОМЕСТИТЬ ИзмененоВВерсии
		|ИЗ
		|	Справочник.ИсторияХранилища.ФайлыGit КАК ИсторияХранилищаФайлыGit
		|ГДЕ
		|	ИсторияХранилищаФайлыGit.Ссылка = &ВерсияХранилища
		|	И ИсторияХранилищаФайлыGit.Файл ПОДОБНО ""%bsl%""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИСТИНА КАК РазрешеноПропуститьПроверку
		|ИЗ
		|	ДоступноеКоличествоДляПропуска КАК ДоступноеКоличествоДляПропуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененоВВерсии КАК ИзмененоВВерсии
		|		ПО (ДоступноеКоличествоДляПропуска.ДоступноДляПропуска > 0)
		|ГДЕ
		|	ДоступноеКоличествоДляПропуска.ДоступноДляПропуска - ЕСТЬNULL(ИзмененоВВерсии.КоличествоИзменений, 0) > 0";
	
	Запрос.УстановитьПараметр("ВерсияХранилища", ВерсияХранилища);
	Запрос.УстановитьПараметр("ДопустимоеКоличествоИзменений", Константы.КоличествоИзмененийПропускВедущимПроверкиАПК.Получить());
	Запрос.УстановитьПараметр("Исполнитель", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	РазрешеноПропуститьПроверку = Не РезультатЗапроса.Пустой();

	Возврат РазрешеноПропуститьПроверку;
	
КонецФункции

&НаСервереБезКонтекста
Функция РолиДоступенПропускПроверки()
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК Доступно
		|ИЗ
		|	РегистрСведений.РегистрАдресации КАК РегистрАдресации
		|ГДЕ
		|	РегистрАдресации.Исполнитель = &Исполнитель
		|	И РегистрАдресации.РольИсполнителя В(&РазрешенныеРоли)";
	
	РазрешенныеРоли = Новый Массив;
	РазрешенныеРоли.Добавить(Справочники.РолиИсполнителей.ВедущийПрограммист);
	РазрешенныеРоли.Добавить(Справочники.РолиИсполнителей.ВладелецСистемы);
	
	Запрос.УстановитьПараметр("Исполнитель", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("РазрешенныеРоли", РазрешенныеРоли);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДополнения(ЗадачаМетеор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадачиМетеорДополнений.ВерсияДополнения.Владелец.Конфигурация КАК Конфигурация,
		|	ЗадачиМетеорДополнений.ВерсияДополнения КАК ВерсияДополнения,
		|	ЗадачиМетеорДополнений.ВерсияДополнения.Владелец.ТипДополнения КАК ТипДополнения,
		|	СтатусыДополненийСрезПоследних.Статус КАК Статус,
		|	ЗадачиМетеорДополнений.ВерсияДополнения.Автор КАК Автор,
		|	КоммитыДополненийСрезПоследних.Период КАК ДатаКоммита,
		|	КоммитыДополненийСрезПоследних.Хеш КАК ХешКоммита,
		|	ВЫБОР
		|		КОГДА НЕ КоммитыДополненийСрезПоследних.Хеш ЕСТЬ NULL
		|				И НЕ КоммитыДополненийСрезПоследних.Хеш = """"
		|			ТОГДА &АдресРепозиторияДополнений + ""/-/commit/"" + КоммитыДополненийСрезПоследних.Хеш
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК АдресКоммита,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(РезультатыСинтаксическойПроверки.ПровереноBSLLS, ЛОЖЬ)
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(РезультатыСинтаксическойПроверки.КоличествоОшибокBSL_LS, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ПровереноBSLLS_ИндексКартинки,
		|	ЕСТЬNULL(РезультатыСинтаксическойПроверки.КоличествоОшибокBSL_LS, 0) КАК ОшибокBSL_LS
		|ИЗ
		|	РегистрСведений.ЗадачиМетеорДополнений КАК ЗадачиМетеорДополнений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДополнений.СрезПоследних КАК СтатусыДополненийСрезПоследних
		|		ПО ЗадачиМетеорДополнений.ВерсияДополнения = СтатусыДополненийСрезПоследних.ВерсияДополнения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоммитыДополнений.СрезПоследних КАК КоммитыДополненийСрезПоследних
		|		ПО ЗадачиМетеорДополнений.ВерсияДополнения = КоммитыДополненийСрезПоследних.ВерсияДополнения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыСинтаксическойПроверки КАК РезультатыСинтаксическойПроверки
		|		ПО ЗадачиМетеорДополнений.ВерсияДополнения = РезультатыСинтаксическойПроверки.ОбъектПроверки
		|ГДЕ
		|	ЗадачиМетеорДополнений.ЗадачаМетеор = &ЗадачаМетеор
		|	И ЕСТЬNULL(СтатусыДополненийСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.)) <> ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.Перенос)
		|	И НЕ ЗадачиМетеорДополнений.ВерсияДополнения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("АдресРепозиторияДополнений", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ПроектыGIT.Дополнения, "СсылкаURL"));
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
	
	Дополнения.Загрузить(Запрос.Выполнить().Выгрузить());
	КоличествоДополнений = Дополнения.Количество();
	Элементы.СтраницаДополнения.ЦветТекстаЗаголовка = ?(КоличествоДополнений > 0, WebЦвета.Красный, Новый Цвет());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтчетПоОшибкамСинтаксическойПроверкиАПК(ВерсияХранилища)
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияХранилища, "Код, Владелец.Наименование");
	Возврат АвтоматизированнаяПроверкаКода.ПолучитьДанныеПроверкиАПК(РеквизитыВерсии.Код, РеквизитыВерсии.ВладелецНаименование);
КонецФункции

#Область КешДанныхЗадач

#КонецОбласти

#Область Словари

&НаКлиентеНаСервереБезКонтекста
Функция КодРолиМетеорДляОтраженияЧасов()
	//Возврат "000000002";// Разработчик
	Возврат "000000047";// Ведущий Разработчик 000000047
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСписокОтбораТочекМаршрута()
	
	СхемаКомпоновки = Элементы.Заявки.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.Заявки.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор, "ЖелаемыйИсполнитель", Пользователи.ТекущийПользователь());
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ПроцессорВыводаРезультата = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ЗадачиИсполнителя = ПроцессорВыводаРезультата.Вывести(ПроцессорКомпоновкиДанных);
	ЗадачиИсполнителя.Свернуть("ТочкаМаршрута");
	
	ЗначениеОтключенияОтбора = ТочкаМаршрутаБезОтбора();
	ЗначенияОтбора = Новый Массив;
	ЗначенияОтбора.Добавить(ЗначениеОтключенияОтбора); 
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗначенияОтбора, ЗадачиИсполнителя.ВыгрузитьКолонку("ТочкаМаршрута"));
	Элементы.ОтборТочкаМаршрута.СписокВыбора.ЗагрузитьЗначения(ЗначенияОтбора);
	ОтборТочкаМаршрута = ЗначениеОтключенияОтбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСинтаксическойПроверки(ПроверяемаяВерсия)
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПроверяемаяВерсия", ПроверяемаяВерсия);
	Отбор = Новый Структура;
	//Отбор.Вставить("Номенклатура", Объект.Продукция);
	//Отбор.Вставить("Организация", Объект.Организация);    
	ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("АнализСинтаксическойПроверки", ПараметрыОтчета);
	ПараметрыФормы = Новый Структура("Отбор, ПользовательскиеНастройки, СформироватьПриОткрытии", Отбор, ПользовательскиеНастройки, Истина);
	ОткрытьФорму("Отчет.АнализСинтаксическойПроверки.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетАнализИзмененийСвойствОбъектов(ВерсияХранилища)
	ПериодОтчета = Новый СтандартныйПериод;
	ПериодОтчета.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПериодОтчета.ДатаНачала = '00010101';
	ПериодОтчета.ДатаОкончания = '39991031';
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Период", ПериодОтчета);
	Отбор = Новый Структура;
	Отбор.Вставить("ВерсияХранилища", ВерсияХранилища);
	ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("АнализИзмененийСвойствОбъектов", ПараметрыОтчета);
	ПараметрыФормы = Новый Структура("Отбор, ПользовательскиеНастройки, СформироватьПриОткрытии", Отбор, ПользовательскиеНастройки, Истина);
	ОткрытьФорму("Отчет.АнализИзмененийСвойствОбъектов.Форма", ПараметрыФормы);
КонецПроцедуры

&НаСервере
Функция УстановитьПользовательскиеНастройкиОтчета(ТипОтчета, СтруктураПараметров)

	ОтчетОбъект = Отчеты[ТипОтчета].Создать();

	ПользовательскиеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого ЭлПараметр Из СтруктураПараметров Цикл
		Для Каждого ПараметрСКД Из ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				Если Строка(ПараметрСКД.Параметр) = ЭлПараметр.Ключ Тогда
					ПараметрСКД.Значение = ЭлПараметр.Значение;
					ПараметрСКД.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьВОчередьФормированияИтоговыхИзменений(ЗадачаМетеор)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОперацийОбработкиОчереди.ОжидаетОбработки);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК УжеВОчереди
		|ИЗ
		|	РегистрСведений.ОчередьФормированияИтоговыхИзменений.СрезПоследних КАК ОчередьПолученияИзмененийВерсийХранилищаСрезПоследних
		|ГДЕ
		|	ОчередьПолученияИзмененийВерсийХранилищаСрезПоследних.ЗадачаМетеор = &ЗадачаМетеор
		|	И ОчередьПолученияИзмененийВерсийХранилищаСрезПоследних.Статус = &Статус";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю("Задание по формированию итоговых изменений по задаче уже в очереди.");
		Возврат;
	КонецЕсли;

	Запись = РегистрыСведений.ОчередьФормированияИтоговыхИзменений.СоздатьМенеджерЗаписи();
	Запись.Период = ТекущаяДатаСеанса();
	Запись.ЗадачаМетеор = ЗадачаМетеор;
	Запись.Статус = Перечисления.СтатусыОперацийОбработкиОчереди.ОжидаетОбработки;
	Запись.Записать();
	ОбщегоНазначения.СообщитьПользователю("Задание по формированию итоговых изменений добавлено в очередь.");
КонецПроцедуры

&НаСервереБезКонтекста
Функция НеобходимоПредложитьПередатьЗадачуДругомуИсполнителю(ЗадачаИсполнителя, ТочкаМаршрута)
	
	Если ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.ПредварительнаяПроверка.ТочкаМаршрута.ПроверкаКода") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Пользователи.Ссылка КАК Разработчик
			|ИЗ
			|	РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО ЗадачиМетеорВерсийХранилища.ВерсияХранилища.Автор = Пользователи.Код
			|ГДЕ
			|	ЗадачиМетеорВерсийХранилища.ЗадачаМетеор = &ЗадачаМетеор
			|	И ЗадачиМетеорВерсийХранилища.ЗадачаМетеор <> ЗНАЧЕНИЕ(Справочник.ЗадачиМетеор.ПустаяСсылка)
			|	И Пользователи.Ссылка = &ТекущийПользователь";
		Запрос.УстановитьПараметр("ЗадачаМетеор", Задачи.ЗадачаИсполнителя.ЗадачаМетеор(ЗадачаИсполнителя));
		Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		ТекущийПользовательЗанималсяРазработкой = Не Запрос.Выполнить().Пустой();
		Возврат ТекущийПользовательЗанималсяРазработкой;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТочкаМаршрутаБезОтбора()
	Возврат "Без отбора";
КонецФункции

#Область ИсправлениеДинСписка_КонфликтыИзменений

// TODO: Метод перенесён для корректировки. 
// из РаботаСФормамиСервер.НастроитьЭлементыФормыКонфликтыИзменений
// 
// Механизм изменён таким образом, что:
// Установка запроса дин. списка выполняется один раз при создании формы
// отображение необходимых данных регулируется отборами.
// Подсчёт строк у дин. списка проблематичен. Процедура подсчёта количества строк
// перенесена в исходном исполнении, т.к. работает быстрее, чем метод
// получения схемы с дальнейшим выполнением запроса.

&НаСервере
Процедура НастроитьЭлементыФормыКонфликтыИзменений()
	КонфликтыИзменений.ТекстЗапроса = ТекстЗапросаКонфликтыИзмененийОбъектов();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаКонфликтыИзмененийОбъектов()
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.СогласованиеПереноса
	|				ИЛИ ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.ПредварительнаяПроверка
	|			ТОГДА ЗадачаИсполнителя.БизнесПроцесс.ЗадачаМетеор
	|	КОНЕЦ КАК ЗадачаМетеор,
	|	ЗадачиМетеорВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища
	|ПОМЕСТИТЬ АктивныеЗадачиВерсииХранилища
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
	|		ПО ЗадачаИсполнителя.БизнесПроцесс.ЗадачаМетеор = ЗадачиМетеорВерсийХранилища.ЗадачаМетеор
	|			И (ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.ПредварительнаяПроверка
	|				ИЛИ ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.СогласованиеПереноса)
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И НЕ ЗадачаИсполнителя.БизнесПроцесс.ПометкаУдаления
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.БизнесПроцесс.Стартован
	|	И НЕ ЗадачаИсполнителя.БизнесПроцесс.Завершен
	|	И НЕ ЗадачиМетеорВерсийХранилища.ЗадачаМетеор = ЗНАЧЕНИЕ(Справочник.ЗадачиМетеор.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Объекты.Хранилище КАК Хранилище,
	|	Объекты.ИмяОбъекта КАК ИмяОбъекта,
	|	Объекты.ЗадачаМетеор КАК ЗадачаМетеор
	|ПОМЕСТИТЬ ИзмененныеОбъекты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсторияХранилища.Ссылка.Владелец КАК Хранилище,
	|		ИсторияХранилища.ИмяОбъекта КАК ИмяОбъекта,
	|		АктивныеЗадачиВерсииХранилища.ЗадачаМетеор КАК ЗадачаМетеор
	|	ИЗ
	|		Справочник.ИсторияХранилища.Изменены КАК ИсторияХранилища
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктивныеЗадачиВерсииХранилища КАК АктивныеЗадачиВерсииХранилища
	|			ПО ИсторияХранилища.Ссылка = АктивныеЗадачиВерсииХранилища.ВерсияХранилища
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсторияХранилища.Ссылка.Владелец,
	|		ИсторияХранилища.ИмяОбъекта,
	|		АктивныеЗадачиВерсииХранилища.ЗадачаМетеор
	|	ИЗ
	|		Справочник.ИсторияХранилища.Добавлены КАК ИсторияХранилища
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктивныеЗадачиВерсииХранилища КАК АктивныеЗадачиВерсииХранилища
	|			ПО ИсторияХранилища.Ссылка = АктивныеЗадачиВерсииХранилища.ВерсияХранилища
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсторияХранилищаУдалены.Ссылка.Владелец,
	|		ИсторияХранилищаУдалены.ИмяОбъекта,
	|		АктивныеЗадачиВерсииХранилища.ЗадачаМетеор
	|	ИЗ
	|		Справочник.ИсторияХранилища.Удалены КАК ИсторияХранилищаУдалены
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктивныеЗадачиВерсииХранилища КАК АктивныеЗадачиВерсииХранилища
	|			ПО ИсторияХранилищаУдалены.Ссылка = АктивныеЗадачиВерсииХранилища.ВерсияХранилища) КАК Объекты
	|ГДЕ
	|	Объекты.ИмяОбъекта ПОДОБНО ""%.%""
	|	И Объекты.Хранилище.ХранилищеРазработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияХранилищаПоОбъектам.Хранилище КАК Хранилище,
	|	ИсторияХранилищаПоОбъектам.ИмяОбъекта КАК ИмяОбъекта,
	|	ИсторияХранилищаПоОбъектам.ВерсияХранилища КАК ВерсияХранилища,
	|	ИсторияХранилищаПоОбъектам.Дата КАК Дата,
	|	ИсторияХранилищаПоОбъектам.ЗадачаМетеорПересечение КАК ЗадачаМетеор,
	|	ИсторияХранилищаПоОбъектам.ЗадачаМетеор КАК ЗадачаМетеорОсновная,
	|	ИсторияХранилищаПоОбъектам.Метка КАК Метка,
	|	ИсторияХранилищаПоОбъектам.Автор КАК Автор
	|ПОМЕСТИТЬ ВсеИзменения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИзмененныеОбъекты.Хранилище КАК Хранилище,
	|		ИзмененныеОбъекты.ИмяОбъекта КАК ИмяОбъекта,
	|		ИсторияХранилищаИзменены.Ссылка КАК ВерсияХранилища,
	|		ИсторияХранилищаИзменены.Ссылка.Дата КАК Дата,
	|		ИзмененныеОбъекты.ЗадачаМетеор КАК ЗадачаМетеор,
	|		ЗадачиМетеорВерсийХранилища.ЗадачаМетеор КАК ЗадачаМетеорПересечение,
	|		ИсторияХранилищаИзменены.Ссылка.Метка КАК Метка,
	|		ИсторияХранилищаИзменены.Ссылка.Автор КАК Автор
	|	ИЗ
	|		Справочник.ИсторияХранилища.Изменены КАК ИсторияХранилищаИзменены
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеОбъекты КАК ИзмененныеОбъекты
	|			ПО ИсторияХранилищаИзменены.ИмяОбъекта = ИзмененныеОбъекты.ИмяОбъекта
	|				И ИсторияХранилищаИзменены.Ссылка.Владелец = ИзмененныеОбъекты.Хранилище
	|			ЛЕВОЕ СОЕДИНЕНИЕ АктивныеЗадачиВерсииХранилища КАК АктивныеЗадачиВерсииХранилища
	|			ПО ИсторияХранилищаИзменены.Ссылка = АктивныеЗадачиВерсииХранилища.ВерсияХранилища
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
	|			ПО ИсторияХранилищаИзменены.Ссылка = ЗадачиМетеорВерсийХранилища.ВерсияХранилища
	|	ГДЕ
	|		АктивныеЗадачиВерсииХранилища.ВерсияХранилища ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИзмененныеОбъекты.Хранилище,
	|		ИзмененныеОбъекты.ИмяОбъекта,
	|		ИсторияХранилищаДобавлены.Ссылка,
	|		ИсторияХранилищаДобавлены.Ссылка.Дата,
	|		ИзмененныеОбъекты.ЗадачаМетеор,
	|		ЗадачиМетеорВерсийХранилища.ЗадачаМетеор,
	|		ИсторияХранилищаДобавлены.Ссылка.Метка,
	|		ИсторияХранилищаДобавлены.Ссылка.Автор
	|	ИЗ
	|		Справочник.ИсторияХранилища.Добавлены КАК ИсторияХранилищаДобавлены
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеОбъекты КАК ИзмененныеОбъекты
	|			ПО ИсторияХранилищаДобавлены.ИмяОбъекта = ИзмененныеОбъекты.ИмяОбъекта
	|				И ИсторияХранилищаДобавлены.Ссылка.Владелец = ИзмененныеОбъекты.Хранилище
	|			ЛЕВОЕ СОЕДИНЕНИЕ АктивныеЗадачиВерсииХранилища КАК АктивныеЗадачиВерсииХранилища
	|			ПО ИсторияХранилищаДобавлены.Ссылка = АктивныеЗадачиВерсииХранилища.ВерсияХранилища
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
	|			ПО ИсторияХранилищаДобавлены.Ссылка = ЗадачиМетеорВерсийХранилища.ВерсияХранилища
	|	ГДЕ
	|		АктивныеЗадачиВерсииХранилища.ВерсияХранилища ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИзмененныеОбъекты.Хранилище,
	|		ИзмененныеОбъекты.ИмяОбъекта,
	|		ИсторияХранилищаУдалены.Ссылка,
	|		ИсторияХранилищаУдалены.Ссылка.Дата,
	|		ИзмененныеОбъекты.ЗадачаМетеор,
	|		ЗадачиМетеорВерсийХранилища.ЗадачаМетеор,
	|		ИсторияХранилищаУдалены.Ссылка.Метка,
	|		ИсторияХранилищаУдалены.Ссылка.Автор
	|	ИЗ
	|		Справочник.ИсторияХранилища.Удалены КАК ИсторияХранилищаУдалены
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеОбъекты КАК ИзмененныеОбъекты
	|			ПО ИсторияХранилищаУдалены.ИмяОбъекта = ИзмененныеОбъекты.ИмяОбъекта
	|				И ИсторияХранилищаУдалены.Ссылка.Владелец = ИзмененныеОбъекты.Хранилище
	|			ЛЕВОЕ СОЕДИНЕНИЕ АктивныеЗадачиВерсииХранилища КАК АктивныеЗадачиВерсииХранилища
	|			ПО ИсторияХранилищаУдалены.Ссылка = АктивныеЗадачиВерсииХранилища.ВерсияХранилища
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
	|			ПО ИсторияХранилищаУдалены.Ссылка = ЗадачиМетеорВерсийХранилища.ВерсияХранилища
	|	ГДЕ
	|		АктивныеЗадачиВерсииХранилища.ВерсияХранилища ЕСТЬ NULL) КАК ИсторияХранилищаПоОбъектам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеИзменения.Хранилище КАК Хранилище,
	|	ВсеИзменения.ИмяОбъекта КАК ИмяОбъекта,
	|	МАКСИМУМ(ВсеИзменения.Дата) КАК Дата,
	|	ВсеИзменения.ЗадачаМетеорОсновная КАК ЗадачаМетеорОсновная
	|ПОМЕСТИТЬ СрезИзменений
	|ИЗ
	|	ВсеИзменения КАК ВсеИзменения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеИзменения.Хранилище,
	|	ВсеИзменения.ИмяОбъекта,
	|	ВсеИзменения.ЗадачаМетеорОсновная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеИзменения.Хранилище КАК Хранилище,
	|	ВсеИзменения.ИмяОбъекта КАК ИмяОбъекта,
	|	ВсеИзменения.ВерсияХранилища КАК Коммит,
	|	ВсеИзменения.Метка КАК Метка,
	|	ВсеИзменения.Дата КАК Дата,
	|	ВсеИзменения.Автор КАК Автор,
	|	ВсеИзменения.ЗадачаМетеор КАК ЗадачаМетеор,
	|	ВЫРАЗИТЬ(ВсеИзменения.ЗадачаМетеор.НаименованиеЗадачи КАК СТРОКА(200)) КАК НаименованиеЗадачи,
	|	Пользователи.Наименование КАК ФИО,
	|	ТекущийЭтапЗадачиМетеор.Этап КАК Этап
	|ИЗ
	|	ВсеИзменения КАК ВсеИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СрезИзменений КАК СрезИзменений
	|		ПО ВсеИзменения.ИмяОбъекта = СрезИзменений.ИмяОбъекта
	|			И ВсеИзменения.Хранилище = СрезИзменений.Хранилище
	|			И ВсеИзменения.Дата = СрезИзменений.Дата
	|			И ВсеИзменения.ЗадачаМетеорОсновная = СрезИзменений.ЗадачаМетеорОсновная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ВсеИзменения.Автор = Пользователи.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущийЭтапЗадачиМетеор КАК ТекущийЭтапЗадачиМетеор
	|		ПО ВсеИзменения.ЗадачаМетеор = ТекущийЭтапЗадачиМетеор.ЗадачаМетеор
	|ГДЕ
	|	ВсеИзменения.Метка = """"
	|	И ""###УсловиеЗадача###"" = ""###УсловиеЗадача###""
	|{ГДЕ
	|	ВсеИзменения.ЗадачаМетеор}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хранилище,
	|	ИмяОбъекта";	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокКонфликтыИзменений(ЗадачаМетеор)
	
	КоличествоКонфликтов = 0;
	Если ЗначениеЗаполнено(ЗадачаМетеор) Тогда
		УсловиеДляЗамены = "И ""###УсловиеЗадача###"" = ""###УсловиеЗадача###""";
		ДобавляемыеУсловия = "
		|И ВсеИзменения.ЗадачаМетеор = &ЗадачаМетеор";
		Запрос = Новый Запрос;
		Запрос.Текст = СтрЗаменить(ТекстЗапросаКонфликтыИзмененийОбъектов(), УсловиеДляЗамены, ДобавляемыеУсловия);
		Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
		КоличествоКонфликтов = Запрос.Выполнить().Выбрать().Количество();
	КонецЕсли;
	Элементы.ГруппаКонфликтыИзменений.Картинка = ?(КоличествоКонфликтов > 0, БиблиотекаКартинок.ОформлениеКругКрасный, БиблиотекаКартинок.ОформлениеКругПустой);
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

