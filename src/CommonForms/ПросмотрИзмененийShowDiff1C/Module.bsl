
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьКоммиты(Параметры.Коммиты);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоммиты(СписокКоммитов)

	Для каждого ЭлементСпискаКоммитов Из СписокКоммитов Цикл
		
		Коммит = ЭлементСпискаКоммитов.Значение;
		
		ЗначенияРесурсов = РегистрыСведений.ХешиGitВерсийХранилища.Получить(Новый Структура("ВерсияХранилища", Коммит));
		Хеш = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "Хеш");
		
		Проект = Коммит.Владелец.ПроектGit;
		
		Если Проект.Наименование <> "izbenkafin_develop" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКоммитов = Коммиты.Добавить();
		СтрокаКоммитов.Коммит =Коммит;
		СтрокаКоммитов.Хеш = Хеш;
		СтрокаКоммитов.Проект = Проект;
	
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	ИнициализироватьДвижок();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура HTMLДокументСформирован(Элемент)
	
	ДвижокИнициализирован = Истина;
	
	ЗаполнитьФайлыКоммита();
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыКоммита
&НаКлиенте
Процедура ФайлыКоммитаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПосмотретьИзмененияФайла();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьФайлыИзмененныеПоКоммитам(Команда)
	
	ЗаполнитьФайлыКоммита();
	
КонецПроцедуры

&НаКлиенте
Процедура СравнениеПредыдущее(Команда)
	
	//@skip-check dynamic-access-method-not-found
	РедакторКода().previousDiff();
	
КонецПроцедуры

&НаКлиенте
Процедура СравнениеСледующее(Команда)
	
	//@skip-check dynamic-access-method-not-found
	РедакторКода().nextDiff();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)
	
	Элементы = Форма.Элементы;
	
	Форма.Доступность = Форма.ДвижокИнициализирован;
	
	Элементы.КоманднаяПанельСравнение.Видимость = Форма.РежимСравнения;
	
КонецПроцедуры

#Область ОписаниеСтруктурДанных
// Конструктор списка коммитов.
// 
// Возвращаемое значение:
//  Массив из Структура - См. ОписаниеКоммита
&НаКлиенте
Функция ОписаниеСпискаКоммитов()
	
	Возврат Новый Массив;
	
КонецФункции

// Конструктор описания файла коммита.
// 
// Возвращаемое значение:
//  Структура - Описание файла коммита:
// * Файл - Строка - Имя файла
// * Хеш - Строка - Хеш коммита
// * ХешПредыдущий - Строка - Хеш предыдущего коммита
// * Проект - СправочникСсылка.ПроектыGit -Проект коммита
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеФайлаКоммита()
	
	ОписаниеФайлаКоммита = Новый Структура;
	ОписаниеФайлаКоммита.Вставить("Файл", "");
	ОписаниеФайлаКоммита.Вставить("Хеш", "");
	ОписаниеФайлаКоммита.Вставить("ХешПредыдущий", "");
	ОписаниеФайлаКоммита.Вставить("Проект", ПредопределенноеЗначение("Справочник.ПроектыGit.ПустаяСсылка"));
	
	Возврат ОписаниеФайлаКоммита;
	
КонецФункции
#КонецОбласти

// Редактор кода.
// 
// Возвращаемое значение:
//  Произвольный - Объект для взаимодействия с редактором кода
&НаКлиенте
Функция РедакторКода()
	
	//@skip-check property-return-type
	Возврат Элементы.HTML.Документ.defaultView;
	
КонецФункции

&НаКлиенте
Процедура ИнициализироватьДвижок()

	HTML = "https://salexdv.github.io/bsl_console/src/index.html";

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФайлыКоммита()
	
	ФайлыКоммита.Очистить();
	
	КоммитыКПолучению = КоммитыКПолучению();
	
	Для Каждого ОписаниеФайла Из ФайлыКоммита(КоммитыКПолучению) Цикл
		ЗаполнитьЗначенияСвойств(ФайлыКоммита.Добавить(), ОписаниеФайла);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьИзмененияФайла()
	
	ТекущиеДанные = Элементы.ФайлыКоммита.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//@skip-check dynamic-access-method-not-found
	РедакторКода().compare();
	
	ОписаниеФайлаКоммита = ОписаниеФайлаКоммита();
	ЗаполнитьЗначенияСвойств(ОписаниеФайлаКоммита, ТекущиеДанные);
	
	СодержимоеТекущее = СодержимоеФайла(ОписаниеФайлаКоммита);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ХешПредыдущий) Тогда
		ОписаниеФайлаКоммита = ОписаниеФайлаКоммита();
		ЗаполнитьЗначенияСвойств(ОписаниеФайлаКоммита, ТекущиеДанные);
		ОписаниеФайлаКоммита.Хеш = ТекущиеДанные.ХешПредыдущий;
		
		СодержимоеПредыдущее = СодержимоеФайла(ОписаниеФайлаКоммита);
		Если СодержимоеПредыдущее = СодержимоеТекущее Тогда
			СодержимоеПредыдущее = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СодержимоеПредыдущее) Тогда
		РежимСравнения = Истина;
		//@skip-check dynamic-access-method-not-found
		РедакторКода().setContent(СодержимоеПредыдущее);
		//@skip-check dynamic-access-method-not-found
		РедакторКода().compare(СодержимоеТекущее, Истина, Истина);
	Иначе
		РежимСравнения = Ложь;
		//@skip-check dynamic-access-method-not-found
		РедакторКода().setContent(СодержимоеТекущее);
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

// Список коммитов к получению
// 
// Возвращаемое значение:
//  Массив из Структура см. Описание Список коммитов:
//   * Проект - СправочникСсылка.ПроектыGit
//   * Хеш - Строка
&НаКлиенте
Функция КоммитыКПолучению()
	
	КоммитыКПолучению = ОписаниеСпискаКоммитов();
	
	Для Каждого СтрокаКоммитов Из Коммиты Цикл
		
		ОписаниеКоммита = Новый Структура;
	
		ОписаниеКоммита.Вставить("Проект", СтрокаКоммитов.Проект);
		ОписаниеКоммита.Вставить("Хеш", СтрокаКоммитов.Хеш);
		
		КоммитыКПолучению.Добавить(ОписаниеКоммита);
		
	КонецЦикла;
	
	Возврат КоммитыКПолучению;
	
КонецФункции

// Файлы коммита.
// 
// Параметры:
//  КоммитыКПолучению - Массив из Структура - см. ОписаниеКоммита
// 
// Возвращаемое значение:
//  Массив из Структура - см. ОписаниеФайлаКоммита Файлы коммита
&НаСервереБезКонтекста
Функция ФайлыКоммита(КоммитыКПолучению)
		
	ТаблицаФайлов = ТаблицаФайлов(КоммитыКПолучению);

	ФайлыКоммита = ФайлыКоммитовПоТаблице(ТаблицаФайлов);
		
	Возврат ФайлыКоммита;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФайлыКоммитовПоТаблице(ТаблицаФайлов)
	
	ФайлыКоммита = Новый Массив;

	ХешиФайлов = ХешиФайлов(ТаблицаФайлов);
	
	ТаблицаФайлов.Свернуть("Проект, Файл");
	ТаблицаФайлов.Колонки.Добавить("Хеш");
	ТаблицаФайлов.Колонки.Добавить("ХешПредыдущий");

	Для Каждого СтрокаФайла Из ТаблицаФайлов Цикл

		Проект = СтрокаФайла.Проект;
		Файл = СтрокаФайла.Файл;

		ДанныеЗапроса = ДанныеЗапроса();
		ДанныеЗапроса.Файл = Файл;

		КоммитыФайла = КоммитыФайла(ХешиФайлов, ДанныеЗапроса);

		ОписаниеФайлаКоммита = ОписаниеФайлаКоммита();
		ОписаниеФайлаКоммита.Файл = Файл;
		ОписаниеФайлаКоммита.Хеш = КоммитыФайла.Новейший;
		ОписаниеФайлаКоммита.ХешПредыдущий = КоммитыФайла.ПередСамымРанним;
		ОписаниеФайлаКоммита.Проект = Проект;
		
		ФайлыКоммита.Добавить(ОписаниеФайлаКоммита);
		
	КонецЦикла;
	
	Возврат ФайлыКоммита;
	
КонецФункции

&НаСервереБезКонтекста
Функция КоммитыФайла(ХешиФайлов, ДанныеЗапроса)
	
	КоммитыФайла = ОписаниеКоммитовФайла();
	
	Файл = ДанныеЗапроса.Файл;
	
	ХешиФайла = ХешиФайлов[Файл];
	НайденныеХеши = Новый Массив;
	
	Для Каждого КоммитФайла Из РаботаСGit_КоммитыФайла(ДанныеЗапроса) Цикл
		
		ЭтоКоммитКПолучению = Не ХешиФайла.Найти(КоммитФайла.Хеш) = Неопределено;
		
		Если ЭтоКоммитКПолучению Тогда
			
			НайденныеХеши.Добавить(КоммитФайла.Хеш);
			
			Если КоммитыФайла.Новейший = "" Тогда
				КоммитыФайла.Новейший = КоммитФайла.Хеш;
			КонецЕсли;
			КоммитыФайла.СамыйРанний = КоммитФайла.Хеш;
			КоммитыФайла.ПередСамымРанним = "";
		
		Иначе
			
			Если КоммитыФайла.ПередСамымРанним = "" И КоммитыФайла.СамыйРанний <> "" Тогда
				КоммитыФайла.ПередСамымРанним = КоммитФайла.Хеш;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ХешФайла Из ХешиФайла Цикл
		Если НайденныеХеши.Найти(ХешФайла) = Неопределено Тогда
			Сообщить("Для файла " + файл + ", не найден хеш: " + ХешФайла + " в истории");
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоммитыФайла;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКоммитовФайла()
	
	Возврат Новый Структура("Новейший, СамыйРанний, ПередСамымРанним", "", "", "");
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаФайлов(Знач КоммитыКПолучению)

	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Файл");
	ТаблицаФайлов.Колонки.Добавить("Проект");
	ТаблицаФайлов.Колонки.Добавить("Хеш");
	
	Для Каждого КоммитКПолучению Из КоммитыКПолучению Цикл

		Проект = КоммитКПолучению.Проект;
		Хеш = КоммитКПолучению.Хеш;
		
		ДанныеЗапроса = ДанныеЗапроса();
		ДанныеЗапроса.Хеш = Хеш;
		
		Для Каждого ФайлКоммита Из РаботаСGit_ФайлыКоммита(ДанныеЗапроса) Цикл
			
			Если ФайлНеОбрабатывается(ФайлКоммита) Тогда
				Продолжить; 
			КонецЕсли;
			
			СтрокаТаблицыФайлов = ТаблицаФайлов.Добавить();
			
			СтрокаТаблицыФайлов.Файл = ФайлКоммита;
			СтрокаТаблицыФайлов.Проект = Проект;
			СтрокаТаблицыФайлов.Хеш = Хеш;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаФайлов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ХешиФайлов(ТаблицаФайлов)
	
	ХешиФайлов = Новый Соответствие;
	
	Для Каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
		
		Файл = СтрокаТаблицыФайлов.Файл;
		Хеш = СтрокаТаблицыФайлов.Хеш;
		
		Если ХешиФайлов[Файл] = Неопределено Тогда
			ХешиФайлов.Вставить(Файл, Новый Массив);
		КонецЕсли;

		ХешиФайлов[Файл].Добавить(Хеш);

	КонецЦикла;
	
	Возврат ХешиФайлов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФайлНеОбрабатывается(Знач ИмяФайла)
	
	Возврат
		ИмяФайла = "src/cf/ConfigDumpInfo.xml"
			Или ИмяФайла = "src/cf/VERSION"
			Или ИмяФайла = "src/cf/dumplist.txt";

КонецФункции

// Содержимое файла.
// 
// Параметры:
//  ОписаниеФайлаКоммита - Структура - Описание файла коммита:
// * Файл - Строка 
// * Хеш - Строка 
// * Проект - СправочникСсылка.ПроектыGit 
// 
// Возвращаемое значение:
//  Строка - Содержимое файла
&НаСервереБезКонтекста
Функция СодержимоеФайла(ОписаниеФайлаКоммита)
	
	Проект = ОписаниеФайлаКоммита.Проект;
	Хеш = ОписаниеФайлаКоммита.Хеш;
	
	
	ДанныеЗапроса = ДанныеЗапроса();
	ДанныеЗапроса.Хеш = Хеш;
	ДанныеЗапроса.Файл = ОписаниеФайлаКоммита.Файл;
	
	Возврат РаботаСGit_СодержимоеФайла(ДанныеЗапроса);
	
КонецФункции

#КонецОбласти

#Область РаботаСGit
// Конструктор Данных запроса.
// 
// Возвращаемое значение:
//  Структура - Данные запроса:
// * АдресСервера - Строка - адрес сервера git
// * Токен - Строка - токен авторизации для Типа авторизации - Токен
// * КодПроекта - Число - код проекта git
// * Хеш - Строка - хеш коммита
// * Файл - Строка - Имя файла
&НаСервереБезКонтекста
Функция ДанныеЗапроса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Токен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Справочники.СерверыGIT.Автомакон);
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("АдресСервера",		"gitlab.automacon.net");
	ДанныеЗапроса.Вставить("Токен",				Токен);
	ДанныеЗапроса.Вставить("КодПроекта",		164);
	ДанныеЗапроса.Вставить("Хеш",				"");
	ДанныеЗапроса.Вставить("Файл",				"");
	
	Возврат ДанныеЗапроса;
	
КонецФункции

// Конструктор файлов коммита.
// 
// Возвращаемое значение:
//  Массив из Строка - Конструктор файлов коммита
&НаСервереБезКонтекста
Функция ОписаниеФайловКоммита() Экспорт
	
	ФайлыКоммита = Новый Массив;
	
	Возврат ФайлыКоммита;
	
КонецФункции

// Описания коммитов.
// 
// Возвращаемое значение:
//  Массив из Структура - см. РаботаСGit.ОписаниеКоммита - Описания коммитов
&НаСервереБезКонтекста
Функция ОписанияКоммитов() Экспорт
	
	Возврат Новый("Массив");
	
КонецФункции

// Описание коммита.
// 
// Возвращаемое значение:
//  Структура - Описание коммита:
// * АвторИмя - Строка
// * АвторПочтовыйАдрес - Строка
// * АвторДата - Дата
// * КоммитерИмя - Строка
// * КоммитерПочтовыйАдрес - Строка
// * КоммитерДата - Дата
// * ДатаКоммита - Дата
// * Хеш - Строка 
// * ХешКороткий - Строка
// * Сообщение - Строка 
// * Заголовок - Строка 
// * Ссылка - Строка 
&НаСервереБезКонтекста
Функция ОписаниеКоммита() Экспорт
	
	ОписаниеКоммита = Новый Структура;
	
	ОписаниеКоммита.Вставить("АвторИмя", "");
	ОписаниеКоммита.Вставить("АвторПочтовыйАдрес", "");
	ОписаниеКоммита.Вставить("АвторДата", '0001-01-01');
	ОписаниеКоммита.Вставить("КоммитерИмя", "");
	ОписаниеКоммита.Вставить("КоммитерПочтовыйАдрес", "");
	ОписаниеКоммита.Вставить("КоммитерДата", '0001-01-01');
	ОписаниеКоммита.Вставить("ДатаКоммита", '0001-01-01');
	ОписаниеКоммита.Вставить("Хеш", "");
	ОписаниеКоммита.Вставить("ХешКороткий", "");
	ОписаниеКоммита.Вставить("Сообщение", "");
	ОписаниеКоммита.Вставить("Заголовок", "");
	ОписаниеКоммита.Вставить("Ссылка", "");
	
	Возврат ОписаниеКоммита;
	
КонецФункции

// Файлы коммита.
// 
// Параметры:
//  ДанныеЗапроса - Структура - См. РаботаСGit.ДанныеЗапроса - Данные запроса:
//    * Хеш - Строка - Строка с хешем
// 
// Возвращаемое значение:
//  Массив из Строка - см. РаботаСGit.ОписаниеФайловКоммита - Файлы коммита
&НаСервереБезКонтекста
Функция РаботаСGit_ФайлыКоммита(ДанныеЗапроса) Экспорт
	
	ФайлыКоммита = ОписаниеФайловКоммита();
	
	ИзмененияКоммита = ИзмененияКоммита(ДанныеЗапроса);
	
	Для каждого Изменение Из ИзмененияКоммита Цикл
		ФайлыКоммита.Добавить(Изменение.НовыйПутьКФайлу);
	КонецЦикла;
	
	Возврат ФайлыКоммита;
	
КонецФункции

// Содержимое файла
// 
// Параметры:
//  ДанныеЗапроса - Структура - См. РаботаСGit.ДанныеЗапроса - Данные запроса:
//    * Файл - Строка - Путь к файлу
//    * Хеш - Строка - Строка с хешем
// 
// Возвращаемое значение:
//  Массив из Строка - см. РаботаСGit.ОписаниеФайловКоммита - Файлы коммита
&НаСервереБезКонтекста
Функция РаботаСGit_СодержимоеФайла(ДанныеЗапроса) Экспорт
	
	ПутьКФайлу = КодироватьСтроку(ДанныеЗапроса.Файл, СпособКодированияСтроки.КодировкаURL);
	РезультатJson = ВыполнитьЗапросGitLab(ДанныеЗапроса,  "repository/files", ПутьКФайлу, "?ref=" + ДанныеЗапроса.Хеш);
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(РезультатJson);
	Результат = ПрочитатьJSON(Чтение);

	СодержимоеФайла = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(Результат.content));
	
	Возврат СодержимоеФайла;
	
КонецФункции

// Коммиты файла
// 
// Параметры:
//  ДанныеЗапроса - Структура - См. РаботаСGit.ДанныеЗапроса - Данные запроса:
//    * Файл - Строка - Путь к файлу
//    * Хеш - Строка - Строка с хешем
// 
// Возвращаемое значение:
//  Массив из Строка - см. РаботаСGit.ОписаниеФайловКоммита - Файлы коммита
&НаСервереБезКонтекста
Функция РаботаСGit_КоммитыФайла(ДанныеЗапроса) Экспорт
	
	ПутьКФайлу = КодироватьСтроку(ДанныеЗапроса.Файл, СпособКодированияСтроки.КодировкаURL);
	РезультатJson = ВыполнитьЗапросGitLab(ДанныеЗапроса, "repository/commits", "?path=", ПутьКФайлу);

	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(РезультатJson);
	Коммиты = ПрочитатьJSON(Чтение); // Массив хешей
	
	ОписанияКоммитов = ОписанияКоммитов();
	Для Каждого Коммит Из Коммиты Цикл
		
		ОписаниеКоммита = ОписаниеКоммита();
		
		ОписаниеКоммита.Хеш = Коммит.id;
		ОписаниеКоммита.ХешКороткий = Коммит.short_id;
		ОписаниеКоммита.ДатаКоммита = ПрочитатьДатуJSON(Коммит.created_at, ФорматДатыJSON.ISO);
		ОписаниеКоммита.Заголовок = Коммит.title;
		ОписаниеКоммита.Сообщение = Коммит.message;
		ОписаниеКоммита.АвторПочтовыйАдрес = Коммит.author_email;
		ОписаниеКоммита.АвторИмя = Коммит.author_name;
		ОписаниеКоммита.АвторДата = ПрочитатьДатуJSON(Коммит.authored_date, ФорматДатыJSON.ISO);
		ОписаниеКоммита.КоммитерДата = ПрочитатьДатуJSON(Коммит.committed_date, ФорматДатыJSON.ISO);
		ОписаниеКоммита.КоммитерПочтовыйАдрес = Коммит.committer_email;
		ОписаниеКоммита.КоммитерИмя = Коммит.committer_name;
		ОписаниеКоммита.Ссылка = Коммит.web_url;
		
		ОписанияКоммитов.Добавить(ОписаниеКоммита);
		
	КонецЦикла;

	Возврат ОписанияКоммитов;
	
КонецФункции

// Изменения коммита.
// 
// Параметры:
//  ДанныеЗапроса - Структура - см. РаботаСGit.ДанныеЗапроса Данные запроса:
//    * Хеш - Строка
// 
// Возвращаемое значение:
//  Массив из Структура - см. РаботаСGitGiltab.ОписаниеИзменения -  Изменения коммита
&НаСервереБезКонтекста
Функция ИзмененияКоммита(ДанныеЗапроса) Экспорт
	
	ИзмененияКоммита = СписокИзмененийКоммита();
	
	РезультатJson = ВыполнитьЗапросGitLab(ДанныеЗапроса, "repository/commits", ДанныеЗапроса.Хеш, "/diff");
	
	Если РезультатJson = "" Тогда
		Возврат ИзмененияКоммита;
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(РезультатJson);
	СписокИзменений = ПрочитатьJSON(Чтение);
	
	Для Каждого Изменение Из СписокИзменений Цикл
		
		ОписаниеИзменения = ОписаниеИзменения();
		
		ОписаниеИзменения.Изменение = Изменение.diff; 
		ОписаниеИзменения.НовыйПутьКФайлу = Изменение.new_path; 
		ОписаниеИзменения.СтарыйПутьКФайлу = Изменение.old_path; 
		ОписаниеИзменения.ФайлНовый = Изменение.new_file; 
		ОписаниеИзменения.ФайлПереименован = Изменение.renamed_file; 
		ОписаниеИзменения.ФайлУдален = Изменение.deleted_file; 
		
		ИзмененияКоммита.Добавить(ОписаниеИзменения);
		
	КонецЦикла;
		
	Возврат ИзмененияКоммита;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Список изменений коммита.
// 
// Возвращаемое значение:
//  Массив из Структура - См. ОписаниеИзменения -  Список изменений коммита
&НаСервереБезКонтекста
Функция СписокИзмененийКоммита()
	
	СписокИзмененийКоммита = Новый Массив;
	
	Возврат СписокИзмененийКоммита;
	
КонецФункции

// Описание изменения.
// 
// Возвращаемое значение:
//  Структура - Описание изменения:
// * Изменение - Строка - изменения в файлах в формате diff git
// * НовыйПутьКФайлу - Строка - новый путь к файлу
// * СтарыйПутьКФайлу - Строка - старый путь к файлу
// * ФайлНовый - Булево - файл был добавлен
// * ФайлПереименован - Булево - файл был переименован
// * ФайлУдален - Булево - файл был удален
&НаСервереБезКонтекста
Функция ОписаниеИзменения() Экспорт
	
	ОписаниеИзменения = Новый Структура;
	
	ОписаниеИзменения.Вставить("Изменение", "");
	ОписаниеИзменения.Вставить("НовыйПутьКФайлу", "");
	ОписаниеИзменения.Вставить("СтарыйПутьКФайлу", "");
	ОписаниеИзменения.Вставить("ФайлНовый", Ложь);
	ОписаниеИзменения.Вставить("ФайлПереименован", Ложь);
	ОписаниеИзменения.Вставить("ФайлУдален", Ложь);
	
	Возврат ОписаниеИзменения;
	
КонецФункции

// Выполнить запрос git lab.
// 
// Параметры:
//  ДанныеЗапроса - Структура - см. РаботаСGit.ДанныеЗапроса - Данные запроса:
//    * АдресСервера - Строка
//    * Токен - Строка
//    * КодПроекта - Число
//  КомандаGitLab  - строка - Команда git lab
//  ПараметрКоманды - Строка - Параметр команды
//  ДополнительныеПараметры  - Строка - Дополнительные параметры
// 
// Возвращаемое значение:
//  Строка - Выполнить запрос git lab
&НаСервереБезКонтекста
Функция ВыполнитьЗапросGitLab(ДанныеЗапроса, КомандаGitLab, ПараметрКоманды, ДополнительныеПараметры)

	Результат = "";
	
	Соединение = Новый HTTPСоединение(ДанныеЗапроса.АдресСервера, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL);
	АдресРесурса = СтрШаблон("api/v4/projects/%1/%2/%3%4",
		ДанныеЗапроса.КодПроекта,
		КомандаGitLab,
		ПараметрКоманды,
		ДополнительныеПараметры);
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	Запрос.Заголовки.Вставить("PRIVATE-TOKEN", ДанныеЗапроса.Токен);
	
	Ответ = Соединение.Получить(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
	
		Попытка
		
			Результат = Ответ.ПолучитьТелоКакСтроку();
			
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Gitlab.API", УровеньЖурналаРегистрации.Ошибка, , , АдресРесурса + "
				|" +ОписаниеОшибки);
			
			ВызватьИсключение ОписаниеОшибки;
		
		КонецПопытки;
		
	Иначе
		
		Попытка
		
			ОписаниеОшибки = Ответ.ПолучитьТелоКакСтроку();
			ЗаписьЖурналаРегистрации("Gitlab.API", УровеньЖурналаРегистрации.Ошибка, , , АдресРесурса + "
				|" +ОписаниеОшибки);
		
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Gitlab.API", УровеньЖурналаРегистрации.Ошибка, , , АдресРесурса + "
				|" +ОписаниеОшибки);
		
		КонецПопытки;
			
		ВызватьИсключение ОписаниеОшибки;
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти
