
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТолькоМои = Истина;
	ТолькоАктивные = Истина;
	
	УстановитьОтборДинамическимСпискам();
	УстановитьВидимостьДоступность();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбновитьДанныеМониторинга", 30, Ложь);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицы_ИсторияХранилища

&НаСервереБезКонтекста
Процедура ИсторияХранилищаПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого СтрокаСписка Из Строки Цикл
		
		ДанныеСтроки = СтрокаСписка.Значение.Данные;
		Если ДанныеСтроки.Свойство("СсылкаЗадачиМетеор")
			И ДанныеСтроки.Свойство("ЗадачаМетеор") Тогда
		
			ДанныеСтроки.СсылкаЗадачиМетеор = Справочники.ЗадачиМетеор.URLЗадачиМетеор(ДанныеСтроки.ЗадачаМетеор);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияХранилищаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.ИсторияХранилищаКоличествоОшибокBSL_LS Тогда
		СтандартнаяОбработка = Ложь;
		//РезультатПроверки = ОтчетПоОшибкамСинтаксическойПроверки(Элемент.ТекущиеДанные.Ссылка);
		//РезультатПроверки.Показать("Результат проверки BSL-LS");
		ОткрытьОтчетСинтаксическойПроверки(Элемент.ТекущиеДанные.Ссылка);
	ИначеЕсли Поле = Элементы.ИсторияХранилищаКоличествоОшибокАПК Тогда
		СтандартнаяОбработка = Ложь;
		//РезультатПроверки = ОтчетПоОшибкамСинтаксическойПроверкиАПК(Элемент.ТекущиеДанные.Ссылка);
		//РезультатПроверки.Показать("Результат проверки АПК");
		ОткрытьОтчетСинтаксическойПроверки(Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗадачаМетеорПриИзменении(Элемент)
	
	ТолькоАктивные = Не ЗначениеЗаполнено(ЗадачаМетеор);
	Если ЗначениеЗаполнено(ЗадачаМетеор) Тогда
		ТолькоМои = Ложь;
	КонецЕсли;
	УстановитьОтборДинамическимСпискам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоМоиПриИзменении(Элемент)
	
	УстановитьОтборДинамическимСпискам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоАктивныеПриИзменении(Элемент)
	
	УстановитьОтборДинамическимСпискам();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеречитатьКоммит(Команда)
	
	ПеречитатьКоммитНаСервере(Элементы.ИсторияХранилища.ТекущаяСтрока);
	
	Элементы.ИсторияХранилища.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьКоммитНаСервере(Коммит)
	
	Если Не ЗначениеЗаполнено(Коммит) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РаботаСХранилищами.ОбновитьВерсиюИсторииХранилища(Коммит);
	
	// Обновление задачи при перечитывании коммита
	ЗначенияРесурсов = РегистрыСведений.ЗадачиМетеорВерсийХранилища.Получить(Новый Структура("ВерсияХранилища", Коммит));
	ЗадачаМетеорКоммита = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "ЗадачаМетеор");
	РеквизитыКоммита = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Коммит, "Комментарий");
	НомерЗадачи = РаботаСДаннымиМетеор.НомерЗадачиИзСтроки(РеквизитыКоммита.Комментарий);
	ЗадачаМетеор = Справочники.ЗадачиМетеор.ЗадачаМетеор(НомерЗадачи);
	Если Не ЗадачаМетеор = ЗадачаМетеорКоммита Тогда
		РаботаСХранилищами.ЗаписатьЗадачуВерсииХранилища(Коммит, ЗадачаМетеор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСогласованиеЗаявок(Команда)
	
	ОткрытьФорму("Обработка.РаботаСЗадачами.Форма.Форма");
	
КонецПроцедуры

#КонецОбласти
#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ОткрытьСогласованиеЗаявок.Видимость = ПравоДоступа("Просмотр", Метаданные.Обработки.РаботаСЗадачами);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Нет задачи метеор
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияХранилища.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор, "ИсторияХранилища.ЗадачаМетеор", , ВидСравненияКомпоновкиДанных.НеЗаполнено,, Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Томатный);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическимСпискам()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ИсторияХранилища.Отбор.Элементы.Очистить();
	Если ТолькоМои Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ИсторияХранилища.Отбор, "ТекущийПользователь", ТекущийПользователь);
	КонецЕсли;
	Если ТолькоАктивные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ИсторияХранилища.Отбор, "Статус", Перечисления.СтатусыИсторииХранилищ.Перенесено, ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗадачаМетеор) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ИсторияХранилища.Отбор, "ЗадачаМетеор", ЗадачаМетеор);
	КонецЕсли;
	
	ПредварительнаяПроверка.Отбор.Элементы.Очистить();
	Если ТолькоМои Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПредварительнаяПроверка.Отбор, "ТекущийПользователь", ТекущийПользователь);
	КонецЕсли;
	Если ТолькоАктивные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПредварительнаяПроверка.Отбор, "Завершен", Ложь);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗадачаМетеор) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПредварительнаяПроверка.Отбор, "ЗадачаМетеор", ЗадачаМетеор);
	КонецЕсли;
	
	СогласованиеПереноса.Отбор.Элементы.Очистить();
	Если ТолькоМои Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СогласованиеПереноса.Отбор, "ТекущийПользователь", ТекущийПользователь);
	КонецЕсли;
	Если ТолькоАктивные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СогласованиеПереноса.Отбор, "Завершен", Ложь);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗадачаМетеор) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СогласованиеПереноса.Отбор, "ЗадачаМетеор", ЗадачаМетеор);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СтатистикаМониторинга, "ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПредварительнаяПроверка, "ТекущийПользователь", ТекущийПользователь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СогласованиеПереноса, "ТекущийПользователь", ТекущийПользователь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИсторияХранилища, "ТекущийПользователь", ТекущийПользователь);
	
КонецПроцедуры

Функция ГруппаОтбора(Коллекция, ТипГруппы) Экспорт
	
	ГруппаОтбора = Коллекция.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппы;
	ГруппаОтбора.Использование = Истина;
	Возврат ГруппаОтбора;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОбновитьДанныеМониторинга()
	Попытка
		Элементы.СтатистикаМониторинга.Обновить();
	Исключение
		ОтключитьОбработчикОжидания("ОбновитьДанныеМониторинга");
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтчетПоОшибкамСинтаксическойПроверки(ВерсияХранилища)
	Возврат СинтаксическаяПроверкаBSLLS.ОшибкиПоКоммиту(ВерсияХранилища);
КонецФункции

&НаСервереБезКонтекста
Функция ОтчетПоОшибкамСинтаксическойПроверкиАПК(ВерсияХранилища)
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияХранилища, "Код, Владелец.Наименование");
	Возврат АвтоматизированнаяПроверкаКода.ПолучитьДанныеПроверкиАПК(РеквизитыВерсии.Код, РеквизитыВерсии.ВладелецНаименование);
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетСинтаксическойПроверки(ПроверяемаяВерсия)
    ПараметрыОтчета = Новый Структура;
    ПараметрыОтчета.Вставить("ПроверяемаяВерсия", ПроверяемаяВерсия);
    Отбор = Новый Структура;
	//Отбор.Вставить("Номенклатура", Объект.Продукция);
	//Отбор.Вставить("Организация", Объект.Организация);    
    ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("АнализСинтаксическойПроверки", ПараметрыОтчета);
    ПараметрыФормы = Новый Структура("Отбор, ПользовательскиеНастройки, СформироватьПриОткрытии", Отбор, ПользовательскиеНастройки, Истина);
    ОткрытьФорму("Отчет.АнализСинтаксическойПроверки.Форма", ПараметрыФормы); 
КонецПроцедуры

&НаСервере
Функция УстановитьПользовательскиеНастройкиОтчета(ТипОтчета,СтруктураПараметров)
    СтруктураНастроек = Новый Структура;
    ОтчетОбъект = Отчеты[ТипОтчета].Создать();
    
    ПользовательскиеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
    Для Каждого ЭлПараметр  Из СтруктураПараметров Цикл
        Для Каждого ПараметрСКД Из ПользовательскиеНастройки.Элементы Цикл
            Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда  
                Если Строка(ПараметрСКД.Параметр) = ЭлПараметр.Ключ Тогда 
                    ПараметрСКД.Значение = ЭлПараметр.Значение;
                    ПараметрСКД.Использование = Истина;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;    
    КонецЦикла;
        
    Возврат ПользовательскиеНастройки;
КонецФункции

#КонецОбласти
