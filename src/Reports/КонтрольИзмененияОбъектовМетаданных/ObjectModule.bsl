#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СведенияОВнешнейОбработке
// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
		
	Мета = ЭтотОбъект.Метаданные();
	Версия = Мета.Комментарий;
	ВерсияБСП = "3.1.7.82";
	ТекущаяВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Версия = Версия;
	ПараметрыРегистрации.Наименование = Мета.Представление();
	ПараметрыРегистрации.Информация = Мета.Представление();
	ПараметрыРегистрации.Назначение.Добавить("Подсистема.ТехническийПроект");
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "_" + Мета.Представление();
	НоваяКоманда.Идентификатор = Мета.ПолноеИмя();
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции
#КонецОбласти

#Область ВариантыОтчетов
#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СхемаКомпоновки = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ВнешниеНаборыДанных = Новый Структура;
    ВнешниеНаборыДанных.Вставить("ОтветственныеПодсистем", ОтветственныеПодсистем());
	
	КомпановщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;    
	МакетКомпановки = КомпановщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпановки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ОтчетПустой = ДокументРезультат.ВысотаТаблицы <= 8;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОтветственныеПодсистем()
	
	Ответственные = Новый ТаблицаЗначений;
	Ответственные.Колонки.Добавить("Подсистема", Новый ОписаниеТипов("СправочникСсылка.Подсистемы"));
	Ответственные.Колонки.Добавить("Конфигурация", Новый ОписаниеТипов("СправочникСсылка.Конфигурации"));
	Ответственные.Колонки.Добавить("Ответственные", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	ИмяВременнойТаблицыПотомков = "ИерархияПотомков";
	ТекстВТПотомки = ТранзитивноеЗамыкание("Подсистемы", 7, ИмяВременнойТаблицыПотомков);
	ТекстЗапроса =
		ТекстВТПотомки +
		"ВЫБРАТЬ
		|	ОтветственныеПоПодсисетмамСрезПоследних.Подсистема КАК Подсистема,
		|	ПРЕДСТАВЛЕНИЕ(ОтветственныеПоПодсисетмамСрезПоследних.Ответственный) КАК Ответственный,
		|	ОтветственныеПоПодсисетмамСрезПоследних.Подсистема.Владелец КАК Конфигурация
		|ПОМЕСТИТЬ ОтветственныеПоПодсистемам
		|ИЗ
		|	РегистрСведений.ОтветственныеПоПодсисетмам.СрезПоследних КАК ОтветственныеПоПодсисетмамСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка),
		|	ПРЕДСТАВЛЕНИЕ(ОтветственныеПоКонфигурациямСрезПоследних.Ответственный),
		|	ОтветственныеПоКонфигурациямСрезПоследних.Конфигурация
		|ИЗ
		|	РегистрСведений.ОтветственныеПоКонфигурациям.СрезПоследних КАК ОтветственныеПоКонфигурациямСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтветственныеПоПодсистемам.Ответственный КАК Ответственный,
		|	ИмяВременнойТаблицыПотомков.Потомок КАК Подсистема,
		|	ОтветственныеПоПодсистемам.Конфигурация КАК Конфигурация
		|ПОМЕСТИТЬ ВсеОтветственные
		|ИЗ
		|	ИмяВременнойТаблицыПотомков КАК ИмяВременнойТаблицыПотомков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтветственныеПоПодсистемам КАК ОтветственныеПоПодсистемам
		|		ПО ИмяВременнойТаблицыПотомков.Предок = ОтветственныеПоПодсистемам.Подсистема
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтветственныеПоПодсистемам.Ответственный,
		|	ОтветственныеПоПодсистемам.Подсистема,
		|	ОтветственныеПоПодсистемам.Конфигурация
		|ИЗ
		|	ОтветственныеПоПодсистемам КАК ОтветственныеПоПодсистемам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеОтветственные.Ответственный КАК Ответственный,
		|	ВсеОтветственные.Подсистема КАК Подсистема,
		|	ВсеОтветственные.Конфигурация КАК Конфигурация
		|ИЗ
		|	ВсеОтветственные КАК ВсеОтветственные
		|ИТОГИ ПО
		|	Конфигурация,
		|	Подсистема";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицыПотомков", ИмяВременнойТаблицыПотомков);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаКонфигурация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКонфигурация.Следующий() Цикл
		ВыборкаПодсистема = ВыборкаКонфигурация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодсистема.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаПодсистема.Выбрать();
			ОтветственныеПодсистемы = Новый Массив;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ОтветственныеПодсистемы.Добавить(ВыборкаДетальныеЗаписи.Ответственный);
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтветственныеПодсистемы);
			СтрОтветственные = Ответственные.Добавить();
			СтрОтветственные.Подсистема = ВыборкаПодсистема.Подсистема;
			СтрОтветственные.Конфигурация = ВыборкаПодсистема.Конфигурация;
			СтрОтветственные.Ответственные = СтрСоединить(ОтветственныеПодсистемы, "; ");
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ответственные;
	
КонецФункции

Функция ТранзитивноеЗамыкание(ИмяСправочника, МаксимальнаяДлинаПути, ИмяВременнойТаблицы = "") Экспорт

    Пролог = "ВЫБРАТЬ
			|	Родитель НачалоДуги, Ссылка КонецДуги
			|ПОМЕСТИТЬ ЗамыканияДлины1
			|ИЗ Справочник.Номенклатура
            |ГДЕ
			|	Родитель <> Значение(Справочник.Номенклатура.ПустаяСсылка)
			|
            |ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Ссылка, Ссылка
			|ИЗ Справочник.Номенклатура;
			|/////////////////////////////////////////////////////
			|";

    Рефрен = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПерваяДуга.НачалоДуги, ВтораяДуга.КонецДуги
			|ПОМЕСТИТЬ ЗамыканияДлины#2
			|ИЗ ЗамыканияДлины#1 КАК ПерваяДуга
            |ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗамыканияДлины#1 КАК ВтораяДуга
			|	ПО ПерваяДуга.КонецДуги = ВтораяДуга.НачалоДуги;
			|//////////////////////////////////////////////////////////////
            | УНИЧТОЖИТЬ ЗамыканияДлины#1;
			|//////////////////////////////////////////////////////////////
			|";

    Эпилог = "ВЫБРАТЬ
			|	НачалоДуги Предок, КонецДуги Потомок
			|%ПОМЕСТИТЬ ИмяВременнойТаблицы%
			|ИЗ ЗамыканияДлины#2
			|ГДЕ НачалоДуги <> КонецДуги
			|";
	Эпилог = СтрЗаменить(Эпилог, "%ПОМЕСТИТЬ ИмяВременнойТаблицы%", ?(ИмяВременнойТаблицы = "", "", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы));
	Эпилог = ?(ИмяВременнойТаблицы = "", Эпилог, Эпилог + ";" + Символы.ПС);
	
	
	ЧастиЗапроса = Новый Массив;
    ЧастиЗапроса.Добавить(СтрЗаменить(Пролог, "Номенклатура", ИмяСправочника));
    МаксимальнаяДлинаЗамыканий = 1;

    Пока МаксимальнаяДлинаЗамыканий < МаксимальнаяДлинаПути Цикл
       ЧастиЗапроса.Добавить(СтрЗаменить(СтрЗаменить(Рефрен, "#1", Формат(МаксимальнаяДлинаЗамыканий, "ЧГ=0")), "#2", Формат(2 * МаксимальнаяДлинаЗамыканий, "ЧГ=0")));
       МаксимальнаяДлинаЗамыканий = 2 * МаксимальнаяДлинаЗамыканий
    КонецЦикла;

    ЧастиЗапроса.Добавить(СтрЗаменить(Эпилог, "#2", Формат(МаксимальнаяДлинаЗамыканий, "ЧГ=0")));
	
    Возврат СтрСоединить(ЧастиЗапроса, Символы.ПС);

КонецФункции

#КонецОбласти

#Иначе
  ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
