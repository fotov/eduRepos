#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СведенияОВнешнейОбработке
// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
		
	Мета = ЭтотОбъект.Метаданные();
	Версия = Мета.Комментарий;
	ВерсияБСП = "3.1.7.82";
	ТекущаяВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Версия = Версия;
	ПараметрыРегистрации.Наименование = Мета.Представление();
	ПараметрыРегистрации.Информация = Мета.Представление();
	//ПараметрыРегистрации.Назначение.Добавить("Подсистема.Дополнения");
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "_" + Мета.Представление();
	НоваяКоманда.Идентификатор = Мета.ПолноеИмя();
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции
#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СхемаКомпоновки = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	//База = Неопределено;
	//ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиКомпоновки.Отбор, "База");
	//Если ЭлементыОтбора.Количество() 
	//		И ЭлементыОтбора[0].Использование 
	//		И ЭлементыОтбора[0].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
	//	База = ЭлементыОтбора[0].ПравоеЗначение;
	//КонецЕсли;
	//
	//ПараметрТипДополнения = ОтчетыКлиентСервер.НайтиПараметр(НастройкиКомпоновки, Неопределено, "ТипДополнения");
	//ТипДополнения = ПараметрТипДополнения.Значение;
	//
	//СведенияОДополнениях = СведенияОДополнениях(База, ТипДополнения);
	
	ПараметрПроверяемаяВерсия = ОтчетыКлиентСервер.НайтиПараметр(НастройкиКомпоновки, Неопределено, "ПроверяемаяВерсия");
	ПроверяемаяВерсия = ПараметрПроверяемаяВерсия.Значение;
	
	ВнешниеНаборыДанных = Новый Структура;
    ВнешниеНаборыДанных.Вставить("РезультатыПроверки", РезультатПроверкиВерсииХранилища(ПроверяемаяВерсия));
	
	КомпановщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;    
	МакетКомпановки = КомпановщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпановки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РезультатПроверкиВерсииХранилища(ВерсияХранилища) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ДанныеПроверки = КонструкторДанныхПроверкиВерсииХранилища();
	
	// БСЛ-ЛС
	ИмяСервера = "izb-app20";
	АдресРесурса = ИмяСервера + "/bsl-ls/hs/SyntaxCheck/GetErrors";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХешиGitВерсийХранилища.Хеш КАК Хеш
		|ИЗ
		|	РегистрСведений.ХешиGitВерсийХранилища КАК ХешиGitВерсийХранилища
		|ГДЕ
		|	ХешиGitВерсийХранилища.ВерсияХранилища = &ОбъектПроверки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КоммитыДополненийСрезПоследних.Хеш
		|ИЗ
		|	РегистрСведений.КоммитыДополнений.СрезПоследних КАК КоммитыДополненийСрезПоследних
		|ГДЕ
		|	КоммитыДополненийСрезПоследних.ВерсияДополнения = &ОбъектПроверки";
	Запрос.УстановитьПараметр("ОбъектПроверки", ВерсияХранилища);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("is_data_format", "true");
		ОбъектТелаЗапроса = Новый Структура("CommitHash", Выборка.Хеш);
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Json", ОбъектТелаЗапроса);
		Попытка
			Ответ = КоннекторHTTP.Get(АдресРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
			Если Ответ.КодСостояния = 200 Тогда
				ОтветБСЛ_ЛС = КоннекторHTTP.КакJson(Ответ, Новый Структура("ПрочитатьВСоответствие", Ложь));
				Для Каждого СтрокаПроверки Из ОтветБСЛ_ЛС Цикл
					ЗаполнитьЗначенияСвойств(ДанныеПроверки.Добавить(), СтрокаПроверки);
				КонецЦикла;
			Иначе
				ОтветБСЛ_ЛС = КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8);
				ОбщегоНазначения.СообщитьПользователю("Ошибка получения результата проверки BSL-LS: " + ОтветБСЛ_ЛС);
			КонецЕсли;
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Данные проверки BSL-LS не обнаружены.");
		КонецПопытки;
	КонецЕсли;
	
	// АПК
	Если ТипЗнч(ВерсияХранилища) = Тип("СправочникСсылка.ИсторияХранилища") Тогда
		УстановитьПривилегированныйРежим(Истина);
		АдресРесурса = Константы.АдресСервераАПК.Получить() + "/apk/hs/apk/checkinfo";
		ИмяПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПК", "Пользователь");
		Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПК", "Пароль");
		ПараметрыАутентификации = Новый Структура("Пользователь, Пароль", ИмяПользователя, Пароль);
		РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияХранилища, "Код, Владелец.Наименование");
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("StorageVersionNumber", РеквизитыВерсии.Код);
		ПараметрыЗапроса.Вставить("ConfigurationName", РеквизитыВерсии.ВладелецНаименование);
		ПараметрыЗапроса.Вставить("is_data_format", "true");
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
		ДополнительныеПараметры.Вставить("Аутентификация", ПараметрыАутентификации);
		ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", Новый Структура("ПрочитатьВСоответствие", Ложь));
		Попытка
			ОтветАПК = КоннекторHTTP.GetJson(АдресРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
			Для Каждого СтрокаПроверки Из ОтветАПК Цикл
				ЗаполнитьЗначенияСвойств(ДанныеПроверки.Добавить(), СтрокаПроверки);
			КонецЦикла;
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Данные проверки АПК не обнаружены.");
		КонецПопытки;
	КонецЕсли;
	
	Возврат ДанныеПроверки;
КонецФункции 
 
Функция КонструкторДанныхПроверкиВерсииХранилища()
	Конструктор = Новый ТаблицаЗначений;
	Конструктор.Колонки.Добавить("Правило", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	Конструктор.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Конструктор.Колонки.Добавить("Уточнение", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	Конструктор.Колонки.Добавить("Критичность", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	Конструктор.Колонки.Добавить("МестоОбнаружения", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	Конструктор.Колонки.Добавить("Объект", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	Возврат Конструктор;
КонецФункции

#КонецОбласти

#Иначе
  ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
