#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СведенияОВнешнейОбработке
// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
		
	Мета = ЭтотОбъект.Метаданные();
	Версия = Мета.Комментарий;
	ВерсияБСП = "3.1.7.82";
	ТекущаяВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Версия = Версия;
	ПараметрыРегистрации.Наименование = Мета.Представление();
	ПараметрыРегистрации.Информация = Мета.Представление();
	ПараметрыРегистрации.Назначение.Добавить("Подсистема.ПереносИзменений");
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "_" + Мета.Представление();
	НоваяКоманда.Идентификатор = Мета.ПолноеИмя();
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции
#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрПериод = ОтчетыКлиентСервер.НайтиПараметр(НастройкиКомпоновки, Неопределено, "ПериодФормирования");
	ПериодФормирования = ПараметрПериод.Значение;
	ИзмененияОбъетов = Новый ТаблицаЗначений();
	ИзмененияОбъетовПоМесяцам = Новый ТаблицаЗначений();
	
	Если ПериодФормирования = "День" Тогда
		ИзмененияОбъетов = ИзмененияОбъетов();
		ИмяНабора = "ИзмененияОбъетов";
	ИначеЕсли ПериодФормирования = "Месяц" Тогда
		ПараметрМесяц = ОтчетыКлиентСервер.НайтиПараметр(НастройкиКомпоновки, Неопределено, "Месяц");
		Месяц = ПараметрМесяц.Значение;		
		ИзмененияОбъетовПоМесяцам = ИзмененияОбъетовПоМесяцу(Месяц);
		ИмяНабора = "ИзмененияОбъетовПоМесяцам";
	КонецЕсли;
	
	// Чтобы не было ошибки из-за разных полей в наборах, а заполнен будет только один набор.
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	КоличествоНаборов = СхемаКомпоновкиДанных.НаборыДанных.Количество();
	Для Индекс = -(КоличествоНаборов - 1) По 0 Цикл
		Если Не СхемаКомпоновкиДанных.НаборыДанных[-Индекс].Имя = ИмяНабора Тогда
			СхемаКомпоновкиДанных.НаборыДанных.Удалить(СхемаКомпоновкиДанных.НаборыДанных[-Индекс]);
		КонецЕсли;
	КонецЦикла;
	ВнешниеНаборыДанных = Новый Структура;
    ВнешниеНаборыДанных.Вставить("ИзмененияОбъетов", ИзмененияОбъетов);
    ВнешниеНаборыДанных.Вставить("ИзмененияОбъетовПоМесяцам", ИзмененияОбъетовПоМесяцам);
	КомпановщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;    
	МакетКомпановки = КомпановщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпановки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Изменения объектов за предыдущий день.
//Сервер: SRV-SQL20
//База: CICD
//Процедура: Report.ChangedObjectsViaGitLab
//Пример вызова: exec Report.ChangedObjectsViaGitLab
//
//Возвращаемые Поля:
//1) ProjectName - имя проекта, оно же имя базы
//2) MergeRequestAuthor - автор мерж реквеста
//3) MergeRequestURL - ссылка на сам мержреквест в ГитЛабе
//4) MergeRequestTitle - наименование Мерж реквеста
//5) MergeRequestDescription - описание мерж реквеста
//6) ReleaseDate - дата и время релиза(UTC)
//7) AddedObjects - список добавленных  объектов через разделитель ;
//8) ModifiedObjects - список измененных объектов через разделитель ;
//9) RemovedObjects - список удаленных объектов через разделитель ;
//10) NoteCount - количество замечаний
//11) BranchName - имя ветки гита
//12) PossibleMeteorTask - предполагаемый номер задачи в метеоре
//
Функция ИзмененияОбъетов()
	
	ИмяХП = "Report.ChangedObjectsViaGitLab";
	СерверБазы = "SRV-SQL20";
	ИмяБазы = "CICD";
	ИмяСервераБазы = "" + СерверБазы + "/" + ИмяБазы;
	//ИмяПользователя = "ххх";
	//Пароль = "ххх";
	РежимСервис = БлокировкаРаботыСВнешнимиРесурсамиУКПовтИсп.ЭтоКопияБазы();
	ПараметрыХП = Новый Структура;
	//ПараметрыХП.Вставить("beginDate", НачалоПериода);
	//ПараметрыХП.Вставить("endDate", КонецПериода);
	Результат = ВнешниеДанные.ПроксиВыполнитьХранимуюПроцедуру(
		ИмяХП,
		ПараметрыХП,
		ИмяСервераБазы,
		"Отчет.КонтрольИзмененнныхОбъектовSQL.МодульОбъекта",
		Новый Структура("Сервис", РежимСервис));
		//Новый Структура("ЛогинSQL, ПарольSQL, Сервис", ИмяПользователя, Пароль, РежимСервис));
		
	// Заполняем аналитика и разработчика из предполагаемой задачи Метеор
	Результат.Колонки.Добавить("Аналитик", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	Результат.Колонки.Добавить("Разработчик", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ЗадачиМетеор = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Результат.ВыгрузитьКолонку("PossibleMeteorTask"));
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ЗадачиМетеор, "");
	Если ЗадачиМетеор.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	ДанныеЗадач = Неопределено;
	Попытка
		ДанныеЗадач = ИнтеграцияСМетеор.ПолучитьДанныеЗадачМетеорПоИД(ЗадачиМетеор);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	Если ДанныеЗадач = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	#Если Не Сервер Тогда
		Результат = Новый ТаблицаЗначений;
	#КонецЕсли
	Для Каждого СтрокаРезультата Из Результат Цикл
		СтрокаРезультата.Аналитик = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДанныеЗадач.Получить(СтрокаРезультата.PossibleMeteorTask), "admin");
		СтрокаРезультата.Разработчик = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДанныеЗадач.Получить(СтрокаРезультата.PossibleMeteorTask), "Programmer");
	КонецЦикла;		
	
	Возврат Результат;
	
КонецФункции

// Изменения объектов за месяц.
//
Функция ИзмененияОбъетовПоМесяцу(Месяц)
	
	ИмяХП = "Report.ChangedObjectsViaGitLabByMonth";
	СерверБазы = "SRV-SQL20";
	ИмяБазы = "CICD";
	ИмяСервераБазы = "" + СерверБазы + "/" + ИмяБазы;
	РежимСервис = БлокировкаРаботыСВнешнимиРесурсамиУКПовтИсп.ЭтоКопияБазы();
	ПараметрыХП = Новый Структура;
	ПараметрыХП.Вставить("Month", Месяц);
	Результат = ВнешниеДанные.ПроксиВыполнитьХранимуюПроцедуру(
		ИмяХП,
		ПараметрыХП,
		ИмяСервераБазы,
		"Отчет.КонтрольИзмененнныхОбъектовSQL.МодульОбъекта",
		Новый Структура("Сервис", РежимСервис));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Иначе
  ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
