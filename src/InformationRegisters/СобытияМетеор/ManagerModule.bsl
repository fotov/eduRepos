#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура СоздатьЗапись(ИмяСобытия, Текст) Экспорт
	
	Запись = РегистрыСведений.СобытияМетеор.СоздатьМенеджерЗаписи();
	Запись.День = НачалоДня(ТекущаяДатаСеанса());
	Запись.ИД = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Запись.ДатаЗаписи = МестноеВремя('00010101' + Запись.ИД / 1000);
	Запись.ДатаСобытия = Запись.ДатаЗаписи;
	Запись.ИмяСобытия = ИмяСобытия;
	Запись.Данные = Текст;
	
	КлючЕстьОшибки = "error";
	КлючЗадача = "task_id";
	Если ИмяСобытия = "HTTP" Тогда
		КлючЗадача = "task";
	КонецЕсли;
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Текст);
		СоответствиеJSON = ПрочитатьJSON(ЧтениеJSON, Истина, "date", ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
		
		Если СоответствиеJSON.Получить("method") = "poststatus" Тогда
			Запись.ДатаСобытия = СоответствиеJSON.Получить("data").Получить("date");
		КонецЕсли;
		
		Запись.НомерЗадачи = НайтиЗначениеJSON(СоответствиеJSON, КлючЗадача);
		ЗначениеОшибка = НайтиЗначениеJSON(СоответствиеJSON, КлючЕстьОшибки, Ложь);
		Запись.ЕстьОшибки = (Не (ТипЗнч(ЗначениеОшибка) = Тип("Булево")) Или ЗначениеОшибка);
	Исключение
	КонецПопытки;
	
	Запись.Записать();
	
КонецПроцедуры

Процедура ОчиститьУстаревшиеДанные(ОставитьДней = 30) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СобытияМетеор.День КАК День
		|ИЗ
		|	РегистрСведений.СобытияМетеор КАК СобытияМетеор
		|ГДЕ
		|	СобытияМетеор.День < &ОтметкаВремени
		|
		|УПОРЯДОЧИТЬ ПО
		|	День";
	Запрос.УстановитьПараметр("ОтметкаВремени", ТекущаяДатаСеанса() - ОставитьДней * 86400);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Ластик = РегистрыСведений.СобытияМетеор.СоздатьНаборЗаписей();
		Ластик.Отбор.День.Установить(Выборка.День);
		Ластик.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Функция - Обработать действие
//
// Параметры:
//  Данные	 - Структура	 - 
// 
// Возвращаемое значение:
//   - Структура
//
Функция ОбработатьДействие(Данные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеОтвета = Неопределено;
	
	Если Данные.method = "poststatus" Тогда
		ДанныеОтвета = poststatus(Данные.data);
	ИначеЕсли Данные.method = "ЗарегистрироватьОбновлениеИБ" Тогда
		Попытка
			ОтветСтрока = РегистрыСведений.ИсторияПримененияКонфигураций.ЗарегистрироватьОбновлениеИБ(Данные.Хранилище, Данные.НомерКоммита, Данные.База1С, Данные.Комментарий, Данные.Ответственный);
			ДанныеОтвета = Новый Структура("Ответ", ОтветСтрока);
		Исключение
			ДанныеОтвета = Новый Структура("Ошибка", ОписаниеОшибки());
		КонецПопытки;
		
		
	ИначеЕсли Данные.method = "ПолучитьХранилища" Тогда
		Попытка
			Массив = РегистрыСведений.ИсторияПримененияКонфигураций.ПолучитьХранилища();
			ОтветСтрока = XMLСтрока(Новый ХранилищеЗначения(Массив));
			ДанныеОтвета = Новый Структура("Ответ", ОтветСтрока);
		Исключение
			ДанныеОтвета = Новый Структура("Ошибка", ОписаниеОшибки());
		КонецПопытки;
		
	ИначеЕсли Данные.method = "ПолучитьБазы1С" Тогда
		Попытка
			Массив = РегистрыСведений.ИсторияПримененияКонфигураций.ПолучитьБазы1С(Данные.Хранилище);
			ОтветСтрока = XMLСтрока(Новый ХранилищеЗначения(Массив));
			ДанныеОтвета = Новый Структура("Ответ", ОтветСтрока);
		Исключение
			ДанныеОтвета = Новый Структура("Ошибка", ОписаниеОшибки());
		КонецПопытки;
		
	ИначеЕсли Данные.method = "ПолучитьПоследнийНомерКоммита" Тогда
		Попытка
			Число = РегистрыСведений.ИсторияПримененияКонфигураций.ПолучитьПоследнийНомерКоммита(Данные.Хранилище);
			ДанныеОтвета = Новый Структура("Ответ", Число);
		Исключение
			ДанныеОтвета = Новый Структура("Ошибка", ОписаниеОшибки());
		КонецПопытки;
		
	ИначеЕсли Данные.method = "ПолучитьРезультатЗапроса" Тогда
		Попытка
			ТЗ = ВнешниеДанные.ПолучитьРезультатЗапроса(Данные.ТекстЗапроса, Данные.СтруктураПараметров);
			ОтветСтрока = XMLСтрока(Новый ХранилищеЗначения(ТЗ));
			ДанныеОтвета = Новый Структура("Ответ", ОтветСтрока);
		Исключение
			ДанныеОтвета = Новый Структура("Ошибка", ОписаниеОшибки());
		КонецПопытки;
		
	ИначеЕсли Данные.method = "PostCheckStatusBSLLS" Тогда
		Попытка
			Если Не Данные.Свойство("GitHash")
				Или Не ЗначениеЗаполнено(Данные.GitHash)
				Или Не Данные.Свойство("NumberOfErrors") Тогда
				ВызватьИсключение "Expected json composition: {""GitHash"": ""hash_40_characters"", ""NumberOfErrors"": NumberOfErrors}";
			КонецЕсли;
			Запрос = Новый Запрос;
			Запрос.Текст = "";
			ВерсияХранилища = РегистрыСведений.ХешиGitВерсийХранилища.ВерсияХранилищаПоХэшу(Данные.GitHash);
			ВерсияДополнения = РегистрыСведений.КоммитыДополнений.ВерсияДополненияПоХэшу(Данные.GitHash);
			Если НЕ ВерсияХранилища.Пустая() Тогда
				ОбъектПроверки = ВерсияХранилища;
			ИначеЕсли Не ВерсияДополнения.Пустая() Тогда 
				ОбъектПроверки = ВерсияДополнения;
			Иначе
				ВызватьИсключение "no commit at the specified hash is detected";
			КонецЕсли;
			
			Менеджер = РегистрыСведений.РезультатыСинтаксическойПроверки.СоздатьМенеджерЗаписи();
			Менеджер.ОбъектПроверки = ОбъектПроверки;
			Менеджер.Прочитать();
			Менеджер.ОбъектПроверки = ОбъектПроверки;
			Менеджер.КоличествоОшибокBSL_LS = Данные.NumberOfErrors;
			Менеджер.ПровереноBSLLS = Истина;
			Менеджер.Записать();
			ОтветСтрока = "bls ls check result registered";
			ДанныеОтвета = Новый Структура("Ответ", ОтветСтрока);
			
		Исключение
			
			ДанныеОтвета = Новый Структура("Ошибка", ОписаниеОшибки());
			
		КонецПопытки;
		
	Иначе
		ВызватьИсключение СтрШаблон("Метод ""%1"" не поддерживается", Данные.method);
	КонецЕсли;
	
	Если ДанныеОтвета = Неопределено Тогда
		ДанныеОтвета = Новый Структура;
	КонецЕсли;
	
	Возврат ДанныеОтвета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиЗначениеJSON(КоллекцияJSON, Ключ, ЗначениеПоУмолчанию = "") Экспорт
	
	Значение = ЗначениеПоУмолчанию;
	НайтиНомерЗадачиРекурсивно(КоллекцияJSON, Ключ, Значение);
	
	Возврат Значение;
	
КонецФункции

Процедура НайтиНомерЗадачиРекурсивно(КоллекцияJSON, Ключ, Значение)
	
	Для Каждого КлючИЗначение Из КоллекцияJSON Цикл
		Если КлючИЗначение.Ключ = Ключ Тогда
			Значение = КлючИЗначение.Значение;
			Возврат;
		КонецЕсли;
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Или ТипЗнч(КлючИЗначение.Значение) = Тип("Соответствие") Тогда
			НайтиНомерЗадачиРекурсивно(КлючИЗначение.Значение, Ключ, Значение);
			Если ЗначениеЗаполнено(Значение) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция poststatus(data)
	
	ЗадачаМетеор = Справочники.ЗадачиМетеор.СоздатьЕслиОтсутствует(data.task);
	Этап = Справочники.ЭтапыЗадачиМетеор.ЭтапЗадачиМетеор(data.status);
	Исполнитель = Справочники.Пользователи.НайтиПоНаименованию(data.user, Истина);
	стрИсполнитель = data.user;
	Тип = Справочники.ТипыЗадачиМетеор.ТипЗадачиМетеор(data.type);
	comment = ?(data.Свойство("comment"), data.comment, "");
	
	ДатаСобытия = '00010101';
	Если data.Свойство("date") Тогда
		ДатаСобытия = СтроковыеФункцииКлиентСервер.СтрокаВДату(СтрЗаменить(data.date, "T", " "), ЧастиДаты.ДатаВремя);
	КонецЕсли;
	
	РегистрыСведений.ИсторияЭтаповЗадачиМетеор.Отразить(ЗадачаМетеор, Этап, Исполнитель, стрИсполнитель, Тип, comment, ДатаСобытия);
	
	Возврат Новый Структура;
	
КонецФункции

#КонецОбласти

#КонецЕсли

