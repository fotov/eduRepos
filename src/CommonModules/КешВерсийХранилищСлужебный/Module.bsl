
#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыгрузкаВерсийИсторииХранилищаВКешОбработчикЗадания() Экспорт
	
	// Последовательное получение всех версий.
	//РегЗадания.ПроверитьРазрешениеЗапускаРегламентныхЗаданий();
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОчередьПолученияВерсийКонфигурации.ВерсияХранилища КАК ВерсияХранилища,
	//	|	ОчередьПолученияВерсийКонфигурации.ВерсияХранилища.Владелец КАК Хранилище,
	//	|	ОчередьПолученияВерсийКонфигурации.ВерсияХранилища.Код КАК НомерВерсии
	//	|ИЗ
	//	|	РегистрСведений.ОчередьПолученияВерсийКонфигурации КАК ОчередьПолученияВерсийКонфигурации
	//	|ГДЕ
	//	|	ОчередьПолученияВерсийКонфигурации.ПутьКФайлу = """"";
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	КешВерсийХранилищ.ВыгрузитьВерсиюВКеш(
	//		Новый Структура("ВерсияХранилища, Хранилище, НомерВерсии", Выборка.ВерсияХранилища, Выборка.Хранилище, Выборка.НомерВерсии));
	//КонецЦикла;
	
	// На данный момент возможно получать версии параллельно по хранилищам.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хранилища.Ссылка КАК Хранилище,
	|	Хранилища.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Хранилища КАК Хранилища
	|ГДЕ
	|	Хранилища.ВыгружатьВGit
	|	И НЕ Хранилища.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();

	ИмяМетода = "КешВерсийХранилищСлужебный.ВыгрузитьВерсииИсторииХранилищаВКеш";
	Пока Выборка.Следующий() Цикл
		Хранилище = Выборка.Хранилище;
		Ключ = СтрШаблон("ВыгрузкаВКеш_%1", Выборка.Наименование);
		Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Ключ, Состояние", ИмяМетода, Ключ, СостояниеФоновогоЗадания.Активно));
		Если Не Задания.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(Хранилище);
		Наименование = СтрШаблон("Выгрузка %1 в кеш", Выборка.Наименование);
		ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыЗадания, Ключ, Наименование);
	КонецЦикла;
		
КонецПроцедуры

Процедура ОчиститьУстаревшиеВерсииКешаИсторииХранилищаОбработчикЗадания() Экспорт
	
	РегЗадания.ПроверитьРазрешениеЗапускаРегламентныхЗаданий();
	КаталогКеша = Константы.КаталогВременныхФайловВерсийХранилищ.Получить();
	КаталогКешаФайл = Новый Файл(КаталогКеша);
	Если Не КаталогКешаФайл.Существует() Тогда
		ВызватьИсключение "Не найден каталог кеша версий хранилищ.";
	КонецЕсли;
	// Удаление записей регистра, если файлов, на которые указывает запись не существует.
	ВыборкаРегистра = РегистрыСведений.ОчередьПолученияВерсийКонфигурации.Выбрать();
	Пока ВыборкаРегистра.Следующий() Цикл
		Если ПустаяСтрока(ВыборкаРегистра.ПутьКФайлу) Тогда
			Продолжить;
		КонецЕсли;
		ФайлКеша = Новый Файл(ВыборкаРегистра.ПутьКФайлу);
		Если Не ФайлКеша.Существует() Тогда
			Попытка
				ВыборкаРегистра.ПолучитьМенеджерЗаписи().Удалить();
			Исключение
				ЗаписьЖурналаРегистрации(
					"Кеш версий хранилищ.Очистка устаревших версий",
					УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.РегистрыСведений.ОчередьПолученияВерсийКонфигурации,
					,
					ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	ОбщийРазмерКаталога = 0;
	ВсеФайлы = НайтиФайлы(КаталогКеша, "*", Истина);
	Для Каждого ФайлКеша Из ВсеФайлы Цикл
		ОбщийРазмерКаталога = ОбщийРазмерКаталога + ФайлКеша.Размер();
	КонецЦикла;
	ЛимитРазмераКаталога = ЛимитРазмераКешаВерсийХранилищ();
	НужноОсвободитьМеста = ОбщийРазмерКаталога - ЛимитРазмераКаталога;
	Если НужноОсвободитьМеста <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьПолученияВерсийКонфигурации.ПутьКФайлу КАК ПутьКФайлу,
		|	РАЗНОСТЬДАТ(ЕСТЬNULL(ИсторияЗапросовВерсийХранилищаСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)), &ТекущаяДата, ЧАС) КАК ПрошлоЧасовОтПоследнегоОбращения,
		|	ОчередьПолученияВерсийКонфигурации.ДатаЗапроса КАК ДатаЗапроса,
		|	ОчередьПолученияВерсийКонфигурации.РазмерФайла КАК РазмерФайла,
		|	ОчередьПолученияВерсийКонфигурации.ВерсияХранилища КАК ВерсияХранилища
		|ИЗ
		|	РегистрСведений.ОчередьПолученияВерсийКонфигурации КАК ОчередьПолученияВерсийКонфигурации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МаксимальныйПериод.Период КАК Период,
		|			МаксимальныйПериод.ВерсияХранилища КАК ВерсияХранилища,
		|			ИсторияЗапросовВерсийХранилища.Период КАК Период1,
		|			ИсторияЗапросовВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища1,
		|			ИсторияЗапросовВерсийХранилища.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(ИсторияЗапросовВерсийХранилища.Период) КАК Период,
		|				ИсторияЗапросовВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища
		|			ИЗ
		|				РегистрСведений.ИсторияЗапросовВерсийХранилища КАК ИсторияЗапросовВерсийХранилища
		|			ГДЕ
		|				ИСТИНА
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ИсторияЗапросовВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗапросовВерсийХранилища КАК ИсторияЗапросовВерсийХранилища
		|				ПО МаксимальныйПериод.ВерсияХранилища = ИсторияЗапросовВерсийХранилища.ВерсияХранилища
		|					И МаксимальныйПериод.Период = ИсторияЗапросовВерсийХранилища.Период) КАК ИсторияЗапросовВерсийХранилищаСрезПоследних
		|		ПО ОчередьПолученияВерсийКонфигурации.ВерсияХранилища = ИсторияЗапросовВерсийХранилищаСрезПоследних.ВерсияХранилища
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЗапроса";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	ОчередьФайлов = Запрос.Выполнить().Выгрузить();
	ОчередьФайлов.Индексы.Добавить("ПутьКФайлу");
	
	// Удаление файлов, которых нет в регистре
	Для Каждого ФайлКеша Из ВсеФайлы Цикл
		Если ОчередьФайлов.Найти(ФайлКеша.ПолноеИмя) = Неопределено Тогда
			Попытка
				УдалитьФайлы(ФайлКеша.ПолноеИмя);
				НужноОсвободитьМеста = НужноОсвободитьМеста - ФайлКеша.Размер();
			Исключение
				ЗаписьЖурналаРегистрации(
					"Кеш версий хранилищ.Очистка устаревших версий",
					УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.РегистрыСведений.ОчередьПолученияВерсийКонфигурации,
					,
					ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоЧасовНеудаляемыеФайлы = Константы.ПериодГарантированногоХраненияФайлаКешаВерсийХранилищ.Получить();
	Для Каждого ФайлКеша Из ОчередьФайлов Цикл
		Если НужноОсвободитьМеста <= 0 Тогда
			Возврат;
		КонецЕсли;
		Если ФайлКеша.ПрошлоЧасовОтПоследнегоОбращения < КоличествоЧасовНеудаляемыеФайлы Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Менеджер = РегистрыСведений.ОчередьПолученияВерсийКонфигурации.СоздатьМенеджерЗаписи();
			Менеджер.ВерсияХранилища = ФайлКеша.ВерсияХранилища;
			Менеджер.Удалить();
			УдалитьФайлы(ФайлКеша.ПутьКФайлу);
			НужноОсвободитьМеста = НужноОсвободитьМеста - ФайлКеша.РазмерФайла;
		Исключение
			ЗаписьЖурналаРегистрации(
				"Кеш версий хранилищ.Очистка устаревших версий",
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.ОчередьПолученияВерсийКонфигурации,
				,
				ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьВерсииИсторииХранилищаВКеш(Хранилище) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Хранилище", Хранилище);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьПолученияВерсийКонфигурации.ВерсияХранилища КАК ВерсияХранилища,
		|	ОчередьПолученияВерсийКонфигурации.ВерсияХранилища.Владелец КАК Хранилище,
		|	ОчередьПолученияВерсийКонфигурации.ВерсияХранилища.Код КАК НомерВерсии
		|ИЗ
		|	РегистрСведений.ОчередьПолученияВерсийКонфигурации КАК ОчередьПолученияВерсийКонфигурации
		|ГДЕ
		|	ОчередьПолученияВерсийКонфигурации.ПутьКФайлу = """"
		|	И ОчередьПолученияВерсийКонфигурации.ВерсияХранилища.Владелец = &Хранилище";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КешВерсийХранилищ.ВыгрузитьВерсиюВКеш(
			Новый Структура("ВерсияХранилища, Хранилище, НомерВерсии", Выборка.ВерсияХранилища, Выборка.Хранилище, Выборка.НомерВерсии));
	КонецЦикла;
	
КонецПроцедуры

// Функция - Выгрузка конфигурации из хранилища
//
// Параметры:
//  ВерсияХранилища		 - СправочникСсылка.ИсторияХранилища	 - Ссылка на коммит
//  ПараметрыХранилища	 - Структура - Параметры авторизации, путей и т.д. (Имя, Адрес, Логин, Пароль, ИмяРасширения, ПутьВыгрузки)
// 
// Возвращаемое значение:
//  Строка - путь к файлу конфигурации/расширения
//
Функция ВыгрузкаКонфигурацииИзХранилища(ВерсияХранилища, ПараметрыХранилища) Экспорт
	
	НомерКоммита = XMLСтрока(ВерсияХранилища.Код);
	ПутьВыгрузкиУказан = ПараметрыХранилища.Свойство("ПутьВыгрузки") И ЗначениеЗаполнено(ПараметрыХранилища.ПутьВыгрузки);
	Если ПутьВыгрузкиУказан Тогда
		Путь = ПараметрыХранилища.ПутьВыгрузки;
		Если Прав(Путь, 1) <> "\" Тогда
			Путь = Путь + "\";
		КонецЕсли;
	Иначе
		Путь = "\\izb-fs05\automacons\autochecks\clone\";
	КонецЕсли;
	
	ШаблонИмениФайла = "%1_%2.cf";
	ИмяФайла = Путь + СтрШаблон(ШаблонИмениФайла, ПараметрыХранилища.Имя, НомерКоммита);
	Если ЗначениеЗаполнено(ПараметрыХранилища.ИмяРасширения) Тогда
		ИмяФайла = ИмяФайла+"e"; // .cfe
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() и РазмерФайлаКонфигурацииИмеетАдекватныйРазмер(Файл.Размер(), ВерсияХранилища) Тогда
		Возврат ИмяФайла;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Платформа", ПараметрыХранилища.ПутьКПлатформе1С);
	ДопПараметры.Вставить("ДопСтрока", "/UseHwLicenses+");
	ДопПараметры.Вставить("ВерсияХранилища", ВерсияХранилища);
	
	ВременныйКаталог = СтрШаблон("%1dors_export_%2_%3", КаталогВременныхФайлов(), ПараметрыХранилища.Имя, НомерКоммита);
	СтрокаСоединенияИБ = СтрШаблон("File=""%1"";", ВременныйКаталог);
	Файл = Новый Файл(ВременныйКаталог + "\1cv8.1cd");
	Если Не Файл.Существует() Тогда
		// Создание пустой ИБ
		ДопПараметры.Вставить("Режим", "CREATEINFOBASE");
		КомандаСоздания = СтрокаСоединенияИБ;
		Если ДопПараметры.Свойство("ДопСтрока") Тогда
			КомандаСоздания = КомандаСоздания + " " + ДопПараметры.ДопСтрока;
		КонецЕсли;
		ВыполнитьКомандуКонфигуратора(СтрокаСоединенияИБ, "СозданиеИБ", КомандаСоздания, ДопПараметры);
		ДопПараметры.Удалить("Режим");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыХранилища.ИмяРасширения) Тогда
		ПутьРасширения = ГенерацияРасширенияКонфигурации.СозданиеФайловРасширения(ПараметрыХранилища.ИмяРасширения);
		КомандаРасширения = "/LoadConfigFromFiles ""%1"" -Extension %2 -format Hierarchical";
		КомандаРасширения = СтрШаблон(КомандаРасширения, ПутьРасширения, ПараметрыХранилища.ИмяРасширения);
		Если ДопПараметры.Свойство("ДопСтрока") Тогда
			КомандаРасширения = КомандаРасширения + " " + ДопПараметры.ДопСтрока;
		КонецЕсли;
		ВыполнитьКомандуКонфигуратора(СтрокаСоединенияИБ, "ДобавлениеРасширения", КомандаРасширения, ДопПараметры);
	КонецЕсли;
	
	Если Не ПутьВыгрузкиУказан Тогда // Удаление в старой папке
		ПоискФайлов = НайтиФайлы(Путь, СтрШаблон(ШаблонИмениФайла, ПараметрыХранилища.Имя, "*"));
		ОтметкаВремениУстарело = ТекущаяДатаСеанса() - 3 * 24 * 3600;
		Для Каждого Файл Из ПоискФайлов Цикл
			Если Файл.ПолноеИмя = ИмяФайла Тогда
				Продолжить;
			КонецЕсли;
			Если Файл.ПолучитьВремяИзменения() < ОтметкаВремениУстарело Тогда
				УдалитьФайлы(Файл.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Найти(СтрокаСоединенияИБ, "Srvr=") Тогда
		// Отключение от хранилища (если было)
		ЧастиКомманды = Новый Массив;
		ЧастиКомманды.Добавить("/ConfigurationRepositoryUnbindCfg -force");
		Если ЗначениеЗаполнено(ПараметрыХранилища.ИмяРасширения) Тогда
			ЧастиКомманды.Добавить("-Extension "+ПараметрыХранилища.ИмяРасширения);
		КонецЕсли;
		ПараметрыЗапуска = СтрСоединить(ЧастиКомманды, " ");
		Если ДопПараметры.Свойство("ДопСтрока") Тогда
			ЧастиКомманды.Добавить(ДопПараметры.ДопСтрока);
		КонецЕсли;
		Попытка
			ВыполнитьКомандуКонфигуратора(СтрокаСоединенияИБ, "ОтключениеОтХранилища", ПараметрыЗапуска);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыХранилища.Логин) Тогда
		ВызватьИсключение "Не указан логин пользователя хранилища!";
	КонецЕсли;
	
	ЧастиКомманды = Новый Массив;
	ЧастиКомманды.Добавить("/UseHwLicenses+");
	ЧастиКомманды.Добавить("/ConfigurationRepositoryF"+СтрокаВКавычках(ПараметрыХранилища.Адрес));
	ЧастиКомманды.Добавить("/ConfigurationRepositoryN"+ПараметрыХранилища.Логин);
	Если ЗначениеЗаполнено(ПараметрыХранилища.Пароль) Тогда
		ЧастиКомманды.Добавить("/ConfigurationRepositoryP"+ПараметрыХранилища.Пароль);
	КонецЕсли;
	ЧастиКомманды.Добавить("/ConfigurationRepositoryDumpCfg");
	ЧастиКомманды.Добавить(СтрокаВКавычках(ИмяФайла));
	ЧастиКомманды.Добавить("-v "+НомерКоммита);
	Если ЗначениеЗаполнено(ПараметрыХранилища.ИмяРасширения) Тогда
		ЧастиКомманды.Добавить("-Extension "+ПараметрыХранилища.ИмяРасширения);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ДопСтрока") Тогда
		ЧастиКомманды.Добавить(ДопПараметры.ДопСтрока);
	КонецЕсли;
	
	ПараметрыЗапуска = СтрСоединить(ЧастиКомманды, " ");
	Рез = ВыполнитьКомандуКонфигуратора(СтрокаСоединенияИБ, "ВыгрузкаКонфигурацииИзХранилища", ПараметрыЗапуска, ДопПараметры);
	Сообщить(ИмяФайла);
	
	Попытка
		Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
			УдалитьФайлы(ВременныйКаталог);
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
	КонецПопытки;
	
	Файл = Новый Файл(ИмяФайла);
	Если Не РазмерФайлаКонфигурацииИмеетАдекватныйРазмер(Файл.Размер(), ВерсияХранилища) Тогда
		УдалитьФайлы(ИмяФайла);
		Возврат "";
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЛимитРазмераКешаВерсийХранилищ()
	Возврат Константы.РазмерКешаВерсийХранилищ.Получить() * 1073741824; // в байтах *1024*1024*1024
КонецФункции

Функция СтрокаВКавычках(Строка)
	Возврат СтрШаблон("""%1""", Строка);
КонецФункции

Функция ПолучитьТекстФайла(ИмяФайла)
	Если Не ФайлСуществует(ИмяФайла) Тогда
		Возврат "";
	КонецЕсли;
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(ИмяФайла);
	Возврат ТекстДок.ПолучитьТекст();
КонецФункции

Функция ФайлСуществует(ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Существует();
КонецФункции

Функция ВыполнитьКомандуКонфигуратора(СтрокаСоединенияИБ, ИмяОперации, ПараметрыЗапуска = "", ДопПараметры = Неопределено)
	Рег = РегистрыСведений.ИсторияЗапросовВерсийХранилища.ДобавитьСобытие(СтрокаСоединенияИБ, ИмяОперации,
		Новый Структура("ВПроцессе, Команда, ВерсияХранилища", Истина, ПараметрыЗапуска, ДопПараметры.ВерсияХранилища));
		
	Если Не ЗначениеЗаполнено(ПараметрыЗапуска) Тогда
		РегистрыСведений.ИсторияЗапросовВерсийХранилища.ЗакончитьСобытие(Рег, "Пустая команда запуска");
		Возврат "";
	КонецЕсли;
	
	БезАвторизации = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		ДопПараметры.Свойство("БезАвторизации", БезАвторизации);
	Иначе
		ДопПараметры = Новый Структура;
	КонецЕсли;
		
	Попытка
		Если ДопПараметры.Свойство("Платформа") Тогда
			Платформа = ДопПараметры.Платформа;
		Иначе
			Платформа = КаталогПрограммы()+"1cv8.exe";
			СИ = Новый СистемнаяИнформация;
			Платформа = СтрЗаменить(Платформа, СИ.ВерсияПриложения, ДопПараметры.ВерсияПлатформы);
			Если Не ФайлСуществует(Платформа) Тогда
				Платформа = КаталогПрограммы()+"1cestart.exe";
				Платформа = СтрЗаменить(Платформа, СИ.ВерсияПриложения+"\bin", "common");
			КонецЕсли;
		КонецЕсли;
		
		ЧастиКомманды = Новый Массив;
		ЧастиКомманды.Добавить(СтрокаВКавычках(Платформа));
		Если ДопПараметры.Свойство("Режим") Тогда
			ЧастиКомманды.Добавить(ДопПараметры.Режим);
		ИначеЕсли Найти(Врег(ПараметрыЗапуска), ВРег("/Execute")) Тогда
			ЧастиКомманды.Добавить("ENTERPRISE");
		Иначе
			ЧастиКомманды.Добавить("DESIGNER");
		КонецЕсли;
		
		Если СтрНайти(НРег(СтрокаСоединенияИБ), "srvr=") Тогда
			ЧастиКомманды.Добавить(СтрШаблон("/S %1\%2", ДопПараметры.Сервер1С, ДопПараметры.ИмяБазы1C));
		ИначеЕсли Не ДопПараметры.Свойство("Режим") Тогда
			КаталогБазы = СтрРазделить(СтрокаСоединенияИБ, """=;", Ложь)[1];
			ЧастиКомманды.Добавить(СтрШаблон("/F ""%1""", КаталогБазы));
		КонецЕсли;
		
		Если ДопПараметры.Свойство("ИмяПользователя") И ЗначениеЗаполнено(ДопПараметры.ИмяПользователя) И БезАвторизации<>Истина Тогда
			ЧастиКомманды.Добавить("/N "+СтрокаВКавычках(ДопПараметры.ИмяПользователя));
		КонецЕсли;
		Если ДопПараметры.Свойство("Пароль") И ЗначениеЗаполнено(ДопПараметры.Пароль) И БезАвторизации<>Истина Тогда
			ЧастиКомманды.Добавить("/P "+СтрокаВКавычках(ДопПараметры.Пароль));
		КонецЕсли;
		
		ЧастиКомманды.Добавить(ПараметрыЗапуска);
		ЧастиКомманды.Добавить("");
		ЧастиКомманды.Добавить("/DisableStartupDialogs");
		ЧастиКомманды.Добавить("/DisableStartupMessages");
		ЧастиКомманды.Добавить("/DisableUnrecoverableErrorMessage");
		ЧастиКомманды.Добавить("/ClearCache");
		//ЧастиКомманды.Добавить("/UsePrivilegedMode");
		ИмяФайлаЛог = ПолучитьИмяВременногоФайла("txt");
		ЧастиКомманды.Добавить("/Out "+СтрокаВКавычках(ИмяФайлаЛог));
		
		Команда = СтрСоединить(ЧастиКомманды, " ");
		Рег.Команда = Команда;
		Рег.Записать();
		КодВозврата = 0;
		ЗапуститьПриложение(Команда, , Истина, КодВозврата);
		Результат = ПолучитьТекстФайла(ИмяФайлаЛог);
		УдалитьФайлы(ИмяФайлаЛог);
		
		Если ИмяОперации = "ПрименениеКонфигурации" Тогда // Первая попытка
			Если Найти(Результат, "уже используется для object") Или Найти(Результат, "is already in use as a object name") Тогда
				КодВозврата = 0; // Не считается ошибкой
			КонецЕсли;
		КонецЕсли;
		
		Если КодВозврата <> 0 Тогда
			Если Не ДопПараметры.Свойство("НомерПопытки") Тогда
				ДопПараметры.Вставить("НомерПопытки", 0);
			КонецЕсли;
			Если СтрНайти(Результат, "В процессе обновления информационной базы произошла некритичная ошибка") Тогда
				ВызватьИсключение "В процессе обновления информационной базы произошла некритичная ошибка";
			КонецЕсли; 
			Если ДопПараметры.НомерПопытки < 5 Тогда
				Строка1 = "Params/DBNames";
				Строка2 = "Удаленный хост принудительно разорвал существующее подключение";
				Строка3 = "Повторить сохранение конфигурации?";
				Строка4 = "Системное фоновое задание"; // База данных заблокирована
				Если СтрНайти(Результат, Строка1) или СтрНайти(Результат, Строка2) или СтрНайти(Результат, Строка3) или СтрНайти(Результат, Строка4) Тогда
					ДопПараметры.НомерПопытки = ДопПараметры.НомерПопытки + 1;
					РегистрыСведений.ИсторияЗапросовВерсийХранилища.ЗакончитьСобытие(Рег, Результат + Символы.ПС + СтрШаблон("Запушена повторная попытка (%1)", ДопПараметры.НомерПопытки));
					Возврат ВыполнитьКомандуКонфигуратора(СтрокаСоединенияИБ, ИмяОперации, ПараметрыЗапуска, ДопПараметры);
				КонецЕсли;
			КонецЕсли;
			
			ВызватьИсключение СтрШаблон("Ошибка при запуске, код ошибки: %1
				|%2", КодВозврата, Результат);
		КонецЕсли;
		
		РегистрыСведений.ИсторияЗапросовВерсийХранилища.ЗакончитьСобытие(Рег, Результат);
		
		Возврат Результат;
	Исключение
		О_о = ОписаниеОшибки();
		
		РегистрыСведений.ИсторияЗапросовВерсийХранилища.ЗакончитьСобытие(Рег, ОписаниеОшибки(), Истина);
		
		ВызватьИсключение СтрШаблон("Ошибка %1: %2", ИмяОперации, О_о);
	КонецПопытки;
	
КонецФункции

Функция РазмерФайлаКонфигурацииИмеетАдекватныйРазмер(ТекущийРазмер, ВерсияХранилища)
	
	Если ТекущийРазмер = 0 Тогда
		// Нулейвой файл точно плохой
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьПолученияВерсийКонфигурации.ВерсияХранилища.Код КАК НомерКоммита,
		|	ОчередьПолученияВерсийКонфигурации.РазмерФайла КАК РазмерФайла
		|ИЗ
		|	РегистрСведений.ОчередьПолученияВерсийКонфигурации КАК ОчередьПолученияВерсийКонфигурации
		|ГДЕ
		|	ОчередьПолученияВерсийКонфигурации.ВерсияХранилища.Владелец = &Хранилище
		|	И ОчередьПолученияВерсийКонфигурации.ВыполняетсяПолучениеФайла = ЛОЖЬ
		|	И ОчередьПолученияВерсийКонфигурации.ВерсияХранилища.Код < &НомерКомита
		|	И ОчередьПолученияВерсийКонфигурации.РазмерФайла <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьПолученияВерсийКонфигурации.ВерсияХранилища.Код УБЫВ";
	Запрос.УстановитьПараметр("Хранилище", ВерсияХранилища.Владелец);
	Запрос.УстановитьПараметр("НомерКомита", ВерсияХранилища.Код);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		// Нет данных по размеру предыдущих коммитов
		Возврат Истина;
	КонецЕсли;
	
	РазмерПредыдущегоКоммита = Выборка.РазмерФайла;
	
	// Договорились, что допустимый диапозон: от -10% до + бесконечности
	
	Если РазмерПредыдущегоКоммита <= ТекущийРазмер Тогда
		// В большую сторону без ограничений
		Возврат Истина;
	КонецЕсли;
	
	Если РазмерПредыдущегоКоммита * 0.9 > ТекущийРазмер Тогда
		// Отклонение более 10% в менеьшую сторону
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

#КонецОбласти
