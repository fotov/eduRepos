//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Для расширения возможностей обещго модуля ОтчетыКлиентПереопределяемый подсистемы БСП ВариантыОтчетов
//  
//////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ДанныеЭлементаРасшифровки(АдресДанныхРасшифровки, Расшифровка, ИмяПоля) Экспорт 
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	ЗначенияПолей = ДанныеРасшифровки.Элементы.Получить(Расшифровка).ПолучитьПоля();
	НайденноеПоле = ЗначенияПолей.Найти(ИмяПоля);
	Если НайденноеПоле = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденноеПоле.Значение;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеПоляРасшифровки(ДанныеРасшифровки, Расшифровка, ИмяПоля = "") Экспорт
    // получаем все данные из выведенного отчета
    ДанныеОтчета = ПолучитьИзВременногоХранилища(ДанныеРасшифровки); 
    // по факту возвращается только одно поле под номером в переменной "Расшифровка", поэтому его и зачитываем
	ЗначенияПолей = ДанныеОтчета.Элементы.Получить(Расшифровка).ПолучитьПоля();
	Если ИмяПоля = "" Тогда
		НайденноеПоле = ЗначенияПолей[0];
	Иначе
		НайденноеПоле = ЗначенияПолей.Найти(ИмяПоля);
	КонецЕсли;
	Если Не НайденноеПоле = Неопределено Тогда
		Возврат НайденноеПоле.Значение;
	КонецЕсли;
    Возврат Неопределено;
КонецФункции

// Функция - Получить значение выбранного поля отчета
//
// Параметры:
//  Расшифровка           - Число    - ИД поля, по которому произведен щелчок
//  ИменаТекущихПолей   - Массив  - Массив наименований полей, для которых нужно вернуть значение 
//                                  (задает ограничение, для каких полей будет срабатывать данная функция)
// 
// Возвращаемое значение:
// Строка - значение поля, по которому произведен щелчок
//
// Источник: https://infostart.ru/1c/articles/1028702/
Функция ПолучитьЗначениеВыбранногоПоляНаСервере(ДанныеРасшифровки, Расшифровка, ИменаТекущихПолей) Экспорт
    // получаем все данные из выведенного отчета
    ДанныеОтчета = ПолучитьИзВременногоХранилища(ДанныеРасшифровки); 
    // по факту возвращается только одно поле под номером в переменной "Расшифровка", поэтому его и зачитываем
    ПолеРасшифровки = ДанныеОтчета.Элементы.Получить(Расшифровка).ПолучитьПоля()[0];  
    Если Не ПолеРасшифровки = Неопределено Тогда 
        Если Не ИменаТекущихПолей.Найти (ПолеРасшифровки.Поле) = Неопределено Тогда
            // возвращаем значение только если расшифровываем конкретное поле, 
            // чтобы не срабатывало на других полях
            Возврат ПолеРасшифровки.Значение;
        КонецЕсли;
    КонецЕсли; 
    Возврат Неопределено;
КонецФункции

// Функция - Получить значение поля в строке отчета
//
// Параметры:
//  Расшифровка           - Число    - ИД поля, по которому произведен щелчок 
//  ИменаТекущихПолей   - Массив  - Массив наименований полей, для которых нужно вернуть значение 
//                                  (задает ограничение, для каких полей будет срабатывать данная функция) 
//  ИмяНужногоПоля         - Строка  - Имя поля, из которого нужно вернуть значение
//  НужноеПолеСлева       - Булево  - Признак - справа (Ложь) или слева (Истина) от текущего находтся нужное поле
// 
// Возвращаемое значение:
// Строка - значение поля, заданное в ИмяНужногоПоля
//
// Источник: https://infostart.ru/1c/articles/1028702/
Функция ПолучитьЗначениеПоляВСтрокеНаСервере(ДанныеРасшифровки, Расшифровка, ИменаТекущихПолей, ИмяНужногоПоля, НужноеПолеСлева = Истина) Экспорт
	ДанныеОтчета = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ПолеРасшифровки = ДанныеОтчета.Элементы.Получить(Расшифровка).ПолучитьПоля()[0];
	Если Не ПолеРасшифровки = Неопределено Тогда
		Если Не ИменаТекущихПолей.Найти (ПолеРасшифровки.Поле) = Неопределено Тогда
			// поиск нужного поля в направлении, которое указано в НужноеПолеСлева
			ШагПоискаРасшифровки = ?(НужноеПолеСлева, -1, 1);
			КоличествоПолейОтчета = ДанныеОтчета.Элементы.Количество();
			СчетчикРасшифровки = Расшифровка + ШагПоискаРасшифровки;
			ПоказательВыходаЗаПределыТекущихПолей = Ложь;
			Пока СчетчикРасшифровки >= 0 И СчетчикРасшифровки < КоличествоПолейОтчета Цикл            
				ЭлементРасшифровки = ДанныеОтчета.Элементы.Получить(СчетчикРасшифровки);
				Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
					ПолеРасшифровки = ЭлементРасшифровки.ПолучитьПоля()[0];
					Если ПолеРасшифровки.Поле = ИмяНужногоПоля Тогда
						Возврат ПолеРасшифровки.Значение;
					Иначе
						Если ИменаТекущихПолей.Найти (ПолеРасшифровки.Поле) = Неопределено Тогда                          
							ПоказательВыходаЗаПределыТекущихПолей = Истина;
						Иначе
							Если ПоказательВыходаЗаПределыТекущихПолей Тогда Возврат Неопределено КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
				СчетчикРасшифровки = СчетчикРасшифровки + ШагПоискаРасшифровки;
			КонецЦикла;       
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;    
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьОписаниеПравилаПроверкиАПК(НаименованиеПравила) Экспорт
	Возврат АвтоматизированнаяПроверкаКода.ПолучитьОписаниеПравилаПроверкиАПК(НаименованиеПравила);
КонецФункции

#КонецОбласти