//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Предназначен для работы с системами автоматизации проверки кода. (АПК, SonarQube)
//////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти

#Область Автотесты

Процедура ВыполнитьОпросАвтотестов(Хранилище) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хранилища.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Хранилища.БазовоеХранилище = ЗНАЧЕНИЕ(Справочник.Хранилища.ПустаяСсылка)
	|			ТОГДА Хранилища.ПроектGit.Код
	|		ИНАЧЕ Хранилища.БазовоеХранилище.ПроектGit.Код
	|	КОНЕЦ КАК ИдентификаторПроектаВГитЛаб
	|ИЗ
	|	Справочник.Хранилища КАК Хранилища
	|ГДЕ
	|	Хранилища.Ссылка = &Хранилище";
	Запрос.УстановитьПараметр("Хранилище", Хранилище);
	СведенияОХранилище = Запрос.Выполнить().Выбрать();
	СведенияОХранилище.Следующий();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияХранилища.Ссылка КАК Коммит,
	|	ПоказателиВерсийХранилища.АвтотестыНомерПайпа КАК АвтотестыНомерПайпа,
	|	ПоказателиВерсийХранилища.ВерхнеуровневыйПайплайнНомер КАК ВерхнеуровневыйПайплайнНомер,
	|	ХешиGitВерсийХранилища.Хеш КАК ХешGit
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ХешиGitВерсийХранилища КАК ХешиGitВерсийХранилища
	|		ПО ХешиGitВерсийХранилища.ВерсияХранилища = ИсторияХранилища.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиВерсийХранилища КАК ПоказателиВерсийХранилища
	|		ПО ПоказателиВерсийХранилища.ВерсияХранилища = ИсторияХранилища.Ссылка
	|		И НЕ ПоказателиВерсийХранилища.ДанныеЗагружены_Автотесты
	|ГДЕ
	|	ИсторияХранилища.Владелец = &Хранилище";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Не Выборка.Количество() Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СведенияОХранилище.ИдентификаторПроектаВГитЛаб) Тогда
		Пока Выборка.Следующий() Цикл
			РаботаСХранилищами.ЗаписатьПоказателиВерсииХранилища(Выборка.Коммит, Новый Структура("ДанныеЗагружены_Автотесты", Истина));
		КонецЦикла;

		Возврат;
	КонецЕсли;

	ПараметрыРаботыСГитЛаб = Новый Структура;
	ПараметрыРаботыСГитЛаб.Вставить("ИдентификаторПроектаВГитЛаб", СведенияОХранилище.ИдентификаторПроектаВГитЛаб);
	ПараметрыРаботыСГитЛаб.Вставить("ПараметрыПодключенияКСерверуГитЛаб", ПараметрыПодключенияКСерверуГитЛаб());

	СоединениеХТТПГитлаб = ПодключениеКСерверуГитЛаб(ПараметрыРаботыСГитЛаб.ПараметрыПодключенияКСерверуГитЛаб);
	Если СоединениеХТТПГитлаб = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыРаботыСГитЛаб.Вставить("СоединениеХТТПГитлаб", СоединениеХТТПГитлаб);

	Пока Выборка.Следующий() Цикл
		ВыполнитьОпросАвтотестовПоКоммиту(Выборка, ПараметрыРаботыСГитЛаб);
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьОпросАвтотестовПоКоммиту(ПараметрыКоммита, ПараметрыРаботыСГитЛаб)

	ПараметрыПайплайна = ПараметрыПайплайнаПоХэшуКоммита(ПараметрыРаботыСГитЛаб, ПараметрыКоммита.ХешGit);

	Если ЗначениеЗаполнено(ПараметрыКоммита.ВерхнеуровневыйПайплайнНомер) И ПараметрыКоммита.ВерхнеуровневыйПайплайнНомер = ПараметрыПайплайна.id Тогда
		НомерПайплайна = ПараметрыКоммита.ВерхнеуровневыйПайплайнНомер;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПайплайна.id) Тогда
		НомерПайплайна = ПараметрыПайплайна.id;
		РаботаСХранилищами.ЗаписатьПоказателиВерсииХранилища(ПараметрыКоммита.Коммит, Новый Структура("ВерхнеуровневыйПайплайнНомер", ПараметрыПайплайна.id));
	Иначе
		Возврат;
	КонецЕсли;

	Если ЭтоСтатусОжидания(ПараметрыПайплайна.status) Тогда

		Возврат;
	КонецЕсли;

	СведенияОбАвтотестах = СведенияОбАвтотестахВГитЛабПоПараметрам(ПараметрыРаботыСГитЛаб, НомерПайплайна);

	Если СведенияОбАвтотестах.ТестыЗавершены Тогда

		РегистрыСведений.ПройденныеТесты.Отразить(ПараметрыКоммита.Коммит, СведенияОбАвтотестах.ПройденныеТесты);

		РаботаСХранилищами.ЗаписатьПоказателиВерсииХранилища(
			ПараметрыКоммита.Коммит,
				Новый Структура(
					"АвтотестыОписание,ДанныеЗагружены_Автотесты,АвтотестыНомерЗаданияAllure,АвтотестыНомерПайпа,ОшибокАвтотесты",
					СведенияОбАвтотестах.ОписаниеРезультата,
					Истина,
					СведенияОбАвтотестах.НомерЗаданияAllure,
					СведенияОбАвтотестах.АвтотестыНомерПайпа,
					РегистрыСведений.СломанныеТесты.ОшибокАвтотесты(ПараметрыКоммита.Коммит)));

	ИначеЕсли ПараметрыПайплайна.status = Статус_Skipped() Или ПараметрыПайплайна.status = Статус_Canceled() Тогда

		РаботаСХранилищами.ЗаписатьПоказателиВерсииХранилища(
			ПараметрыКоммита.Коммит,
				Новый Структура(
					"ДанныеЗагружены_Автотесты,АвтотестыНомерЗаданияAllure,АвтотестыНомерПайпа",
					Истина,
					СведенияОбАвтотестах.НомерЗаданияAllure,
					СведенияОбАвтотестах.АвтотестыНомерПайпа));

	КонецЕсли;

	Если СведенияОбАвтотестах.ЕстьОшибка Тогда
		ТекстОшибки = СтрШаблон(
			"При получении результата автотестов возникли ошибки:
			|Хранилище: %1
			|Номер пайплайна: %2
			|Хеш: %3
			|Результат опроса: %4",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыКоммита.Коммит, "Владелец"),
			НомерПайплайна,
			ПараметрыКоммита.ХешGit,
			СведенияОбАвтотестах.ОписаниеРезультата);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_Автотесты("ВыполнитьОпросАвтотестовПоКоммиту"), УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

Функция ИмяСобытияЖР_Автотесты(ВложенноеСобытие = "")
	Возврат "Автотесты" + ?(ПустаяСтрока(ВложенноеСобытие), "", "." + ВложенноеСобытие);
КонецФункции

Функция ПараметрыПайплайнаПоХэшуКоммита(ПараметрыРаботыСГитЛаб, ХэшКоммита)

	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("status", "");
	РезультатФункции.Вставить("id", 0);

	ПараметрыАдреса = Новый Структура;
	ПараметрыАдреса.Вставить("ИдентификаторПроектаГитЛаб", ПараметрыРаботыСГитЛаб.ИдентификаторПроектаВГитЛаб);
	ПараметрыАдреса.Вставить("ХэшКоммита", ХэшКоммита);
	ХТТПЗапрос = Новый HTTPЗапрос;
	ХТТПЗапрос.АдресРесурса = АдресЗапросаСведенийИзГитЛабПоВидуОперации("GetSingleCommit", ПараметрыАдреса);
	ХТТПЗапрос.Заголовки.Вставить("PRIVATE-TOKEN", ПараметрыРаботыСГитЛаб.ПараметрыПодключенияКСерверуГитЛаб.ТокенДоступа);

	Ответ = ПараметрыРаботыСГитЛаб.СоединениеХТТПГитлаб.Получить(ХТТПЗапрос);

	Если Не Ответ.КодСостояния = 200 Тогда
		Возврат РезультатФункции;
	КонецЕсли;

	ДанныеОтвета = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());

	Если Не (ДанныеОтвета.Свойство("last_pipeline") И ТипЗнч(ДанныеОтвета.last_pipeline) = Тип("Структура")) Тогда

		Возврат РезультатФункции;
	КонецЕсли;

	РезультатФункции.status = ДанныеОтвета.last_pipeline.status;
	РезультатФункции.id 	= ДанныеОтвета.last_pipeline.id;

	Возврат РезультатФункции;

КонецФункции

Функция СведенияОбАвтотестахВГитЛабПоПараметрам(ПараметрыРаботыСГитЛаб, НомерПайплайна) Экспорт

	СтатистикаАвтотестов = Новый Структура;
	СтатистикаАвтотестов.Вставить("МодульныеТестыВсего", 0);
	СтатистикаАвтотестов.Вставить("МодульныеТестыУспешно", 0);
	СтатистикаАвтотестов.Вставить("МодульныеТестыОшибки", 0);
	СтатистикаАвтотестов.Вставить("СценарныеТестыВсего", 0);
	СтатистикаАвтотестов.Вставить("СценарныеТестыУспешно", 0);
	СтатистикаАвтотестов.Вставить("СценарныеТестыОшибки", 0);

	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ЕстьОшибка", Ложь);
	РезультатФункции.Вставить("ТестыЗавершены", Ложь);
	РезультатФункции.Вставить("СтатистикаАвтотестов", СтатистикаАвтотестов);
	РезультатФункции.Вставить("ОписаниеРезультата", "");
	РезультатФункции.Вставить("НомерЗаданияAllure", 0);
	РезультатФункции.Вставить("АвтотестыНомерПайпа", 0);
	РезультатФункции.Вставить("ПройденныеТесты", ПустыеПройденныеТесты());

	ПараметрыАдреса = Новый Структура;
	ПараметрыАдреса.Вставить("ИдентификаторПроектаГитЛаб", ПараметрыРаботыСГитЛаб.ИдентификаторПроектаВГитЛаб);
	ПараметрыАдреса.Вставить("НомерПайплайна", НомерПайплайна);

	ХТТПЗапрос = Новый HTTPЗапрос;
	ХТТПЗапрос.АдресРесурса = АдресЗапросаСведенийИзГитЛабПоВидуОперации("ListPipelineBridges", ПараметрыАдреса);
	ХТТПЗапрос.Заголовки.Вставить("PRIVATE-TOKEN", ПараметрыРаботыСГитЛаб.ПараметрыПодключенияКСерверуГитЛаб.ТокенДоступа);

	Ответ = ПараметрыРаботыСГитЛаб.СоединениеХТТПГитлаб.Получить(ХТТПЗапрос);

	Если Не Ответ.КодСостояния = 200 Тогда
		РезультатФункции.ЕстьОшибка 		= Истина;
		РезультатФункции.ОписаниеРезультата = СтрШаблон("Ошибка %1 при получении сведений: %2", Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
		Возврат РезультатФункции;
	КонецЕсли;

	ДанныеОтвета = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());

	Если Не ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
		Возврат РезультатФункции;
	КонецЕсли;

	ЕстьЗаданияПоАвтотестам = Ложь;
	Для Каждого ПараметрыРаботы Из ДанныеОтвета Цикл
		Если Не СтрНайти(ПараметрыРаботы.stage, "upstream_tests") Тогда
			Продолжить;
		КонецЕсли;

		ЕстьЗаданияПоАвтотестам = Истина;

		Если ПараметрыРаботы.status = Статус_Canceled() Или ПараметрыРаботы.status = Статус_Skipped() Тогда

			РезультатФункции.Вставить("ТестыЗавершены", Истина);
			РезультатФункции.Вставить("ОписаниеРезультата", СтрШаблон("Автотесты %1", ?(ПараметрыРаботы.status = Статус_Canceled(), "отменены", "пропущены")));
			Возврат РезультатФункции;
		КонецЕсли;

		Если Не (ПараметрыРаботы.Свойство("downstream_pipeline") И ТипЗнч(ПараметрыРаботы.downstream_pipeline) = Тип("Структура")
			И ПараметрыРаботы.downstream_pipeline.Свойство("status")) Тогда

			Возврат РезультатФункции;
		КонецЕсли;

		Если ЭтоСтатусОжидания(ПараметрыРаботы.downstream_pipeline.status) Тогда

			Возврат РезультатФункции;
		КонецЕсли;

		ПараметрыАдреса.Вставить("НомерПайплайна", ПараметрыРаботы.downstream_pipeline.id);

		РезультатФункции.АвтотестыНомерПайпа	= ПараметрыРаботы.downstream_pipeline.id;
		РезультатФункции.НомерЗаданияAllure 	= НомерЗаданияAllureПоПараметрам(ПараметрыАдреса, ПараметрыРаботыСГитЛаб, ХТТПЗапрос);

		ХТТПЗапрос.АдресРесурса = АдресЗапросаСведенийИзГитЛабПоВидуОперации("GetAPipelineTestReport", ПараметрыАдреса);

		Ответ = ПараметрыРаботыСГитЛаб.СоединениеХТТПГитлаб.Получить(ХТТПЗапрос);

		Если Не Ответ.КодСостояния = 200 Тогда
			РезультатФункции.ЕстьОшибка 		= Истина;
			РезультатФункции.ОписаниеРезультата = СтрШаблон("Ошибка при получении сведений: ошибка %1", Ответ.КодСостояния);
			Возврат РезультатФункции;
		КонецЕсли;

		ДанныеОтвета = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());

		Для Каждого СводныеСведенияПоАвтотестам Из ДанныеОтвета.test_suites Цикл

			Если СтрНайти(НРег(СводныеСведенияПоАвтотестам.name), "модульные тесты") Тогда
				Префикс = "МодульныеТесты";
			ИначеЕсли СтрНайти(НРег(СводныеСведенияПоАвтотестам.name), "сценарные тесты") Тогда
				Префикс = "СценарныеТесты";
			Иначе
				Продолжить;
			КонецЕсли;

			СтатистикаАвтотестов[Префикс + "Всего"] 	= СтатистикаАвтотестов[Префикс + "Всего"] + СводныеСведенияПоАвтотестам.total_count;
			СтатистикаАвтотестов[Префикс + "Успешно"] 	= СтатистикаАвтотестов[Префикс + "Успешно"] + СводныеСведенияПоАвтотестам.success_count;
			СтатистикаАвтотестов[Префикс + "Ошибки"] 	= СтатистикаАвтотестов[Префикс + "Ошибки"] + СводныеСведенияПоАвтотестам.failed_count
				+ СводныеСведенияПоАвтотестам.error_count;

			Для Каждого СтрокаТеста Из СводныеСведенияПоАвтотестам.test_cases Цикл
				НоваяСтрока = РезультатФункции.ПройденныеТесты.Добавить();
				НоваяСтрока.Тест = Справочники.Тесты.Тест(СтрокаТеста.name, СтрокаТеста.classname);
				НоваяСтрока.стрСтатус = СтрокаТеста.status;
				Если ТипЗнч(СтрокаТеста.system_output) = Тип("Структура") И СтрокаТеста.system_output.Свойство("message") Тогда
					НоваяСтрока.ТекстОшибки = СтрокаТеста.system_output.message;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

	Если Не ЕстьЗаданияПоАвтотестам Тогда
		РезультатФункции.Вставить("ТестыЗавершены", Истина);
		РезультатФункции.Вставить("ОписаниеРезультата", "Автотесты пропущены");
		Возврат РезультатФункции;
	КонецЕсли;

	РезультатФункции.ТестыЗавершены 	= Истина;
	РезультатФункции.ОписаниеРезультата = СтрШаблон("%1", Формат(СтатистикаАвтотестов.МодульныеТестыОшибки + СтатистикаАвтотестов.СценарныеТестыОшибки,
		"ЧН=; ЧГ="));

	Возврат РезультатФункции;

КонецФункции

Функция ПустыеПройденныеТесты()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Тест", Новый ОписаниеТипов("СправочникСсылка.Тесты"));
	Таблица.Колонки.Добавить("стрСтатус", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
	Возврат Таблица;

КонецФункции

Функция АдресЗапросаСведенийИзГитЛабПоВидуОперации(ВидОперации, ПараметрыАдреса)

	// https://docs.gitlab.com/ee/api/pipelines.html

	Если ВидОперации = "GetSingleCommit" Тогда
		Возврат СтрШаблон("/api/v4/projects/%1/repository/commits/%2", ПараметрыАдреса.ИдентификаторПроектаГитЛаб, ПараметрыАдреса.ХэшКоммита);

	ИначеЕсли ВидОперации = "ListPipelineBridges" Тогда
		Возврат СтрШаблон("/api/v4/projects/%1/pipelines/%2/bridges", ПараметрыАдреса.ИдентификаторПроектаГитЛаб, Формат(ПараметрыАдреса.НомерПайплайна,
			"ЧН=;ЧГ="));

	ИначеЕсли ВидОперации = "GetAPipelineTestReport" Тогда
		Возврат СтрШаблон("/api/v4/projects/%1/pipelines/%2/test_report", ПараметрыАдреса.ИдентификаторПроектаГитЛаб, Формат(ПараметрыАдреса.НомерПайплайна,
			"ЧН=;ЧГ="));

	ИначеЕсли ВидОперации = "ListPipelineJobs" Тогда
		Возврат СтрШаблон("/api/v4/projects/%1/pipelines/%2/jobs", ПараметрыАдреса.ИдентификаторПроектаГитЛаб, Формат(ПараметрыАдреса.НомерПайплайна,
			"ЧН=;ЧГ="));

	ИначеЕсли ВидОперации = "NewPipeline" Тогда
		ПараметрыАдреса.Вставить("Метод", "POST");
		Тег = ?(ПараметрыАдреса.Свойство("tag"), ПараметрыАдреса.tag, "master");
		Адрес = СтрШаблон("/api/v4/projects/%1/pipeline?ref=%2", ПараметрыАдреса.ИдентификаторПроектаГитЛаб, Тег);
		Если ПараметрыАдреса.Свойство("variables") Тогда
			Адрес = СтрШаблон("%1&variables=%2", Адрес, ПараметрыАдреса.variables);
		КонецЕсли;
		Возврат Адрес;

	ИначеЕсли ВидОперации = "CreateNewTag" Тогда
		ПараметрыАдреса.Вставить("Метод", "POST");
		Адрес = СтрШаблон("/api/v4/projects/%1/repository/tags?tag_name=%2&ref=%3", ПараметрыАдреса.ИдентификаторПроектаГитЛаб, ПараметрыАдреса.Тег,
			ПараметрыАдреса.ХэшКоммита);
		Возврат Адрес;

	ИначеЕсли ВидОперации = "GetSinglePipeline" Тогда
		Возврат СтрШаблон("/api/v4/projects/%1/pipelines/%2", ПараметрыАдреса.ИдентификаторПроектаГитЛаб, XMLСтрока(ПараметрыАдреса.НомерПайплайна));

	ИначеЕсли ВидОперации = "comments" Тогда

		ИдентификаторПроекта = ПараметрыАдреса.ИдентификаторПроектаГитЛаб;
		ХэшКоммита = ПараметрыАдреса.ХэшКоммита;

		АдресЗапроса  = СтрШаблон("/api/v4/projects/%1/repository/commits/%2/comments?per_page=100", ИдентификаторПроекта, ХэшКоммита);

		Возврат АдресЗапроса;

	ИначеЕсли ВидОперации = "GetListRepositoryBranches" Тогда
		Возврат СтрШаблон("/api/v4/projects/%1/repository/branches", ПараметрыАдреса.ИдентификаторПроектаГитЛаб);

	Иначе

		ВызватьИсключение СтрШаблон("Неизвестный вид операции ""%1"" с git", ВидОперации);

	КонецЕсли;

КонецФункции

Функция ПараметрыПодключенияКСерверуГитЛаб() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Сервер = Справочники.СерверыGIT.Автомакон;
	АдресСервера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сервер, "АдресСервера");
	Токен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Сервер);
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("АдресСервера", АдресСервера);
	РезультатФункции.Вставить("ТокенДоступа", Токен);
	Возврат РезультатФункции;

КонецФункции

Функция ПодключениеКСерверуГитЛаб(ПараметрыПодключения = Неопределено)

	Если ПараметрыПодключения = Неопределено Тогда
		ПараметрыПодключения = ПараметрыПодключенияКСерверуГитЛаб();
	КонецЕсли;

	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;

	HTTPСоединение = Новый HTTPСоединение(ПараметрыПодключения.АдресСервера, , , , , , ЗащищенноеСоединение);

	Возврат HTTPСоединение;

КонецФункции

Функция Статус_Pending()

	Возврат "pending";

КонецФункции

Функция Статус_Running()

	Возврат "running";

КонецФункции

Функция Статус_Пустой()

	Возврат "";

КонецФункции

Функция Статус_Canceled()

	Возврат "canceled";

КонецФункции

Функция Статус_Skipped()

	Возврат "skipped";

КонецФункции

Функция Статус_WaitingForResource()

	Возврат "waiting_for_resource";

КонецФункции

Функция ЭтоСтатусОжидания(Статус) Экспорт
	Возврат Статус = Статус_Pending() Или Статус = Статус_Running() Или Статус = Статус_WaitingForResource() Или Статус = Статус_Пустой();
КонецФункции

Функция НомерЗаданияAllureПоПараметрам(ПараметрыАдреса, ПараметрыРаботыСГитЛаб, ХТТПЗапрос = Неопределено)

	РезультатФункции = 0;

	Если ХТТПЗапрос = Неопределено Тогда
		ХТТПЗапрос 	= Новый HTTPЗапрос;
		ХТТПЗапрос.Заголовки.Вставить("PRIVATE-TOKEN", ПараметрыРаботыСГитЛаб.ПараметрыПодключенияКСерверуГитЛаб.ТокенДоступа);
	КонецЕсли;

	ХТТПЗапрос.АдресРесурса = АдресЗапросаСведенийИзГитЛабПоВидуОперации("ListPipelineJobs", ПараметрыАдреса);

	Ответ = ПараметрыРаботыСГитЛаб.СоединениеХТТПГитлаб.Получить(ХТТПЗапрос);
	Если Не Ответ.КодСостояния = 200 Тогда
		Возврат РезультатФункции;
	КонецЕсли;

	ДанныеОтвета = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());
	Если Не ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
		Возврат РезультатФункции;
	КонецЕсли;

	Для Каждого ДанныеЗадания Из ДанныеОтвета Цикл
		Если ДанныеЗадания.name = ИмяЗаданияПайплайна_Allure() Тогда
			РезультатФункции = ДанныеЗадания.id;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат РезультатФункции;

КонецФункции

Функция ИмяЗаданияПайплайна_Allure()

	Возврат "Allure";

КонецФункции

#КонецОбласти

Функция ВыполнитьЗапросКGit(ВидОперации, ПараметрыАдреса) Экспорт
	// ПараметрыАдреса: ИдентификаторПроектаГитЛаб, НомерПайплайна и т.д.
	ПараметрыПодключенияКСерверуГитЛаб = ПараметрыПодключенияКСерверуГитЛаб();
	ХТТПЗапрос 	= Новый HTTPЗапрос;
	ХТТПЗапрос.Заголовки.Вставить("PRIVATE-TOKEN", ПараметрыПодключенияКСерверуГитЛаб.ТокенДоступа);
	ХТТПЗапрос.АдресРесурса = АдресЗапросаСведенийИзГитЛабПоВидуОперации(ВидОперации, ПараметрыАдреса);
	СоединениеХТТПГитлаб = ПодключениеКСерверуГитЛаб(ПараметрыПодключенияКСерверуГитЛаб);
	Если ПараметрыАдреса.Свойство("Метод") Тогда
		Ответ = СоединениеХТТПГитлаб.ВызватьHTTPМетод(ПараметрыАдреса.Метод, ХТТПЗапрос);
	Иначе
		Ответ = СоединениеХТТПГитлаб.Получить(ХТТПЗапрос);
	КонецЕсли;

	ДанныеОтвета = Новый Структура;
	Если Ответ.КодСостояния <= 300 Тогда

		Результат = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());

		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			ДанныеОтвета = Результат;
		Иначе
			ДанныеОтвета.Вставить("Результат", Результат);
		КонецЕсли;

	КонецЕсли;

	ДанныеОтвета.Вставить("КодСостояния", Ответ.КодСостояния);
	ДанныеОтвета.Вставить("Тело", Ответ.ПолучитьТелоКакСтроку());

	Возврат ДанныеОтвета;

КонецФункции

Процедура ЗагрузитьОшибкиАПК(Хранилище) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияХранилища.Ссылка КАК Ссылка,
	|	ИсторияХранилища.Код КАК Код
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыСинтаксическойПроверки КАК РезультатыСинтаксическойПроверки
	|		ПО (РезультатыСинтаксическойПроверки.ОбъектПроверки = ИсторияХранилища.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МаксимальныйПериод.Период КАК Период,
	|			МаксимальныйПериод.ВерсияХранилища КАК ВерсияХранилища,
	|			МаксимальныйПериод.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная,
	|			СтатусыВерсийХранилища.Период КАК Период1,
	|			СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища1,
	|			СтатусыВерсийХранилища.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная1,
	|			СтатусыВерсийХранилища.Статус КАК Статус,
	|			СтатусыВерсийХранилища.Ответственный КАК Ответственный,
	|			СтатусыВерсийХранилища.Процесс КАК Процесс,
	|			СтатусыВерсийХранилища.Комментарий КАК Комментарий
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(СтатусыВерсийХранилища.Период) КАК Период,
	|				СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
	|				МАКСИМУМ(СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК ДатаЗаписиУниверсальная
	|			ИЗ
	|				РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|			ГДЕ
	|				СтатусыВерсийХранилища.ВерсияХранилища.Владелец = &Хранилище
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СтатусыВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|				ПО МаксимальныйПериод.ВерсияХранилища = СтатусыВерсийХранилища.ВерсияХранилища
	|					И МаксимальныйПериод.Период = СтатусыВерсийХранилища.Период
	|					И МаксимальныйПериод.ДатаЗаписиУниверсальная = СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК СтатусыВерсийХранилищаСрезПоследних
	|		ПО (СтатусыВерсийХранилищаСрезПоследних.ВерсияХранилища = ИсторияХранилища.Ссылка)
	|ГДЕ
	|	ИсторияХранилища.Владелец = &Хранилище
	|	И СтатусыВерсийХранилищаСрезПоследних.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.ЗагрузкаДанных), ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.Ошибка))
	|	И ИсторияХранилища.Владелец.ХранилищеРазработки
	|	И НЕ ЕСТЬNULL(РезультатыСинтаксическойПроверки.ПровереноАПК, ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсторияХранилища.Ссылка,
	|	ИсторияХранилища.Код
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиВерсийХранилища КАК ПоказателиВерсийХранилища
	|		ПО (ПоказателиВерсийХранилища.ВерсияХранилища = ИсторияХранилища.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыСинтаксическойПроверки КАК РезультатыСинтаксическойПроверки
	|		ПО (РезультатыСинтаксическойПроверки.ОбъектПроверки = ИсторияХранилища.Ссылка)
	|ГДЕ
	|	ИсторияХранилища.Владелец = &Хранилище
	|	И ИсторияХранилища.Владелец.ХранилищеРазработки
	|	И ЕСТЬNULL(ПоказателиВерсийХранилища.ПроверкаКодаВручную, ЛОЖЬ)
	|	И НЕ ЕСТЬNULL(РезультатыСинтаксическойПроверки.ПровереноАПК, ЛОЖЬ)";
	Запрос.УстановитьПараметр("Хранилище", Хранилище);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Хранилище.НомерВАПК) Тогда
			ДанныеАПК = ДанныеАПКПоКоммиту(Выборка.Код, Хранилище.НомерВАПК);
			Если Не ДанныеАПК = Неопределено И ДанныеАПК.Проверен Тогда
				РаботаСХранилищами.ЗаписатьРезультатПроверкиАпкВерсииХранилища(Выборка.Ссылка, ДанныеАПК.КоличествоОшибок);
				
				Мониторинг.ЗаписатьМониторингОперации(
					Справочники.КлючевыеОперацииМониторинга.ДлительностьПроверкиКоммитаАПК,
					Выборка.Ссылка,
					,
					,
					,
					ДанныеАПК.ВремяПроверки);
				Мониторинг.ЗаписатьЗавершениеОперации(
					Справочники.КлючевыеОперацииМониторинга.АвтоматизированнаяПроверкаВерсииХранилища,
					Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ДанныеАПКПоКоммиту(НомерКоммита, НомерВАПК)

	Результат = Неопределено;
	ЕстьОшибки = Ложь;

	УстановитьПривилегированныйРежим(Истина);
	ИмяПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПК", "Пользователь");
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПК", "Пароль");

	HTTPСоединение = Новый HTTPСоединение(Константы.АдресСервераАПК.Получить(), , ИмяПользователя, Пароль);
	АдресРесурса = СтрШаблон("/apk/hs/apk/commit/%1/%2", НомерВАПК, Формат(НомерКоммита, "ЧГ="));
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	Ответ = HTTPСоединение.Получить(Запрос);

	Если Ответ.КодСостояния = 200 Тогда
		Попытка
			Результат = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());
		Исключение
			ЕстьОшибки = Истина;
		КонецПопытки;
	Иначе
		ЕстьОшибки = Истина;
	КонецЕсли;

	Если ЕстьОшибки Тогда
		ТекстОшибки = СтрШаблон(
			"Ошибка при получении данных по коммиту в АПК
			|По адресу: %1
			|КодСостояния: %2
			|Ответ:%3", АдресРесурса, Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_АПК("ДанныеАПКПоКоммиту"), УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
	КонецЕсли;
	Возврат Результат;

КонецФункции

Функция ИмяСобытияЖР_АПК(ВложенноеСобытие = "")
	Возврат "АПК" + ?(ПустаяСтрока(ВложенноеСобытие), "", "." + ВложенноеСобытие);
КонецФункции

Процедура ОбновитьИсториюХранилищаВАПК(Хранилище) Экспорт

	ЕстьКонфигурация = ВыполнитьЗапросКАПК("ЕстьКонфигурация", Хранилище.Наименование).ЕстьКонфигурация;
	Если Не ЕстьКонфигурация Тогда
		Возврат;
	КонецЕсли;

	Коммиты = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияХранилища.Ссылка КАК Коммит
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|ГДЕ
	|	ИсторияХранилища.Владелец = &Хранилище
	|	И ИсторияХранилища.Код > &НомерПоследнегоКоммита
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсторияХранилища.Код";
	Запрос.УстановитьПараметр("Хранилище", Хранилище);
	Запрос.УстановитьПараметр("НомерПоследнегоКоммита", ВыполнитьЗапросКАПК("НомерПоследнегоКоммита", Хранилище.Наименование).НомерПоследнегоКоммита);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Коммит = Выборка.Коммит;

		ДанныеКоммита = Новый Структура;
		ДанныеКоммита.Вставить("Номер", Коммит.Код);
		ДанныеКоммита.Вставить("Дата", Коммит.Дата);
		ДанныеКоммита.Вставить("Автор", Коммит.Автор);
		ДанныеКоммита.Вставить("Изменены", Коммит.Изменены.ВыгрузитьКолонку("ИмяОбъекта"));
		ДанныеКоммита.Вставить("Добавлены", Коммит.Добавлены.ВыгрузитьКолонку("ИмяОбъекта"));
		ДанныеКоммита.Вставить("Удалены", Коммит.Удалены.ВыгрузитьКолонку("ИмяОбъекта"));
		ДанныеКоммита.Вставить("Комментарий", Коммит.Комментарий);
		Коммиты.Добавить(ДанныеКоммита);

	КонецЦикла;

	Если Коммиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ВыполнитьЗапросКАПК("ОбновитьКоммиты", Хранилище.Наименование, Новый Структура("Коммиты", Коммиты));

КонецПроцедуры

Функция ВыполнитьЗапросКАПК(ВидЗапроса, ИмяКонфигурации, ПараметрыЗапроса = Неопределено) Экспорт

	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("ВидЗапроса", ВидЗапроса);
	ДанныеЗапроса.Вставить("ИмяКонфигурации", ИмяКонфигурации);
	ДанныеЗапроса.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);

	УстановитьПривилегированныйРежим(Истина);
	Сервер = Константы.АдресСервераАПК.Получить();
	ИмяПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПК", "Пользователь");
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПК", "Пароль");
	АдресРесурса = "apk/hs/apk/commits";

	Соединение = Новый HTTPСоединение(Сервер, , ИмяПользователя, Пароль);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтроковыеФункцииУККлиентСервер.ЗаписатьЗначениеJSON(ДанныеЗапроса));

	Результат = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	РезультатСтрокой = Результат.ПолучитьТелоКакСтроку();
	
	Если ЗначениеЗаполнено(РезультатСтрокой) Тогда
		Возврат СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(Результат.ПолучитьТелоКакСтроку());
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции

Функция ПолучитьДанныеПроверкиАПК(НомерВерсииХранилища, ИмяКонфигурации) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	АдресРесурса = Константы.АдресСервераАПК.Получить() + "/apk/hs/apk/checkinfo";
	ИмяПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПК", "Пользователь");
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПК", "Пароль");
	ПараметрыАутентификации = Новый Структура("Пользователь, Пароль", ИмяПользователя, Пароль);
	ПараметрыЗапроса = Новый Структура("StorageVersionNumber, ConfigurationName", НомерВерсииХранилища, ИмяКонфигурации);
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	ДополнительныеПараметры.Вставить("Аутентификация", ПараметрыАутентификации);
	Ответ = КоннекторHTTP.Get(АдресРесурса,, ДополнительныеПараметры);
	Результат = КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8);
	
	Возврат ЗначениеИзСтрокиВнутр(Результат); // Табличный документ.
	
КонецФункции

Функция РезультатПроверкиВерсииХранилища(ВерсияХранилища) Экспорт

	ДанныеПроверки = КонструкторДанныхПроверкиВерсииХранилища();
	
	// БСЛ-ЛС
	ИмяСервера = "izb-app20";
	АдресРесурса = "bsl-ls/hs/SyntaxCheck/GetErrors";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХешиGitВерсийХранилища.Хеш КАК Хеш
		|ИЗ
		|	РегистрСведений.ХешиGitВерсийХранилища КАК ХешиGitВерсийХранилища
		|ГДЕ
		|	ХешиGitВерсийХранилища.ВерсияХранилища = &ОбъектПроверки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КоммитыДополненийСрезПоследних.Хеш
		|ИЗ
		|	РегистрСведений.КоммитыДополнений.СрезПоследних КАК КоммитыДополненийСрезПоследних
		|ГДЕ
		|	КоммитыДополненийСрезПоследних.ВерсияДополнения = &ОбъектПроверки";
	Запрос.УстановитьПараметр("ОбъектПроверки", ВерсияХранилища);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("is_data_format", "true");
		ОбъектТелаЗапроса = Новый Структура("CommitHash", Выборка.Хеш);
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Json", ОбъектТелаЗапроса);
		ОтветБСЛ_ЛС = КоннекторHTTP.GetJson(АдресРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
		Для Каждого СтрокаПроверки Из ОтветБСЛ_ЛС Цикл
			ЗаполнитьЗначенияСвойств(ДанныеПроверки.Добавить(), СтрокаПроверки);
		КонецЦикла;
	КонецЕсли;
	
	// АПК
	Если ТипЗнч(ВерсияХранилища) = Тип("СправочникСсылка.ИсторияХранилища") Тогда
		УстановитьПривилегированныйРежим(Истина);
		АдресРесурса = Константы.АдресСервераАПК.Получить() + "/apk/hs/apk/checkinfo";
		ИмяПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПК", "Пользователь");
		Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПК", "Пароль");
		ПараметрыАутентификации = Новый Структура("Пользователь, Пароль", ИмяПользователя, Пароль);
		РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияХранилища, "Код, Владелец.Наименование");
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("StorageVersionNumber", РеквизитыВерсии.Код);
		ПараметрыЗапроса.Вставить("ConfigurationName", РеквизитыВерсии.ВладелецНаименование);
		ПараметрыЗапроса.Вставить("is_data_format", "true");
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
		ДополнительныеПараметры.Вставить("Аутентификация", ПараметрыАутентификации);
		ОтветАПК = КоннекторHTTP.GetJson(АдресРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
		Для Каждого СтрокаПроверки Из ОтветАПК Цикл
			ЗаполнитьЗначенияСвойств(ДанныеПроверки.Добавить(), СтрокаПроверки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеПроверки;
КонецФункции 
 
Функция КонструкторДанныхПроверкиВерсииХранилища()
	Конструктор = Новый ТаблицаЗначений;
	Конструктор.Колонки.Добавить("Правило", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	Конструктор.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Конструктор.Колонки.Добавить("Уточнение", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	Конструктор.Колонки.Добавить("Критичность", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	Конструктор.Колонки.Добавить("Объект", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	Возврат Конструктор;
КонецФункции

Функция ПолучитьОписаниеПравилаПроверкиАПК(НаименованиеПравила) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	АдресРесурса = СтрШаблон("http://%1/apk/hs/apk/rules/%2", Константы.АдресСервераАПК.Получить(), НаименованиеПравила);
	ИмяПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПК", "Пользователь");
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПК", "Пароль");
	ПараметрыАутентификации = Новый Структура("Пользователь, Пароль", ИмяПользователя, Пароль);
	//ПараметрыЗапроса = Новый Структура("StorageVersionNumber, ConfigurationName", НомерВерсииХранилища, ИмяКонфигурации);
	ДополнительныеПараметры = Новый Структура();
	//ДополнительныеПараметры.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	ДополнительныеПараметры.Вставить("Аутентификация", ПараметрыАутентификации);
	Ответ = КоннекторHTTP.Get(АдресРесурса,, ДополнительныеПараметры);
	Если Ответ.КодСостояния >= 300 Тогда
		ВызватьИсключение СтрШаблон("При выполнении запроса возникла ошибка: %1", КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8));
	КонецЕсли;
	Результат = КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8);
	Возврат Результат;
	
КонецФункции

