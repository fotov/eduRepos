
#Область СлужебныйПрограммныйИнтерфейс

Процедура СозданиеВетокГитПоЗадачеОбработчикЗадания() Экспорт
	
	//РегЗадания.ПроверитьРазрешениеЗапускаРегламентныхЗаданий();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОперацийОбработкиОчереди.ОжидаетОбработки);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьСозданияВетокГитПоЗадачеСрезПоследних.ЗадачаМетеор КАК ЗадачаМетеор
		|ИЗ
		|	РегистрСведений.ОчередьСозданияВетокГитПоЗадаче.СрезПоследних КАК ОчередьСозданияВетокГитПоЗадачеСрезПоследних
		|ГДЕ
		|	ОчередьСозданияВетокГитПоЗадачеСрезПоследних.Статус = &Статус";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КонфигурацииПоЗадачам = РезультатЗапроса.Выгрузить();
	КонфигурацииПоЗадачам.Колонки.Добавить("КонфигурацияМетеор", ОбщегоНазначения.ОписаниеТипаСтрока(80));
	Для Каждого СтрокаКофнигурацииПоЗадаче Из КонфигурацииПоЗадачам Цикл
		ДанныеЗадачи = ИнтеграцияСМетеор.ПолучитьДанныеЗадачиИзМетеор(СтрокаКофнигурацииПоЗадаче.ЗадачаМетеор);
		ИдКонфигурации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗадачи.РеквизитыТехПроекта, "Konfiguratsiya_id", "");
		СтрокаКофнигурацииПоЗадаче.КонфигурацияМетеор = ИдКонфигурации;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонфигурацииПоЗадачам", КонфигурацииПоЗадачам);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(КонфигурацииПоЗадачам.ЗадачаМетеор КАК Справочник.ЗадачиМетеор) КАК ЗадачаМетеор,
		|	КонфигурацииПоЗадачам.КонфигурацияМетеор КАК КонфигурацияМетеор
		|ПОМЕСТИТЬ КонфигурацииПоЗадачам
		|ИЗ
		|	&КонфигурацииПоЗадачам КАК КонфигурацииПоЗадачам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Базы1С.Владелец.ПроектGitEDT.Код КАК ПроектGitКод,
		|	Базы1С.Владелец.ПроектGitEDT.Сервер КАК СерверGit,
		|	КонфигурацииПоЗадачам.ЗадачаМетеор КАК ЗадачаМетеор,
		|	КонфигурацииПоЗадачам.КонфигурацияМетеор КАК КонфигурацияМетеор,
		|	КонфигурацииПоЗадачам.ЗадачаМетеор.id КАК ЗадачаМетеорИд,
		|	Базы1С.Владелец.ПроектGitEDT.ИмяВеткиПоУмолчанию КАК ИмяВеткиGitПоУмолчанию
		|ИЗ
		|	КонфигурацииПоЗадачам КАК КонфигурацииПоЗадачам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Базы1С КАК Базы1С
		|		ПО КонфигурацииПоЗадачам.КонфигурацияМетеор = Базы1С.КонфигурацияМетеор";
	ВыборкаЗадачиСПроектами = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗадачиСПроектами.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаЗадачиСПроектами.ПроектGitКод) Тогда
			РезультатСозданияВетки = РаботаСGIT.СоздатьВеткуАПИ(
				ВыборкаЗадачиСПроектами.ПроектGitКод,
				ВыборкаЗадачиСПроектами.ЗадачаМетеорИд,
				ВыборкаЗадачиСПроектами.ИмяВеткиGitПоУмолчанию,
				ВыборкаЗадачиСПроектами.СерверGit);
			Если РезультатСозданияВетки.КодСостояния >= 300 Тогда
				ЗаписьЖурналаРегистрации(
					"Работа с гит.Создание ветки",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.РегистрыСведений.ОчередьСозданияВетокГитПоЗадаче,
					,
					СтрШаблон(
						"Задача: %1
						|Ко состояния: %2
						|Ответ АПИ: %3",
						ВыборкаЗадачиСПроектами.ЗадачаМетеорИд,
						РезультатСозданияВетки.КодСостояния,
						РезультатСозданияВетки.ТелоОтвета));
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МЗ = РегистрыСведений.ОчередьСозданияВетокГитПоЗадаче.СоздатьМенеджерЗаписи();
		МЗ.Период = ТекущаяДатаСеанса();
		МЗ.ЗадачаМетеор = ВыборкаЗадачиСПроектами.ЗадачаМетеор;
		МЗ.Статус = Перечисления.СтатусыОперацийОбработкиОчереди.Обработано;
		МЗ.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти