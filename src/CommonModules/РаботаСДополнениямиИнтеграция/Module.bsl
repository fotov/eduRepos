//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Модуль предназначен для процедур и функций интеграции механизма дополнений.
// * Процедуры и функции должны быть независимы от конфигурации и библиотек.
//////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Сериализует переданные данные в строку JSON
//
// Параметры:
//  Данные	 - Произвольный	 - данные для преобразования. В общем случае - структура.
// 
// Возвращаемое значение:
//  Строка - строка в формате JSON
//
Функция ЗаписатьЗначениеJSON(Данные) Экспорт
	Возврат РаботаСДополнениямиИнтеграцияКлиентСервер.ЗаписатьЗначениеJSON(Данные);
КонецФункции

// Получает данные из строки JSON
//
// Параметры:
//  СтрокаJSON - Строка - строка в формате JSON
// 
// Возвращаемое значение:
//  Произвольный
//
Функция ПрочитатьЗначениеJSON(СтрокаJSON) Экспорт
	Возврат РаботаСДополнениямиИнтеграцияКлиентСервер.ПрочитатьЗначениеJSON(СтрокаJSON);
КонецФункции

// Сериализует переданные данные в двоичные данные
//
// Параметры:
//  Данные	 - Произвольный	 - данные для преобразования.
// 
// Возвращаемое значение:
//  ДвоичныеДанные -
//
Функция ЗаписатьЗначениеДвоичныеДанные(Данные) Экспорт
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	Если Не ЗначениеВФайл(ВременныйФайл, Данные) Тогда
		ВызватьИсключение "Не удалось записать данные в файл";
	КонецЕсли;
	ДвоичныеДанные = Новый ДвоичныеДанные(ВременныйФайл);
	Попытка
		УдалитьФайлы(ВременныйФайл);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Информация,,, ОписаниеОшибки());
	КонецПопытки;
	Возврат ДвоичныеДанные;
КонецФункции

// Сериализует переданные данные в двоичные данные
//
// Параметры:
//  ДвоичныеДанные	- ДвоичныеДанные
// 
// Возвращаемое значение:
//  Произвольный -
//
Функция ПрочитатьЗначениеДвоичныеДанные(ДвоичныеДанные) Экспорт
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ВременныйФайл);
	ПолученноеЗначение = ЗначениеИзФайла(ВременныйФайл);
	Попытка
		УдалитьФайлы(ВременныйФайл);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Информация,,, ОписаниеОшибки());
	КонецПопытки;
	Возврат ПолученноеЗначение;
КонецФункции

// Дополняет массив приемник из массива источника
//
// Параметры:
//  МассивПриемник	 - Массив - массив приемник
//  МассивИсточник	 - Массив - массив источник
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник) Экспорт
	РаботаСДополнениямиИнтеграцияКлиентСервер.ДополнитьМассив(МассивПриемник, МассивИсточник);
КонецПроцедуры

// Конвертирует структуру параметров по переданному словарю
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для конвертации
//  СловарьЗначений	 - Структура - см. СловарьЗначенийПараметровЗапроса()
// 
// Возвращаемое значение:
//  Структура - конвертированные параметры
//
Функция КонвертированныеПараметрыЗапроса(ПараметрыЗапроса, СловарьЗначений = Неопределено) Экспорт
	
	КонвертированныеПараметрыЗапроса = Новый Структура;
	
	СловарьКлючей = СловарьКлючейПараметровЗапроса();
	Если СловарьЗначений = Неопределено Тогда
		СловарьЗначений = СловарьЗначенийПараметровЗапроса();
	КонецЕсли;
		
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		КлючПоСловарю = СловарьКлючей.Получить(ПараметрЗапроса.Ключ);
		Если КлючПоСловарю = Неопределено Тогда
			Ключ = ПараметрЗапроса.Ключ;
		Иначе
			Ключ = КлючПоСловарю;
		КонецЕсли;
		
		ЗначениеПоСловарю = СловарьЗначений.Получить(ПараметрЗапроса.Значение);
		Если ЗначениеПоСловарю = Неопределено Тогда
			Значение = ПараметрЗапроса.Значение;
		Иначе
			Значение = ЗначениеПоСловарю;
		КонецЕсли;
		
		КонвертированныеПараметрыЗапроса.Вставить(Ключ, Значение);
	КонецЦикла;		

	Возврат КонвертированныеПараметрыЗапроса;
	
КонецФункции

#Область Словари
// Методы для описания правил конвертации значений

// Словарь для конвертации ключей параметров запроса сервиса
//
Функция СловарьКлючейПараметровЗапроса() Экспорт
	
	КонвертацияКлюч_КлючПараметра = Новый Соответствие;
	КонвертацияКлюч_КлючПараметра.Вставить("ТипДополнения", "type");
	КонвертацияКлюч_КлючПараметра.Вставить("Активно", "isActive");
	КонвертацияКлюч_КлючПараметра.Вставить("УникальныйИдентификатор", "UUID");
	КонвертацияКлюч_КлючПараметра.Вставить("Имя", "name");
	КонвертацияКлюч_КлючПараметра.Вставить("ИдентификаторБазы", "baseId");
	КонвертацияКлюч_КлючПараметра.Вставить("Статус", "status");
	
	Возврат ПолучитьЗеркальнуюКоллекцию(КонвертацияКлюч_КлючПараметра);
	
КонецФункции

// Словарь для конвертации значений параметров запроса сервиса
//
Функция СловарьЗначенийПараметровЗапроса() Экспорт
	
	Словарь = Новый Соответствие;
	Словарь.Вставить(ТипДополненияРасширение(), "extension");
	Словарь.Вставить(ТипДополненияДопОтчетОбработка(), "erf_epf");
	Словарь.Вставить(Истина, "true");
	Словарь.Вставить(Ложь, "false");
	
	Возврат ПолучитьЗеркальнуюКоллекцию(Словарь);
	
КонецФункции

// Константа ТипДополненияРасширение
//
Функция ТипДополненияРасширение() Экспорт
	Возврат РаботаСДополнениямиИнтеграцияКлиентСервер.ТипДополненияРасширение();
КонецФункции

// Константа ТипДополненияДопОтчетОбработка
//
Функция ТипДополненияДопОтчетОбработка() Экспорт
	Возврат РаботаСДополнениямиИнтеграцияКлиентСервер.ТипДополненияДопОтчетОбработка();
КонецФункции

// Константа РасширениеФайлаОбработки
//
Функция РасширениеФайлаОбработки() Экспорт
	Возврат РаботаСДополнениямиИнтеграцияКлиентСервер.РасширениеФайлаОбработки();
КонецФункции

// Константа РасширениеФайлаОтчета
//
Функция РасширениеФайлаОтчета() Экспорт
	Возврат РаботаСДополнениямиИнтеграцияКлиентСервер.РасширениеФайлаОтчета();
КонецФункции

// Константа РасширениеФайлаРасширения
//
Функция РасширениеФайлаРасширения() Экспорт
	Возврат РаботаСДополнениямиИнтеграцияКлиентСервер.РасширениеФайлаРасширения();
КонецФункции

// Константа СтатусПеренос
//
Функция СтатусПеренос() Экспорт
	Возврат РаботаСДополнениямиИнтеграцияКлиентСервер.СтатусПеренос();
КонецФункции

#КонецОбласти

#Область ЗапросыКСерверуДополнений

// Получает список дополнений
//
// Параметры:
//  ТипДополнения		 - Строка - см. РаботаСДополнениямиИнтеграция.ТипДополненияРасширение
//  ИдентификаторБазы	 - Строка - идентификатор базы
// 
// Возвращаемое значение:
//  Массив - Массив структур со списком дополнений
//
Функция ПолучитьДополнения(ТипДополнения, ИдентификаторБазы) Экспорт
	
	ПутьМетода = "/list";
	ПараметрыМетода = Новый Структура("ТипДополнения, ИдентификаторБазы", ТипДополнения, ИдентификаторБазы);
	
	ПараметрыМетода = КонвертированныеПараметрыЗапроса(ПараметрыМетода);
	ПараметрыЗапроса = КонструкторПараметровЗапросаСервиса(ПутьМетода, ПараметрыМетода);
	Ответ = ОтветСервиса(ПараметрыЗапроса, Метаданные.СвойстваОбъектов.HTTPМетод.GET);
	Если Ответ.КодСостояния >= 300 Тогда
		ТекстОшибки = СтрШаблон("Ошибка запроса к серверу. Код состояния: %1. Ответ: %2", Ответ.КодСостояния, Ответ.ТелоОтвета);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ПрочитатьЗначениеJSON(Ответ.ТелоОтвета);
	
КонецФункции

// Получает список версий запрошенного дополнения
//
// Параметры:
//  ВладелецГУИД - Строка - ГУИД дополнения - владельца версии
// 
// Возвращаемое значение:
//  Массив - Массив структур со списком версий дополнения
//
Функция ПолучитьВерсии(ВладелецГУИД) Экспорт
	
	ПутьМетода = "/versions";
	ПараметрыМетода = Новый Структура("УникальныйИдентификатор", ВладелецГУИД);
	
	ПараметрыМетода = КонвертированныеПараметрыЗапроса(ПараметрыМетода);
	ПараметрыЗапроса = КонструкторПараметровЗапросаСервиса(ПутьМетода, ПараметрыМетода);
	Ответ = ОтветСервиса(ПараметрыЗапроса, Метаданные.СвойстваОбъектов.HTTPМетод.GET);
	ТаблицаДополнений = ПрочитатьЗначениеJSON(Ответ.ТелоОтвета);
	
	Возврат ТаблицаДополнений;
	
КонецФункции

// Получает двоичные данные версии дополнения
//
// Параметры:
//  ВерсияДополненияГУИД - Строка - ГУИД версии дополнения
// 
// Возвращаемое значение:
//  ДвоичныеДанные - 
//
Функция ПолучитьДвоичныеДанныеВерсииДополнения(ВерсияДополненияГУИД) Экспорт
	
	ПутьМетода = "/data";
	ПараметрыМетода = Новый Структура("УникальныйИдентификатор", ВерсияДополненияГУИД);
	
	ПараметрыМетода = КонвертированныеПараметрыЗапроса(ПараметрыМетода);
	ПараметрыЗапроса = КонструкторПараметровЗапросаСервиса(ПутьМетода, ПараметрыМетода);
	ПараметрыЗапроса.Вставить("ОжидаемыйТипОтвета", Тип("ДвоичныеДанные"));
	Ответ = ОтветСервиса(ПараметрыЗапроса, Метаданные.СвойстваОбъектов.HTTPМетод.GET);

	Возврат Ответ.ТелоОтвета;
	
КонецФункции

#КонецОбласти

// Заполняет коллекцию данными, прочитанными из массива структур
//
// Параметры:
//  Коллекция		 - ТаблицаЗначений, ДанныеФормыСтруктура - коллекция, в которую помещаются данные при чтении
//  МассивСтруктур	 - Массив - массив структур
//
Процедура ПрочитатьМассивСтруктурВКоллекцию(Коллекция, МассивСтруктур) Экспорт
	РаботаСДополнениямиИнтеграцияКлиентСервер.ПрочитатьМассивСтруктурВКоллекцию(Коллекция, МассивСтруктур);
КонецПроцедуры

// Получает коллекцию, с добавленными "зеркально" ключ=значение:значение=ключ
//
// Параметры:
//  КоллекцияИсточник	 - Структура, Соответствие - Источник данных
// 
// Возвращаемое значение:
//  Структура, Соответствие - результирующая коллекция
//
Функция ПолучитьЗеркальнуюКоллекцию(КоллекцияИсточник) Экспорт
	Возврат РаботаСДополнениямиИнтеграцияКлиентСервер.ПолучитьЗеркальнуюКоллекцию(КоллекцияИсточник);
КонецФункции

// Получает список установленных в базе дополнений
//
// Параметры:
//  ТипДополнения		 - Строка - см. РаботаСДополнениямиИнтеграция.ТипДополненияРасширение
//  ИдентификаторБазы	 - Строка - идентификатор базы
//  ДополнительныеПараметры	 - Структура - Доп. параметры (disable_isnt_planned)
// 
// Возвращаемое значение:
//  Массив - Массив структур со свойствами дополнений
//
Функция ПолучитьСписокУстановленныхДополнений(ТипДополнения, ИдентификаторБазы, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПутьМетода = "/installed";
	ПараметрыМетода = Новый Структура("ТипДополнения, ИдентификаторБазы", ТипДополнения, ИдентификаторБазы);
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Для Каждого КлючИЗначение Из ДополнительныеПараметры Цикл
			ПараметрыМетода.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыМетода = КонвертированныеПараметрыЗапроса(ПараметрыМетода);
	ПараметрыЗапроса = КонструкторПараметровЗапросаСервиса(ПутьМетода, ПараметрыМетода);
	Ответ = ОтветСервиса(ПараметрыЗапроса, Метаданные.СвойстваОбъектов.HTTPМетод.GET);
	Если Ответ.КодСостояния >= 300 Тогда
		ТекстОшибки = СтрШаблон("Ошибка запроса к серверу. Код состояния: %1. Ответ: %2", Ответ.КодСостояния, Ответ.ТелоОтвета);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ПрочитатьЗначениеJSON(Ответ.ТелоОтвета);
	
КонецФункции

// Получает список дополнений с двоичными данными
//
// Параметры:
//  ТипДополнения		 - Строка - см. РаботаСДополнениямиИнтеграция.ТипДополненияРасширение
//  ИдентификаторБазы	 - Строка - идентификатор базы
//  ПараметрыОтбора		 - Структура - Параметры для отбора дополнения
// 
// Возвращаемое значение:
//  Массив - Массив структур со списком дополнений с двоичными данными
//
Функция ПолучитьДанныеУстановленногоДополнения(ТипДополнения, ИдентификаторБазы, ПараметрыОтбора) Экспорт
	
	ПутьМетода = "/installed_data";
	ПараметрыМетода = Новый Структура("ТипДополнения, ИдентификаторБазы", ТипДополнения, ИдентификаторБазы);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыМетода, ПараметрыОтбора, Истина);
	ПараметрыМетода = КонвертированныеПараметрыЗапроса(ПараметрыМетода);
	ПараметрыЗапроса = КонструкторПараметровЗапросаСервиса(ПутьМетода, ПараметрыМетода);
	ПараметрыЗапроса.Вставить("ОжидаемыйТипОтвета", Тип("ДвоичныеДанные"));
	Ответ = ОтветСервиса(ПараметрыЗапроса, Метаданные.СвойстваОбъектов.HTTPМетод.GET);
	Если Ответ.КодСостояния >= 300 Тогда
		ТекстОшибки = СтрШаблон("Ошибка запроса к серверу. Код состояния: %1. Ответ: %2", Ответ.КодСостояния, ПолучитьСтрокуИзДвоичныхДанных(Ответ.ТелоОтвета));
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Ответ.ТелоОтвета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗапросыHTTPСервис

// Формирует запрос по переданным параметрам, и получает ответ сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ПараметрыЗапросовСервиса
//  ТипЗапроса		 - ПеречислимыеСвойстваОбъектовМетаданных.HTTPМетод - требуемый тип запроса
// 
// Возвращаемое значение:
//  Структура
//    * КодСостояния
//    * ТелоОтвета
//
Функция ОтветСервиса(ПараметрыЗапроса, ТипЗапроса) Экспорт
	
	РезультатЗапроса = Новый Структура;
	РезультатЗапроса.Вставить("КодСостояния", 1000); // код состояния 1000 для случая исключения в коде.
	РезультатЗапроса.Вставить("ТелоОтвета");
	
	АдресЗапроса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "АдресЗапроса");
	Пользователь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Пользователь", "");
	Пароль = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Пароль", "");
	ТелоЗапроса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ТелоЗапроса", "");
	ТипТелаЗапроса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ТипТелаЗапроса", Тип("Строка"));
	ОжидаемыйТипОтвета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ОжидаемыйТипОтвета", Тип("Строка"));
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресЗапроса);
	
	Попытка
		Соединение = Соединение(СтруктураURI, Пользователь, Пароль, 30);
	Исключение
		ТекстОшибки =
			СтрШаблон("Не удалось установить соединение с сервисом: %1.", АдресЗапроса) 
				+ Символы.ПС + 	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.HTTPСервисы.Дополнения,
			,
			ТекстОшибки);
		РезультатЗапроса.КодСостояния = 1000;
		РезультатЗапроса.ТелоОтвета = ТекстОшибки;
		Возврат РезультатЗапроса;
	КонецПопытки;
	ТипСодержимого = "application/json; charset=utf-8";
	Если Не ОжидаемыйТипОтвета = Тип("Строка") Тогда
		ТипСодержимого = "application/octet-stream";
	КонецЕсли;
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", ТипСодержимого);
	ЗаголовкиHTTP.Вставить("Accept-Charset", "utf-8");
	
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, ЗаголовкиHTTP);
	Если ТипТелаЗапроса = Тип("Строка") Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	ИначеЕсли ТипТелаЗапроса = Тип("ДвоичныеДанные") Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
	КонецЕсли;
	
	Попытка
		HTTPОтвет = Соединение.ВызватьHTTPМетод(Строка(ТипЗапроса), HTTPЗапрос);
	Исключение
		ТекстОшибки = СтрШаблон(
			"Ошибка работы с сервисом. Адрес: %1." "%2",
			АдресЗапроса,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.HTTPСервисы.Дополнения,
			,
			ТекстОшибки);
		РезультатЗапроса.КодСостояния = 1000;
		РезультатЗапроса.ТелоОтвета = ТекстОшибки;
		Возврат РезультатЗапроса;
	КонецПопытки;
	
	РезультатЗапроса.КодСостояния = HTTPОтвет.КодСостояния;
	Если ОжидаемыйТипОтвета = Тип("Строка")Тогда
		РезультатЗапроса.ТелоОтвета  = HTTPОтвет.ПолучитьТелоКакСтроку();
	ИначеЕсли ОжидаемыйТипОтвета = Тип("ДвоичныеДанные") Тогда
		РезультатЗапроса.ТелоОтвета  = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		ТекстОшибки = "Неподдерживаемый тип ответа сервиса. Код состояния: " + HTTPОтвет.КодСостояния;
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.HTTPСервисы.Дополнения,
			,
			ТекстОшибки);
		РезультатЗапроса.КодСостояния = 1000;
		РезультатЗапроса.ТелоОтвета = ТекстОшибки;
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция Соединение(СтруктураURI, Пользователь, Пароль, Таймаут)
	
	ЗащищенноеСоединение = ?(СтруктураURI.Схема = "https", ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС), Неопределено);
	Порт = ?(ЗначениеЗаполнено(СтруктураURI.Порт), Число(СтруктураURI.Порт), ?(ЗащищенноеСоединение = Неопределено, 80, 443));
	
	Возврат Новый HTTPСоединение(СтруктураURI.Хост, Порт, Пользователь, Пароль,, Таймаут, ЗащищенноеСоединение);
	
КонецФункции

Функция СтрокаПараметровЗапроса(СтруктураПараметров)

	СтрокаСПараметрами = "";	
	ШаблонПараметра = "&%1=%2";
	МассивСтрокПараметров = Новый Массив;
	Для Каждого ПараметрЗапроса Из СтруктураПараметров Цикл
		МассивСтрокПараметров.Добавить(СтрШаблон(ШаблонПараметра, ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение));
	КонецЦикла;		
	
	Если МассивСтрокПараметров.Количество() Тогда
		СтрокаСПараметрами = СтрШаблон("?%1", Сред(СтрСоединить(МассивСтрокПараметров), 2));
	КонецЕсли;
	
	Возврат	СтрокаСПараметрами;
	
КонецФункции

// Функция - Конструктор параметров запроса сервиса
//
// Параметры:
//  ПутьМетода				 - Строка - путь метода на сервере
//  ПараметрыМетода			 - Структура - параметры метода
//  ПараметрыАутентификации	 - Структура - параметры аутентификации
// 
// Возвращаемое значение:
//  Структура - результат работы конструктора
//
Функция КонструкторПараметровЗапросаСервиса(ПутьМетода, ПараметрыМетода, ПараметрыАутентификации = Неопределено) Экспорт
	
	СтрокаПараметров = СтрокаПараметровЗапроса(ПараметрыМетода);
	АдресМетодаСПараметрами = Константы.АдресСервисаСервераДополнений.Получить() + ПутьМетода + СтрокаПараметров;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("АдресЗапроса", АдресМетодаСПараметрами);
	
	Если Не ПараметрыАутентификации = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЗапроса, ПараметрыАутентификации);
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЗапроса, ПараметрыАутентификацииСервиса());
	КонецЕсли;
		
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Функция - Параметры аутентификации сервиса
// 
// Возвращаемое значение:
//  Структура - 
//
Функция ПараметрыАутентификацииСервиса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	КлючиАутентификации = "Пользователь,Пароль";
	// Проверяем наличие безопасного хранилища.
	Если Метаданные.РегистрыСведений.Найти("БезопасноеХранилищеДанных") = Неопределено
			Или Метаданные.ОбщиеМодули.Найти("ОбщегоНазначения") = Неопределено Тогда
		Возврат Новый Структура(КлючиАутентификации);
	КонецЕсли;
	Модуль = Вычислить("ОбщегоНазначения"); // АПК:486 - нет выполнения произвольного кода.
	СохраненныеПараметры = Модуль.ПрочитатьДанныеИзБезопасногоХранилища(КлючПараметровАутентификацииСервиса(), КлючиАутентификации);
	Если СохраненныеПараметры = Неопределено Тогда
		СохраненныеПараметры = Новый Структура(КлючиАутентификации);
	КонецЕсли;
	
	Возврат СохраненныеПараметры;
	
КонецФункции

Функция КлючПараметровАутентификацииСервиса()
	Возврат "ПараметрыАутентификацииСервисаСервераДополнений";
КонецФункции

Функция ИмяСобытияЖР()
	Возврат НСтр("ru = 'Сервис Дополнений'", Метаданные.ОсновнойЯзык.КодЯзыка);
КонецФункции

#КонецОбласти

#Область РаботаСИменамиФайлов

// Возвращает строку недопустимых символов.
// Согласно http://en.wikipedia.org/wiki/Filename - в разделе "Reserved characters and words".
// Возвращаемое значение:
//   Строка - строка недопустимых символов.
//
Функция ПолучитьНедопустимыеСимволыВИмениФайла() Экспорт

	НедопустимыеСимволы = """/\[]:;|=?*<>";
	НедопустимыеСимволы = НедопустимыеСимволы + Символы.Таб + Символы.ПС;
	Возврат НедопустимыеСимволы;

КонецФункции

// Заменяет недопустимые символы в имени файла.
//
// Параметры:
//  ИмяФайла     - Строка - исходное имя файла.
//  НаЧтоМенять  - Строка - строка, на которую необходимо заменить недопустимые символы.
//
// Возвращаемое значение:
//   Строка - преобразованное имя файла.
//
Функция ЗаменитьНедопустимыеСимволыВИмениФайла(Знач ИмяФайла, НаЧтоМенять = " ") Экспорт
	
	Возврат СокрЛП(СтрСоединить(СтрРазделить(ИмяФайла, ПолучитьНедопустимыеСимволыВИмениФайла(), Истина), НаЧтоМенять));

КонецФункции

#КонецОбласти

#КонецОбласти