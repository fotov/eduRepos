
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ИдентификаторИнтернетПоддержки - Строка - уникальное имя программы в сервисах Интернет-поддержки.
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//   * ЗаполнятьДанныеНовыхПодсистемПриПереходеСДругойПрограммы - Булево - если установить Истина, то при переходе с
//                                    другой программы будут автоматически выполнены обработчики начального заполнения
//                                    новых подсистем. При описании обработчика обновления можно при необходимости
//                                    отключить его выполнение, указав свойство НеВыполнятьПриПереходеСДругойПрограммы.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = Метаданные.Имя;
	Описание.Версия = Метаданные.Версия;
    
    // Требуется библиотека стандартных подсистем.
    Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_3";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Комментарий = "ПерейтиНаВерсию_1_0_1_3";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор();
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_8";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Комментарий = "ПерейтиНаВерсию_1_0_1_8";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор();
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_9";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Комментарий = "ПерейтиНаВерсию_1_0_1_9";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор();
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_11";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_13";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.16";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_16";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.23";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_23";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.25";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_25";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.26";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_26";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.28";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_28";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.29";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_29";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.30";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_30";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.35";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_35";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.36";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_36";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.37";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_37";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.38";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_38";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.39";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_39";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.40";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_40";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.43";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_43";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.46";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_46";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.48";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_48";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.51";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУК.ПерейтиНаВерсию_1_0_1_51";
	Обработчик.РежимВыполнения = "Оперативно";
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПередОбновлениемИнформационнойБазы.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// В зависимости от тех или иных условий можно отключить штатное открытие формы
// с описанием изменений в новой версии программы при первом входе в нее (после обновления),
// а также выполнить другие действия.
//
// Не рекомендуется выполнять в данной процедуре какую-либо обработку данных.
// Такие процедуры следует оформлять штатными обработчиками обновления, выполняемыми на каждую версию "*".
// 
// Параметры:
//   ПредыдущаяВерсия     - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия        - Строка - версия после обновления. Как правило, соответствует Метаданные.Версия.
//   ВыполненныеОбработчики - ДеревоЗначений:
//     * НачальноеЗаполнение - Булево - если Истина, то обработчик должен срабатывать при запуске на "пустой" базе.
//     * Версия              - Строка - например, "2.1.3.39". Номер версии конфигурации, при переходе
//                                      на которую должна быть выполнена процедура-обработчик обновления.
//                                      Если указана пустая строка, то это обработчик только для начального заполнения
//                                      (должно быть указано свойство НачальноеЗаполнение).
//     * Процедура           - Строка - полное имя процедуры-обработчика обновления/начального заполнения. 
//                                      Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьНовыйРеквизит"
//                                      Обязательно должна быть экспортной.
//     * РежимВыполнения     - Строка - режим выполнения обработчика обновления. Допустимые значения:
//                                      Монопольно, Отложенно, Оперативно. Если значение не заполнено, обработчик
//                                      считается монопольным.
//     * ОбщиеДанные         - Булево - если Истина, то обработчик должен срабатывать до
//                                      выполнения любых обработчиков, использующих разделенные данные.
//                                      Допустимо указывать только для обработчиков с режимом выполнения Монопольно и Оперативно.
//                                      Если указать значение Истина для обработчика с режимом
//                                      выполнения Отложенно, будет выдано исключение.
//     * УправлениеОбработчиками - Булево - если Истина, то обработчик должен иметь параметр типа Структура, в котором
//                                          есть свойство РазделенныеОбработчики - таблица значений со структурой,
//                                          возвращаемой этой функцией.
//                                      При этом колонка Версия игнорируется. В случае необходимости выполнения
//                                      разделенного обработчика в данную таблицу необходимо добавить строку с
//                                      описанием процедуры обработчика.
//                                      Имеет смысл только для обязательных (Версия = *) обработчиков обновления 
//                                      с установленным флагом ОбщиеДанные.
//     * Комментарий         - Строка - описание действий, выполняемых обработчиком обновления.
//     * Идентификатор       - УникальныйИдентификатор - необходимо заполнять для обработчиков отложенного обновления,
//                                                 для остальных заполнение не требуется. Требуется для идентификации
//                                                 обработчика в случае его переименования.
//     
//     * БлокируемыеОбъекты  - Строка - необходимо заполнять для обработчиков отложенного обновления,
//                                      для остальных заполнение не требуется. Полные имена объектов через запятую, 
//                                      которые следует блокировать от изменения до завершения процедуры обработки данных.
//                                      Если заполнено, то также требуется заполнить и свойство ПроцедураПроверки.
//     * ПроцедураПроверки   - Строка - необходимо заполнять для обработчиков отложенного обновления,
//                                      для остальных заполнение не требуется. Имя функции, которая для переданного объекта 
//                                      определяет, завершена ли для него процедура обработки данных. 
//                                      Если переданный объект обработан, то следует вернуть значение Истина. 
//                                      Вызывается из процедуры ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан.
//                                      Параметры, передаваемые в функцию:
//                                         Параметры - см. ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным.
//     * ПроцедураЗаполненияДанныхОбновления - Строка - указывается процедура, которая регистрирует данные,
//                                      подлежащие обновлению данным обработчиком.
//     * ЗапускатьТолькоВГлавномУзле  - Булево - только для обработчиков отложенного обновления с режимом выполнения Параллельно.
//                                      Указать Истина, если обработчик обновления должен выполняться только в главном
//                                      узле РИБ.
//     * ЗапускатьИВПодчиненномУзлеРИБСФильтрами - Булево - только для обработчиков отложенного обновления с режимом
//                                      выполнения Параллельно.
//                                      Указать Истина, если обработчик обновления должен также выполняться в
//                                      подчиненном узле РИБ с фильтрами.
//     * ЧитаемыеОбъекты              - Строка - объекты, которые обработчик обновления будет читать при обработке данных.
//     * ИзменяемыеОбъекты            - Строка - объекты, которые обработчик обновления будет изменять при обработке данных.
//     * ПриоритетыВыполнения         - ТаблицаЗначений - таблица приоритетов выполнения между отложенными обработчиками,
//                                      изменяющими или читающими одни и те же данные. Подробнее см. в комментарии
//                                      к функции ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика.
//     * ВыполнятьВГруппеОбязательных - Булево - следует указывать, если обработчик требуется
//                                      выполнять в одной группе с обработчиками на версии "*".
//                                      При этом возможно менять порядок выполнения обработчика
//                                      относительно других путем изменения приоритета.
//     * Приоритет           - Число  - для внутреннего использования.
//     * МонопольныйРежим    - Неопределено
//                           - Булево - если указано Неопределено, то обработчик 
//                                      должен безусловно выполняться в монопольном режиме.
//                                      Для обработчиков перехода на конкретную версию (версия <> *):
//                                        Ложь   - обработчик не требует монопольного режима для выполнения.
//                                        Истина - обработчик требует монопольного режима для выполнения.
//                                      Для обязательных обработчиков обновления (Версия = "*"):
//                                        Ложь   - обработчик не требует монопольного режима.
//                                        Истина - обработчик может требовать монопольного режима для выполнения.
//                                                 В такие обработчики передается параметр типа структура
//                                                 со свойством МонопольныйРежим (типа Булево).
//                                                 При запуске обработчика в монопольном режиме передается
//                                                 значение Истина. В этом случае обработчик должен выполнить
//                                                 требуемые действия по обновлению. Изменение параметра
//                                                 в теле обработчика игнорируется.
//                                                 При запуске обработчика в немонопольном режиме передается
//                                                 значение Ложь. В этом случае обработчик не должен вносить никакие
//                                                 изменения в ИБ.
//                                                 Если в результате анализа выясняется, что обработчику требуется
//                                                 изменить данные ИБ, следует установить значение параметра в Истина
//                                                 и прекратить выполнение обработчика.
//                                                 В этом случае оперативное (немонопольное) обновление ИБ будет
//                                                 отменено и будет выдана ошибка с требованием выполнить обновление в
//                                                 монопольном режиме.
//   ВыводитьОписаниеОбновлений - Булево - если установить Ложь, то не будет открыта форма
//                                с описанием изменений в новой версии программы. По умолчанию Истина.
//   МонопольныйРежим           - Булево - признак того, что обновление выполнилось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, Знач МонопольныйРежим) Экспорт
		
		
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриПодготовкеМакетаОписанияОбновлений.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура:
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет обработчики перехода на новую версию конфигурации
//
// Параметры:
//  Параметры	 - Структура  - см.описание БСП
//
Процедура ПерейтиНаВерсию_1_0_1_3(Параметры = Неопределено) Экспорт

	#Область ОбновитьЭтапыЗадачиМетеор2022_07_19
	ЭтапЗадачи = Справочники.ЭтапыЗадачиМетеор.НайтиПоКоду("000000394");
	
	Если Не ЭтапЗадачи.Пустая() Тогда
		ЭтапЗадачиОбъект = ЭтапЗадачи.ПолучитьОбъект();
		ЭтапЗадачиОбъект.ОбменДанными.Загрузка = Истина;
		
		ЭтапЗадачиОбъект.Наименование = "Формирование документации";
		ЭтапЗадачиОбъект.ИмяПредопределенныхДанных = "ФормированиеДокументации";
		
		ЭтапЗадачиОбъект.Записать();
	КонецЕсли;
	
	#КонецОбласти
	
	
	#Область ЗаполнениеАдресаЭП_ПользователейВ_КИ
	ВидАдресЭП = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка,
		|	Пользователи.email КАК email
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|		ПО Пользователи.Ссылка = ПользователиКонтактнаяИнформация.Ссылка
		|			И (ПользователиКонтактнаяИнформация.Вид = &ВидИмэйл)
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ВидИмэйл", ВидАдресЭП);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПользовательОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
			ПользовательОбъект,
			ВыборкаДетальныеЗаписи.email,
			ВидАдресЭП,
			,
			Истина);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ОтключитьЗаполнение_email");
		ПользовательОбъект.Записать();
	КонецЦикла;
	
	// Установка обязательного заполнения
	ВидАдресЭП_ПользователяСсылка = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	ВидАдресЭП_ПользователяОбъект = ВидАдресЭП_ПользователяСсылка.ПолучитьОбъект();
	ВидАдресЭП_ПользователяОбъект.ОбязательноеЗаполнение = Истина;
	ВидАдресЭП_ПользователяОбъект.ПроверятьКорректность = Истина;
	ВидАдресЭП_ПользователяОбъект.РазрешитьВводНесколькихЗначений = Ложь;
	ВидАдресЭП_ПользователяОбъект.Записать();
	#КонецОбласти
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_8(Параметры = Неопределено) Экспорт

	#Область ОбновитьЭтапыЗадачиМетеор2022_10_13
	ЭтапЗадачи = Справочники.ЭтапыЗадачиМетеор.НайтиПоКоду("000000119");
	
	Если Не ЭтапЗадачи.Пустая() Тогда
		ЭтапЗадачиОбъект = ЭтапЗадачи.ПолучитьОбъект();
		ЭтапЗадачиОбъект.ОбменДанными.Загрузка = Истина;
		
		//ЭтапЗадачиОбъект.Наименование = "Формирование документации";
		ЭтапЗадачиОбъект.ИмяПредопределенныхДанных = "РазработчикуСделатьТехпроект";
		
		ЭтапЗадачиОбъект.Записать();
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_9(Параметры = Неопределено) Экспорт
	
	Константы.КодировкаИсполненияРаботаСGit.Установить("cp866");
	Константы.КодировкаПотоковРаботаСGit.Установить("UTF-16");
	Константы.ТаймаутРаботаСGIT.Установить(60);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_11(Параметры = Неопределено) Экспорт
	
	Константы.АдресСервераАПК.Установить("izb-dev05");
	Константы.АдресСервераЦКК.Установить("izb-dev05");
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_13(Параметры = Неопределено) Экспорт
	
	Набор = РегистрыСведений.ПодпискиНаМониторинг.СоздатьНаборЗаписей();
	Набор.Прочитать();
	Если Набор.Количество() Тогда
		Возврат;
	КонецЕсли;
	ОтветственныйИнициализация = Справочники.Пользователи.НайтиПоНаименованию("Фотов Александр");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыМониторинга.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыМониторинга КАК ВидыМониторинга";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = Набор.Добавить();
		Запись.ВидМониторинга = Выборка.Ссылка;
		Запись.Пользователь = ОтветственныйИнициализация;
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_16(Параметры = Неопределено) Экспорт

	ЭтапЗадачи = Справочники.ЭтапыЗадачиМетеор.НайтиПоКоду("000001120");
	
	Если Не ЭтапЗадачи.Пустая() Тогда
		ЭтапЗадачиОбъект = ЭтапЗадачи.ПолучитьОбъект();
		ЭтапЗадачиОбъект.ОбменДанными.Загрузка = Истина;
		
		//ЭтапЗадачиОбъект.Наименование = "Формирование документации";
		ЭтапЗадачиОбъект.ИмяПредопределенныхДанных = "ПредварительнаяПроверкаИФормированиеДокументации2";
		
		ЭтапЗадачиОбъект.Записать();
	КонецЕсли;
		
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_23(Параметры = Неопределено) Экспорт

	СерверGitОбъект = Справочники.СерверыGIT.СоздатьЭлемент();
	СерверGitОбъект.Наименование = "gitlab.automacon.net";
	СерверGitОбъект.АдресСервера = "https://gitlab.automacon.net";
	СерверGitОбъект.Записать();
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(СерверGitОбъект.Ссылка, "zjRJ3ceTs_ovGTnramva");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хранилища.Ссылка КАК Ссылка,
		|	Хранилища.ИмяПапкиGit КАК ИмяПапкиGit,
		|	Хранилища.URLGit КАК URLGit,
		|	Хранилища.ИдентификаторПроектаВГитЛаб КАК ИдентификаторПроектаВГитЛаб
		|ИЗ
		|	Справочник.Хранилища КАК Хранилища
		|ГДЕ
		|	Хранилища.ВыгружатьВGit
		|	И Хранилища.БазовоеХранилище = ЗНАЧЕНИЕ(Справочник.Хранилища.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаХранилища = РезультатЗапроса.Выбрать();
	Пока ВыборкаХранилища.Следующий() Цикл
		ХранилищеОбъект = ВыборкаХранилища.Ссылка.ПолучитьОбъект();
		
		ПроектGitОбъект = Справочники.ПроектыGIT.СоздатьЭлемент();
		ПроектGitОбъект.Наименование = ХранилищеОбъект.ИмяПапкиGit;
		ПроектGitОбъект.Сервер = СерверGitОбъект.Ссылка;
		ПроектGitОбъект.СсылкаURL = ХранилищеОбъект.URLGit;
		ПроектGitОбъект.КаталогРепозитория = РаботаСХранилищами.КаталогGit1С() + "\" + ХранилищеОбъект.ИмяПапкиGit;
		ПроектGitОбъект.Код = ХранилищеОбъект.ИдентификаторПроектаВГитЛаб;
		
		НачатьТранзакцию();
		Попытка
			ПроектGitОбъект.Записать();
			ХранилищеОбъект.ПроектGit = ПроектGitОбъект.Ссылка;
			ХранилищеОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ЗаписьЖурналаРегистрации(
				"Инициализация проектов Git",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ПроектыGIT,
				,
				"Возникла ошибка при записи проекта Git " + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_25(Параметры = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Справочники.ЭтапыЗадачиМетеор.НайтиПоКоду("000001257")) Тогда
		ЭтапПодключениеРасширенияОбъект = Справочники.ЭтапыЗадачиМетеор.ПодключениеРасширения.ПолучитьОбъект();
		ЭтапПодключениеРасширенияОбъект.Код = "000001257";
		ЭтапПодключениеРасширенияОбъект.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_26(Параметры = Неопределено) Экспорт
	Константы.АдресСервераИтилиум.Установить("https://itilium.automacon.ru");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ИтилиумСервисСобытий", "Repos", "Пользователь");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ИтилиумСервисСобытий", "%OpqcS", "Пароль");
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_28(Параметры = Неопределено) Экспорт
	
	ЭтапЗадачи = Справочники.ЭтапыЗадачиМетеор.НайтиПоКоду("000001425");
	Если Не ЭтапЗадачи.Пустая() Тогда
		ЭтапЗадачиОбъект = ЭтапЗадачи.ПолучитьОбъект();
	Иначе
		ЭтапЗадачиОбъект = Справочники.ЭтапыЗадачиМетеор.СоздатьЭлемент();
	КонецЕсли;
	ЭтапЗадачиОбъект.ОбменДанными.Загрузка = Истина;
	ЭтапЗадачиОбъект.Код = "000001425";
	ЭтапЗадачиОбъект.Наименование = "Отключение расширения";
	ЭтапЗадачиОбъект.ИмяПредопределенныхДанных = "ОтключениеРасширения";
	ЭтапЗадачиОбъект.Записать();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_29(Параметры = Неопределено) Экспорт
	
	// ОшибкаПодключенияРасширения
	ЭтапЗадачи = Справочники.ЭтапыЗадачиМетеор.НайтиПоКоду("000001613");
	Если Не ЭтапЗадачи.Пустая() Тогда
		ЭтапЗадачиОбъект = ЭтапЗадачи.ПолучитьОбъект();
	Иначе
		ЭтапЗадачиОбъект = Справочники.ЭтапыЗадачиМетеор.СоздатьЭлемент();
	КонецЕсли;
	ЭтапЗадачиОбъект.ОбменДанными.Загрузка = Истина;
	ЭтапЗадачиОбъект.Код = "000001613";
	ЭтапЗадачиОбъект.Наименование = "Ошибка подключения расширения";
	ЭтапЗадачиОбъект.ИмяПредопределенныхДанных = "ОшибкаПодключенияРасширения";
	ЭтапЗадачиОбъект.Записать();
	
	// ОшибкаПодключенияРасширения
	ЭтапЗадачи = Справочники.ЭтапыЗадачиМетеор.НайтиПоКоду("000001614");
	Если Не ЭтапЗадачи.Пустая() Тогда
		ЭтапЗадачиОбъект = ЭтапЗадачи.ПолучитьОбъект();
	Иначе
		ЭтапЗадачиОбъект = Справочники.ЭтапыЗадачиМетеор.СоздатьЭлемент();
	КонецЕсли;
	ЭтапЗадачиОбъект.ОбменДанными.Загрузка = Истина;
	ЭтапЗадачиОбъект.Код = "000001614";
	ЭтапЗадачиОбъект.Наименование = "Ошибка отключения расширения";
	ЭтапЗадачиОбъект.ИмяПредопределенныхДанных = "ОшибкаОтключенияРасширения";
	ЭтапЗадачиОбъект.Записать();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_30(Параметры = Неопределено) Экспорт
	
	// Сервер ГИТ
	СереверПредопределенный = Справочники.СерверыGIT.Автомакон.ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(СереверПредопределенный.АдресСервера) Тогда
		СереверПредопределенный.ИмяПредопределенныхДанных = "";
		СереверПредопределенный.Записать();
		СереверПредопределенный.Удалить();
		СерверСсылка = Справочники.СерверыGIT.НайтиПоНаименованию("gitlab.automacon.net");
		СерверОбъект = СерверСсылка.ПолучитьОбъект();
		СерверОбъект.ИмяПредопределенныхДанных = "Автомакон";
		СерверОбъект.Записать();
	КонецЕсли;
	
	// ПроектГит Дополнения
	Попытка
		ЭлементОбъект = Справочники.ПроектыGIT.Дополнения.ПолучитьОбъект();
		ЭлементОбъект.Сервер = Справочники.СерверыGIT.Автомакон;
		ЭлементОбъект.КаталогРепозитория = "D:\repos\git1c\extensions";
		ЭлементОбъект.СсылкаURL = "https://gitlab.automacon.net/vkusvill-1c/extensions";
		ЭлементОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ПроектыGIT,
			,
			"Не удалось инициализировать предопределенный элемент: Справочники.ПроектыGIT.Дополнения");
	КонецПопытки;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_35(Параметры = Неопределено) Экспорт
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ДанныеАутентификацииМетеор", "HttpUser", "Пользователь");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ДанныеАутентификацииМетеор", "Wdee276@7n", "Пароль");	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_36(Параметры = Неопределено) Экспорт
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ДанныеАутентификацииАПК", "http", "Пользователь");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ДанныеАутентификацииАПК", "apkhttp", "Пароль");
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ДанныеАутентификацииАПКГость", "Программист", "Пользователь");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ДанныеАутентификацииАПКГость", "Программист", "Пароль");
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_37(Параметры = Неопределено) Экспорт

	Набор = РегистрыСведений.СледующиеЭтапыЗадачиПоТочкеМаршрута.СоздатьНаборЗаписей();
	// ОтключениеРасширения
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.ОтключениеРасширения.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Истина;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.ЗакрытьЗадание;
	//
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.ОтключениеРасширения.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Ложь;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.ОшибкаОтключенияРасширения;
	// ПодключениеРасширения
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.ПодключениеРасширения.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Истина;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.Ожидание;
	//
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.ПодключениеРасширения.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Ложь;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.ОшибкаПодключенияРасширения;
	// ПредварительнаяПроверка
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.ПредварительнаяПроверка.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Истина;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.СогласованиеНаПодключениеРасширения;
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.ПредварительнаяПроверка.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Истина;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.ПредварительнаяПроверкаИФормированиеДокументации;
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.ПредварительнаяПроверка.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Истина;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.ПредварительнаяПроверкаИФормированиеДокументации2;
	//
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.ПредварительнаяПроверка.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Ложь;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.ВыполнитьОсновнуюРаботуПоЗаданию;
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.ПредварительнаяПроверка.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Ложь;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.НайтиПоКоду("000001469");
	// ПроверкаДокументации
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.ПроверкаДокументации.ТочкиМаршрута.Действие1;
	Запись.Согласовано = Истина;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.СдатьРаботуЗаказчику;
	//
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.ПроверкаДокументации.ТочкиМаршрута.Действие1;
	Запись.Согласовано = Ложь;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.ДоработкаДокументации;
	// СогласованиеАрхитектуры
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.СогласованиеАрхитектуры.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Истина;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.ВыполнитьОсновнуюРаботуПоЗаданию;
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.СогласованиеАрхитектуры.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Истина;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.НайтиПоКоду("000001469");
	//
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.СогласованиеАрхитектуры.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Ложь;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.РазработчикуСделатьТехпроект;
	// СогласованиеПереноса
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Истина;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.СдатьРаботуЗаказчику;
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Истина;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.ФормированиеДокументации;
	//
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Ложь;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.ПредварительнаяПроверкаИФормированиеДокументации2;
	Запись = Набор.Добавить();
	Запись.ТочкаМаршрута = БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПеревестиНаСледующийЭтап;
	Запись.Согласовано = Ложь;
	Запись.Этап = Справочники.ЭтапыЗадачиМетеор.ПредварительнаяПроверкаИФормированиеДокументации;
	
	Набор.Записать();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_38(Параметры = Неопределено) Экспорт
	Константы.Путь_oscript2.Установить("\\izb-app20\repos\OneScript2\bin\oscript.exe");
	Константы.ПутьСкрипта_ВыгрузкиВФайлы.Установить("\\izb-app20\repos\scripts\convert-to-files.os");
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_39(Параметры = Неопределено) Экспорт

	// Установка первоначально признака "Обработано" для всех записей регистра
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияЭтаповЗадачиМетеор.ЗадачаМетеор КАК ЗадачаМетеор,
		|	ИсторияЭтаповЗадачиМетеор.Дата КАК Дата,
		|	ИсторияЭтаповЗадачиМетеор.Этап КАК Этап,
		|	ИсторияЭтаповЗадачиМетеор.Исполнитель КАК Исполнитель,
		|	ИсторияЭтаповЗадачиМетеор.Тип КАК Тип,
		|	ИСТИНА КАК Обработано,
		|	ИсторияЭтаповЗадачиМетеор.стрИсполнитель КАК стрИсполнитель,
		|	ИсторияЭтаповЗадачиМетеор.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.ИсторияЭтаповЗадачиМетеор КАК ИсторияЭтаповЗадачиМетеор";
	
	Набор = РегистрыСведений.ИсторияЭтаповЗадачиМетеор.СоздатьНаборЗаписей();
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	Набор.Записать();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_40(Параметры = Неопределено) Экспорт
	Константы.КаталогРепозиториевСравненияИзменений.Установить("\\izb-app20\repos\git1c_changes");
	Константы.КаталогЛогов.Установить("\\izb-app20\logs\script-log");
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_43(Параметры = Неопределено) Экспорт
	Константы.АдресСервисаRMQ.Установить("http://10.0.0.68/rabbit_monitoring/hs/Rabbit");
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_46(Параметры = Неопределено) Экспорт
	Справочники.ТипыОбъектов.ЗаполнитьСправочник();
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_48(Параметры = Неопределено) Экспорт
	
	РегистрыСведений.ЗначенияНастроекПрограммы.ЗаписатьЗначениеНастройки(
		ПланыВидовХарактеристик.НастройкиПрограммы.СтрокиПодключенияSqlConnect, 
		ВнешниеДанныеВызовСервераПовтИсп.ПолучитьПараметрыПодключенияSqlConnectСовместимость());
	
	РегистрыСведений.ЗначенияНастроекПрограммы.ЗаписатьЗначениеНастройки(
		ПланыВидовХарактеристик.НастройкиПрограммы.АдресСервисаРаботыСБазами, 
		"http://izb-dev08/sql_connect_test02/ws/Exchange.1cws?wsdl");
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_51(Параметры = Неопределено) Экспорт
	
	// https://new.meteor.automacon.ru/op/my/access_token
	РегистрыСведений.ЗначенияНастроекПрограммы.ЗаписатьЗначениеНастройки(
		ПланыВидовХарактеристик.НастройкиПрограммы.ApiTokenV3, 
		"83ae0db3ec423bef0292dd99f5f2a83ae162666dee798fe478478b492ef1f78b");
		
	РегистрыСведений.СтатусыВерсийХранилищаСлужебный.Перезаполнить();
	РегистрыСведений.ОтветственныеПоИсточникам.Перезаполнить();
	РегистрыСведений.СтатистикаМониторинга.ОчисткаУстаревшихДанных();
	
КонецПроцедуры

#КонецОбласти
