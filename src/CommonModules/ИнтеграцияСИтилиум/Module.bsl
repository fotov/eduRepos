//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Интеграция с ИС Итилиум
//  
//////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Отправляет событие создания инцидента в Итилиум
//
// Параметры:
//  Описание - Строка - см. ПолучитьОписаниеРасширенийПоЗадаче
//
//Образец вызова:
//
//	ОписаниеСобытия = 
//		"Создана задача на подключение расширения:" + Символы.ПС +
//		ИнтеграцияСИтилиум.ПолучитьОписаниеРасширенийПоЗадаче(ЗадачаМетеор);
//	Попытка
//		ИнтеграцияСИтилиум.ОтправитьСобытие(ОписаниеСобытия);
//	Исключение
//		ЗаписьЖурналаРегистрации(
//			"Интеграция с Итилиум.ОтправитьСобытие",
//			УровеньЖурналаРегистрации.Ошибка,
//			,
//			ЗадачаМетеор,
//			ОписаниеОшибки());
//	КонецПопытки;
//
Процедура ОтправитьСобытие(Описание) Экспорт
	
	Если БлокировкаРаботыСВнешнимиРесурсамиУКПовтИсп.ЭтоКопияБазы() Тогда
		ОбщегоНазначения.СообщитьПользователю("Отправка событий из копии заблокирована.");
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	АдресМетода = Константы.АдресСервераИтилиум.Получить() + "/hs/ReposTasks/CreateTasks";
	ДанныеСообщения = Новый Структура("Description", Описание);
	ПараметрыАутентификации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ИтилиумСервисСобытий", "Пользователь,Пароль");
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Аутентификация", ПараметрыАутентификации);
	Ответ = КоннекторHTTP.Post(АдресМетода,	КоннекторHTTP.ОбъектВJson(ДанныеСообщения), ДополнительныеПараметры);
	Если Ответ.КодСостояния >= 300 Тогда
		ТекстОшибкиСервиса = КоннекторHTTP.КакТекст(Ответ);
		Ответ.Удалить("Тело");
		ТекстОшибки = СтрШаблон(
			"При выполнении обращения к сервису событий Итилиум возникла ошибка:
			|%1,
			|Данные ответа:
			|%2",
			ТекстОшибкиСервиса,
			КоннекторHTTP.ОбъектВJson(Ответ));
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецПроцедуры

// Получает описание расширений по задаче
//
// Параметры:
//  ЗадачаМетеор - СправочникСсылка.ЗадачиМетеор 
// 
// Возвращаемое значение:
//  Строка - описание расширений по задаче
//
Функция ПолучитьОписаниеРасширенийПоЗадаче(ЗадачаМетеор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииДополнений.Наименование КАК Наименование,
		|	ВерсииДополнений.Версия КАК Версия,
		|	ПРЕДСТАВЛЕНИЕ(ВерсииДополнений.Владелец.Конфигурация) КАК Конфигурация,
		|	ПРЕДСТАВЛЕНИЕ(ДатыАктуальностиРасширений.База) КАК База,
		|	ПРЕДСТАВЛЕНИЕ(ВерсииДополнений.Владелец.ТипРасширения) КАК ТипРасширения,
		|	ВерсииДополнений.Описание КАК Описание,
		|	ВерсииДополнений.ДатаСоздания КАК ДатаСоздания,
		|	ПРЕДСТАВЛЕНИЕ(ВерсииДополнений.Автор) КАК Автор
		|ИЗ
		|	РегистрСведений.ЗадачиМетеорДополнений КАК ЗадачиМетеорДополнений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииДополнений КАК ВерсииДополнений
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатыАктуальностиРасширений КАК ДатыАктуальностиРасширений
		|			ПО ДатыАктуальностиРасширений.ВерсияДополнения = ВерсииДополнений.Ссылка
		|		ПО ЗадачиМетеорДополнений.ВерсияДополнения = ВерсииДополнений.Ссылка
		|			И (ЗадачиМетеорДополнений.ЗадачаМетеор = &ЗадачаМетеор)";
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
	Выборка = Запрос.Выполнить().Выбрать();
	ШаблонСвойства = "%1: %2";
	ШаблонБаза = "%1. %2";
	Описания = Новый Массив;
	
	Пока Выборка.СледующийПоЗначениюПоля("Наименование") Цикл
		СтрокиОписания = Новый Массив;
		Для Каждого КолонкаРезультата Из Выборка.Владелец().Колонки Цикл
			Если КолонкаРезультата.Имя = "База"  Тогда
				Продолжить;
			КонецЕсли;
			СтрокиОписания.Добавить(СтрШаблон(ШаблонСвойства, КолонкаРезультата.Имя, Выборка[КолонкаРезультата.Имя]));
		КонецЦикла;
		СтрокиОписания.Добавить("Базы:");
		СтрокиБаз = Новый Массив;
		Счетчик = 0;
		Пока Выборка.СледующийПоЗначениюПоля("База") Цикл
			Счетчик = Счетчик + 1;
			СтрокиБаз.Добавить(СтрШаблон(ШаблонБаза, Счетчик, Выборка.База));
		КонецЦикла;
		Описания.Добавить(СтрСоединить(СтрокиОписания, Символы.ПС) + СтрСоединить(СтрокиБаз, ","));
	КонецЦикла;
	
	Возврат СтрСоединить(Описания, Символы.ПС + Символы.ПС);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти