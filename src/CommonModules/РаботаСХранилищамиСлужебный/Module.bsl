//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Служебные методы для работы с хранилищами конфигураций 1С
//  
//////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбновлениеИсторииХранилищОбработчикЗадания() Экспорт
	
	РегЗадания.ПроверитьРазрешениеЗапускаРегламентныхЗаданий();

	// Получение истории из хранилища в Репос
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хранилища.Ссылка КАК Хранилище,
	|	Хранилища.Наименование КАК НаименованиеХранилища,
	|	ВЫБОР
	|		КОГДА Хранилища.БазовоеХранилище = ЗНАЧЕНИЕ(Справочник.Хранилища.ПустаяСсылка)
	|			ТОГДА Хранилища.Ссылка
	|		ИНАЧЕ Хранилища.БазовоеХранилище
	|	КОНЕЦ КАК ПодключаемоеХранилище,
	|	ВЫБОР
	|		КОГДА Хранилища.БазовоеХранилище = ЗНАЧЕНИЕ(Справочник.Хранилища.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ПОМЕСТИТЬ ХранилищаКОбработке
	|ИЗ
	|	Справочник.Хранилища КАК Хранилища
	|ГДЕ
	|	НЕ Хранилища.ПометкаУдаления
	|	И НЕ Хранилища.БазаИсторииСтрокаСоединения = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ГлубинаОчередиХранилищ.ГлубинаОчереди) КАК ГлубинаОчереди
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХранилищаКОбработке.ПодключаемоеХранилище КАК ПодключаемоеХранилище,
	|		КОЛИЧЕСТВО(ХранилищаКОбработке.Хранилище) КАК ГлубинаОчереди
	|	ИЗ
	|		ХранилищаКОбработке КАК ХранилищаКОбработке
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ХранилищаКОбработке.ПодключаемоеХранилище) КАК ГлубинаОчередиХранилищ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХранилищаКОбработке.Хранилище КАК Хранилище,
	|	ХранилищаКОбработке.НаименованиеХранилища КАК НаименованиеХранилища,
	|	ХранилищаКОбработке.ПодключаемоеХранилище КАК ПодключаемоеХранилище,
	|	ХранилищаКОбработке.Порядок КАК Порядок
	|ИЗ
	|	ХранилищаКОбработке КАК ХранилищаКОбработке
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ ПО
	|	ПодключаемоеХранилище";

	ИндексРезультатаОбработкиХранилищ = 2;
	ИндексРезультатаГлубинаОчереди = 1;
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатОчередьОбработкиХранилищ = РезультатыЗапроса[ИндексРезультатаОбработкиХранилищ];
	Если РезультатОчередьОбработкиХранилищ.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатГлубинаОчереди = РезультатыЗапроса[ИндексРезультатаГлубинаОчереди];
	ВыборкаГлубинаОчереди = РезультатГлубинаОчереди.Выбрать();
	ВыборкаГлубинаОчереди.Следующий();
	ГлубинаОчереди = ВыборкаГлубинаОчереди.ГлубинаОчереди;
	
	// Запуск потоков по хранилищам таким образом, чтобы не было пересечения хранилища, к которому будет идти подключение.
	ОчередиОбработки = Новый Массив(ГлубинаОчереди);
	Для Индекс = 0 По ОчередиОбработки.ВГраница() Цикл
		ОчередиОбработки[Индекс] = Новый Массив();
	КонецЦикла;
	
	ВыборкаПодключаемыеХранилища = РезультатОчередьОбработкиХранилищ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПодключаемыеХранилища.Следующий() Цикл
		Очередь = 0;
		ВыборкаХранилища = ВыборкаПодключаемыеХранилища.Выбрать();
		Пока ВыборкаХранилища.Следующий() Цикл
			ОчередиОбработки[Очередь].Добавить(
				Новый Структура("Хранилище, НаименованиеХранилища", ВыборкаХранилища.Хранилище, ВыборкаХранилища.НаименованиеХранилища));
			Очередь = Очередь + 1;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ОчередьОбработки Из ОчередиОбработки Цикл
		НаборПараметровПотоков = Новый Соответствие;
		Для Каждого ХранилищаОчереди Из ОчередьОбработки Цикл
			НаборПараметровПотоков.Вставить(
				ХранилищаОчереди.НаименованиеХранилища,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ХранилищаОчереди.Хранилище));	
		КонецЦикла;
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = "Обновление истории хранилищ многопоточно";
		ПараметрыВыполнения.КлючФоновогоЗадания = "ОбновлениеИсторииХранилищМногопоточно";
		ПараметрыВыполнения.ОжидатьЗавершение = Неопределено;
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
		Результат = ДлительныеОперации.ВыполнитьПроцедуруВНесколькоПотоков(
			"РаботаСХранилищами.ОбновитьИсториюХранилища", ПараметрыВыполнения, НаборПараметровПотоков);
		
		Пока Не ДлительныеОперации.ЗаданиеВыполнено(Результат.ИдентификаторЗадания) Цикл
			ОбщегоНазначенияУК.Пауза(15);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьХэшиGitОбработчикЗадания() Экспорт
	//ИмяПроцедуры = "РаботаСХранилищами.ЗагрузитьХэшиGit";
	//НаименованиеФоновогоЗадания = "Загрузка Hash Git (в потоках)";
	//КлючФоновогоЗадания = "ЗагрузитьХэшиGitМногопоточно";
	//ПараметрыОбработкиЗаданий = ПараметрыМногопоточнойОбработкиЗаданий(НаименованиеФоновогоЗадания, КлючФоновогоЗадания);
	//Результат = ДлительныеОперации.ВыполнитьПроцедуруВНесколькоПотоков(
	//	ИмяПроцедуры,
	//	ПараметрыОбработкиЗаданий.ПараметрыВыполнения,
	//	ПараметрыОбработкиЗаданий.НаборПараметровПотоков);
	//	
	// Линейный запуск
	Выборка = ПараметрыЛинейнойОбработкиЗаданий();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ВыгружатьВGit Тогда
			Продолжить;
		КонецЕсли;
		РаботаСХранилищами.ЗагрузитьХэшиGit(Выборка.Хранилище);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьЗадачиМетеорОбработчикЗадания() Экспорт
	//ИмяПроцедуры = "РаботаСХранилищамиСлужебный.ЗагрузитьЗадачиМетеор";
	//НаименованиеФоновогоЗадания = "Загрузка задач Метеор (в потоках)";
	//КлючФоновогоЗадания = "ЗагрузитьЗадачиМетеорМногопоточно";
	//ПараметрыОбработкиЗаданий = ПараметрыМногопоточнойОбработкиЗаданий(НаименованиеФоновогоЗадания, КлючФоновогоЗадания);
	//Результат = ДлительныеОперации.ВыполнитьПроцедуруВНесколькоПотоков(
	//	ИмяПроцедуры,
	//	ПараметрыОбработкиЗаданий.ПараметрыВыполнения,
	//	ПараметрыОбработкиЗаданий.НаборПараметровПотоков);

	// Линейный запуск
	Выборка = ПараметрыЛинейнойОбработкиЗаданий();
	Пока Выборка.Следующий() Цикл
		РаботаСХранилищамиСлужебный.ЗагрузитьЗадачиМетеор(Выборка.Хранилище);
	КонецЦикла;
КонецПроцедуры

Процедура СинхронизироватьХранилищаСGitОбработчикЗадания() Экспорт
	
	Выборка = ПараметрыЛинейнойОбработкиЗаданий();
	Пока Выборка.Следующий() Цикл
		Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Хранилище, "ВыгружатьВGit") Тогда
			Продолжить;
		КонецЕсли;
		РаботаСХранилищами.СинхронизироватьХранилищеСGit(Выборка.Хранилище);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчисткаУстаревшихВетокИтоговыхИзмененийОбработчикЗадания() Экспорт
	
	РегЗадания.ПроверитьРазрешениеЗапускаРегламентныхЗаданий();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХешиГитСравненияИзменений.ЗадачаМетеор КАК ЗадачаМетеор,
		|	ХешиГитСравненияИзменений.Хранилище КАК Хранилище
		|ИЗ
		|	РегистрСведений.ХешиГитСравненияИзменений КАК ХешиГитСравненияИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МаксимальныйПериод.Период КАК Период,
		|			МаксимальныйПериод.ВерсияХранилища КАК ВерсияХранилища,
		|			МаксимальныйПериод.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная,
		|			СтатусыВерсийХранилища.Период КАК Период1,
		|			СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища1,
		|			СтатусыВерсийХранилища.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная1,
		|			СтатусыВерсийХранилища.Статус КАК Статус,
		|			СтатусыВерсийХранилища.Ответственный КАК Ответственный,
		|			СтатусыВерсийХранилища.Процесс КАК Процесс,
		|			СтатусыВерсийХранилища.Комментарий КАК Комментарий
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(СтатусыВерсийХранилища.Период) КАК Период,
		|				СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
		|				МАКСИМУМ(СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК ДатаЗаписиУниверсальная
		|			ИЗ
		|				РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
		|			ГДЕ
		|				СтатусыВерсийХранилища.ВерсияХранилища В
		|						(ВЫБРАТЬ
		|							ХешиГитСравненияИзменений.КрайняяВерсияИсторииХранилища КАК КрайняяВерсияИсторииХранилища
		|						ИЗ
		|							РегистрСведений.ХешиГитСравненияИзменений КАК ХешиГитСравненияИзменений)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СтатусыВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
		|				ПО МаксимальныйПериод.ВерсияХранилища = СтатусыВерсийХранилища.ВерсияХранилища
		|					И МаксимальныйПериод.Период = СтатусыВерсийХранилища.Период
		|					И МаксимальныйПериод.ДатаЗаписиУниверсальная = СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК СтатусыВерсийХранилищаСрезПоследних
		|		ПО (СтатусыВерсийХранилищаСрезПоследних.ВерсияХранилища = ХешиГитСравненияИзменений.КрайняяВерсияИсторииХранилища)
		|ГДЕ
		|	СтатусыВерсийХранилищаСрезПоследних.Статус = &СтатусПеренесено";
	Запрос.УстановитьПараметр("СтатусПеренесено", Перечисления.СтатусыИсторииХранилищ.Перенесено);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РаботаСХранилищами.УдалитьВеткуГитСравненияВерсий(Выборка.Хранилище, Выборка.ЗадачаМетеор);
		Мз = РегистрыСведений.ХешиГитСравненияИзменений.СоздатьМенеджерЗаписи();
		Мз.ЗадачаМетеор = Выборка.ЗадачаМетеор;
		Мз.Хранилище = Выборка.Хранилище;
		Мз.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ФормированиеИтоговыхИзмененийПоЗадачеОбработчикЗадания() Экспорт
	
	//РегЗадания.ПроверитьРазрешениеЗапускаРегламентныхЗаданий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОперацийОбработкиОчереди.ОжидаетОбработки);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьФормированияИтоговыхИзмененийСрезПоследних.ЗадачаМетеор КАК ЗадачаМетеор
		|ИЗ
		|	РегистрСведений.ОчередьФормированияИтоговыхИзменений.СрезПоследних КАК ОчередьФормированияИтоговыхИзмененийСрезПоследних
		|ГДЕ
		|	ОчередьФормированияИтоговыхИзмененийСрезПоследних.Статус = &Статус";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗадачаМетеор  = Выборка.ЗадачаМетеор;
		Попытка
			РаботаСХранилищами.СформироваьИтоговыеИзмененияПоЗадаче(ЗадачаМетеор);
			
			МЗ = РегистрыСведений.ОчередьФормированияИтоговыхИзменений.СоздатьМенеджерЗаписи();
			МЗ.Период = ТекущаяДатаСеанса();
			МЗ.ЗадачаМетеор = ЗадачаМетеор;
			МЗ.Статус = Перечисления.СтатусыОперацийОбработкиОчереди.Обработано;
			МЗ.Записать();
		Исключение
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				"Формирование итоговых изменений по задаче",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.ОчередьФормированияИтоговыхИзменений,
				,
				ТекстОшибки);
			МЗ = РегистрыСведений.ОчередьФормированияИтоговыхИзменений.СоздатьМенеджерЗаписи();
			МЗ.Период = ТекущаяДатаСеанса();
			МЗ.ЗадачаМетеор = ЗадачаМетеор;
			МЗ.Статус = Перечисления.СтатусыОперацийОбработкиОчереди.Ошибка;
			МЗ.Комментарий = ТекстОшибки;
			МЗ.Записать();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузкаЗахваченныхОбъектовХранилищОбработчикЗадания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хранилища.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Хранилища КАК Хранилища
		|ГДЕ
		|	Хранилища.ПометкаУдаления = ЛОЖЬ
		|	И Хранилища.ЗагружатьЗахваченныеОбъектыХранилищ = ИСТИНА
		|	И Хранилища.БазаИсторииИмяПользователяХранилища <> """"";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РаботаСХранилищами.ЗаписатьЗахваченныеОбъекты(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Функция ПоследнийНомер(Хранилище, Автор = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсторияХранилища.Код КАК Номер
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|ГДЕ
	|	ИсторияХранилища.Владелец = &Хранилище
	|	И (&Автор = НЕОПРЕДЕЛЕНО
	|			ИЛИ &Автор = ИсторияХранилища.Автор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсторияХранилища.Код УБЫВ";
	Запрос.УстановитьПараметр("Хранилище", Хранилище);
	Запрос.УстановитьПараметр("Автор", Автор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПоследнийНомер = Выборка.Номер;
	Иначе
		ПоследнийНомер = 0;
	КонецЕсли;
	Возврат ПоследнийНомер;
	
КонецФункции

Функция ПоследнийКешированныйНомер(Хранилище, ВерсияХранилищаЕслиПусто = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьПолученияВерсийКонфигурации.ВерсияХранилища.Код КАК Номер
		|ИЗ
		|	РегистрСведений.ОчередьПолученияВерсийКонфигурации КАК ОчередьПолученияВерсийКонфигурации
		|ГДЕ
		|	ОчередьПолученияВерсийКонфигурации.ВерсияХранилища.Владелец = &Хранилище
		|	И ОчередьПолученияВерсийКонфигурации.ВыполняетсяПолучениеФайла = ЛОЖЬ
		|	И ОчередьПолученияВерсийКонфигурации.ПутьКФайлу <> """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер УБЫВ";
	Запрос.УстановитьПараметр("Хранилище", Хранилище);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПоследнийНомер = Выборка.Номер;
	Иначе
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИсторияХранилища.Ссылка КАК ВерсияХранилища,
			|	ИсторияХранилища.Код КАК Код
			|ИЗ
			|	Справочник.ИсторияХранилища КАК ИсторияХранилища
			|ГДЕ
			|	ИсторияХранилища.Владелец = &Хранилище
			|
			|УПОРЯДОЧИТЬ ПО
			|	Код УБЫВ";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КешВерсийХранилищ.ДобавитьВерсиюВОчередьВыгрузки(Выборка.ВерсияХранилища);
		КонецЕсли;
		ПоследнийНомер = 0;
	КонецЕсли;
	Возврат ПоследнийНомер;
	
КонецФункции

Функция ПоследнийХэшGit(Хранилище) Экспорт
	Результат = "";
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХешиGitВерсийХранилища.Хеш КАК ХешGit
		|ИЗ
		|	Справочник.ИсторияХранилища КАК ИсторияХранилища
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ХешиGitВерсийХранилища КАК ХешиGitВерсийХранилища
		|		ПО ХешиGitВерсийХранилища.ВерсияХранилища = ИсторияХранилища.Ссылка
		|		И ИсторияХранилища.Владелец = &Хранилище
		|УПОРЯДОЧИТЬ ПО
		|	ИсторияХранилища.Код УБЫВ";
	Запрос.УстановитьПараметр("Хранилище", Хранилище);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ХешGit;
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьЗадачиМетеор(Хранилище) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияХранилища.Ссылка КАК Коммит,
	|	ИсторияХранилища.Дата КАК Дата,
	|	ИсторияХранилища.Комментарий КАК Комментарий
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Конфигурации КАК Конфигурации
	|		ПО ИсторияХранилища.Владелец = Конфигурации.ХранилищеРазработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МаксимальныйПериод.Период КАК Период,
	|			МаксимальныйПериод.ВерсияХранилища КАК ВерсияХранилища,
	|			МаксимальныйПериод.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная,
	|			СтатусыВерсийХранилища.Период КАК Период1,
	|			СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища1,
	|			СтатусыВерсийХранилища.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная1,
	|			СтатусыВерсийХранилища.Статус КАК Статус,
	|			СтатусыВерсийХранилища.Ответственный КАК Ответственный,
	|			СтатусыВерсийХранилища.Процесс КАК Процесс,
	|			СтатусыВерсийХранилища.Комментарий КАК Комментарий
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(СтатусыВерсийХранилища.Период) КАК Период,
	|				СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
	|				МАКСИМУМ(СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК ДатаЗаписиУниверсальная
	|			ИЗ
	|				РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|			ГДЕ
	|				СтатусыВерсийХранилища.ВерсияХранилища.Владелец = &Хранилище
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СтатусыВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|				ПО МаксимальныйПериод.ВерсияХранилища = СтатусыВерсийХранилища.ВерсияХранилища
	|					И МаксимальныйПериод.Период = СтатусыВерсийХранилища.Период
	|					И МаксимальныйПериод.ДатаЗаписиУниверсальная = СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК СтатусыВерсийХранилищаСрезПоследних
	|		ПО (СтатусыВерсийХранилищаСрезПоследних.ВерсияХранилища = ИсторияХранилища.Ссылка)
	|ГДЕ
	|	ИсторияХранилища.Владелец = &Хранилище
	|	И СтатусыВерсийХранилищаСрезПоследних.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.ЗагрузкаДанных), ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.Ошибка))
	|	И НЕ ИсторияХранилища.Ссылка В
	|				(ВЫБРАТЬ
	|					ЗадачиМетеорВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища
	|				ИЗ
	|					РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища)";
	Запрос.УстановитьПараметр("Хранилище", Хранилище);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерЗадачи = РаботаСДаннымиМетеор.НомерЗадачиИзСтроки(Выборка.Комментарий);
		ЗадачаМетеор = Справочники.ЗадачиМетеор.ЗадачаМетеор(НомерЗадачи);
		Если Не ЗначениеЗаполнено(ЗадачаМетеор) Тогда
			ДанныеЗадачи = ИнтеграцияСМетеор.ПолучитьДанныеЗадачиИзМетеор(Новый Структура("Код, id, idv3, project_idv3", НомерЗадачи));
			Если ДанныеЗадачи <> Неопределено Тогда
				ЗадачаМетеор = Справочники.ЗадачиМетеор.СоздатьЕслиОтсутствует(НомерЗадачи);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗадачаМетеор) Тогда
			РаботаСХранилищами.ЗаписатьЗадачуВерсииХранилища(Выборка.Коммит, ЗадачаМетеор);
			//Этап = РегистрыСведений.ИсторияЭтаповЗадачиМетеор.Этап(ЗадачаМетеор, Выборка.Дата);
			//Если ЗначениеЗаполнено(Этап) И Не Этап = Справочники.ЭтапыЗадачиМетеор.ВыполнитьОсновнуюРаботуПоЗаданию Тогда
			//	ТекстОшибки = СтрШаблон("Коммит %1 %2 по задаче %3 был выполнен на этапе %4", Выборка.Коммит, Хранилище, ЗадачаМетеор, Этап);
			//	РаботаСХранилищами.ЗаписатьСтатусВерсииХранилища(Выборка.Коммит, Перечисления.СтатусыИсторииХранилищ.Ошибка, ТекстОшибки);
			//КонецЕсли;
		Иначе
			ТекстОшибки = СтрШаблон("Для коммита %1 %2 не удалось определить задачу Метеор по комментарию ""%3""", Выборка.Коммит, Хранилище,
				Выборка.Комментарий);
			РаботаСХранилищами.ЗаписатьСтатусВерсииХранилища(Выборка.Коммит, Перечисления.СтатусыИсторииХранилищ.Ошибка, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыМногопоточнойОбработкиЗаданий(НаименованиеФоновогоЗадания, КлючФоновогоЗадания) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хранилища.Ссылка КАК Хранилище,
	|	Хранилища.Наименование КАК НаименованиеХранилища
	|ИЗ
	|	Справочник.Хранилища КАК Хранилища
	|ГДЕ
	|	НЕ Хранилища.ПометкаУдаления
	|	И НЕ Хранилища.БазаИсторииСтрокаСоединения = """"";
	Выборка = Запрос.Выполнить().Выбрать();
	НаборПараметровПотоков = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		НаборПараметровПотоков.Вставить(
			КлючФоновогоЗадания + "_" + СтрЗаменить(Выборка.НаименованиеХранилища, " ", "_"),
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Хранилище));	
	КонецЦикла;
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
	ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0; // не ждать завершения
	//Временно запускаем задания не в фоне.
	ПараметрыВыполнения.ЗапуститьВФоне = Ложь;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Истина;
	
	Возврат Новый Структура("ПараметрыВыполнения, НаборПараметровПотоков", ПараметрыВыполнения, НаборПараметровПотоков);
КонецФункции

Функция ПараметрыЛинейнойОбработкиЗаданий() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хранилища.Ссылка КАК Хранилище,
	|	Хранилища.Наименование КАК НаименованиеХранилища,
	|	Хранилища.ВыгружатьВGit
	|ИЗ
	|	Справочник.Хранилища КАК Хранилища
	|ГДЕ
	|	НЕ Хранилища.ПометкаУдаления
	|	И НЕ Хранилища.БазаИсторииСтрокаСоединения = """"";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
КонецФункции

#Область ХранилищеПоПротоколуHTTP

Функция ПолучитьДеревоОтбъектоХранилища(Хранилище) Экспорт
	
	РеквизитыХранилища = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Хранилище, "ПутьHTTP, БазаИсторииИмяПользователяХранилища, БазаИсторииПарольХранилища, ВерсияПлатформы");
	ПараметрыХранилища = Новый Структура;
	ПараметрыХранилища.Вставить("Хранилище", Хранилище);
	ПараметрыХранилища.Вставить("ПутьHTTP", РеквизитыХранилища.ПутьHTTP);
	ПараметрыХранилища.Вставить("ИмяПользователяХранилища", РеквизитыХранилища.БазаИсторииИмяПользователяХранилища);
	ПараметрыХранилища.Вставить("ПарольХранилища", РеквизитыХранилища.БазаИсторииПарольХранилища);
	ПараметрыХранилища.Вставить("ВерсияПлатформы", РеквизитыХранилища.ВерсияПлатформы);
	
	// 1) Получаем дерево объектов и пользователей
	ТекстЗапроса = 
		"<crs:call xmlns:crs=""http://v8.1c.ru/8.2/crs"" alias=""[Каталог]""
		|name=""DevDepot_devObjectsHierarchy"" version=""[Версия]"">
		|<crs:auth user=""[Пользователь]"" password=""[ПарольМД5]""/>
		|<crs:params><crs:removed value=""false""/></crs:params>
		|</crs:call>";
	
	Дерево = ВыполнитьЗапросКХранилищуHTTP(ПараметрыХранилища, ТекстЗапроса);
	
	// 3) Стыковка идентификаторов
	ИндексОбъектов = Новый Соответствие;
	СоответсивеТиповОбъектов = Справочники.ТипыОбъектов.ПолучитьСоответсивеТиповОбъектов();
	Для Каждого ОписаниеОбъекта Из Дерево.crs_hierarchy.crs_value Цикл
		ИндексОбъектов[ОписаниеОбъекта.crs_first.value_] = ОписаниеОбъекта;
		ОбъектТипИД = ОписаниеОбъекта.crs_second.crs__super.crs__super.crs_classID.value_;
		Если СоответсивеТиповОбъектов[ОбъектТипИД] = Неопределено Тогда
			НеизвестныйТипОбъекта = Справочники.ТипыОбъектов.СоздатьЭлемент();
			НеизвестныйТипОбъекта.Код = ОбъектТипИД;
			НеизвестныйТипОбъекта.Наименование = "?";
			НеизвестныйТипОбъекта.НаименованиеВоМножественномЧисле = "?";
			НеизвестныйТипОбъекта.Записать();
			СоответсивеТиповОбъектов[ОбъектТипИД] = НеизвестныйТипОбъекта.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИндексОбъектов;
	
КонецФункции

Функция ПолучитьЗахваченныеОбъекты(Хранилище, ИндексОбъектов) Экспорт
	
	РеквизитыХранилища = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Хранилище, "ПутьHTTP, БазаИсторииИмяПользователяХранилища, БазаИсторииПарольХранилища, ВерсияПлатформы");
	ПараметрыХранилища = Новый Структура;
	ПараметрыХранилища.Вставить("Хранилище", Хранилище);
	ПараметрыХранилища.Вставить("ПутьHTTP", РеквизитыХранилища.ПутьHTTP);
	ПараметрыХранилища.Вставить("ИмяПользователяХранилища", РеквизитыХранилища.БазаИсторииИмяПользователяХранилища);
	ПараметрыХранилища.Вставить("ПарольХранилища", РеквизитыХранилища.БазаИсторииПарольХранилища);
	ПараметрыХранилища.Вставить("ВерсияПлатформы", РеквизитыХранилища.ВерсияПлатформы);
	
	Таблица = Новый ТаблицаЗначений;
	ТипСтрока40 = ОбщегоНазначения.ОписаниеТипаСтрока(40);
	Таблица.Колонки.Добавить("ОбъектИД", ТипСтрока40);
	Таблица.Колонки.Добавить("ОбъектИмя", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	Таблица.Колонки.Добавить("ОбъектТип", Новый ОписаниеТипов("СправочникСсылка.ТипыОбъектов"));
	Таблица.Колонки.Добавить("РодительскийИД", ТипСтрока40);
	Таблица.Колонки.Добавить("ПользовательИД", ТипСтрока40);
	Таблица.Колонки.Добавить("Пользователь", ТипСтрока40);
	Таблица.Колонки.Добавить("ДатаЗахвата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Таблица.Колонки.Добавить("НомерВерсии", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	// 1) Получаем статусы объектов
	ТекстЗапроса = 
		"<crs:call xmlns:crs=""http://v8.1c.ru/8.2/crs"" alias=""[Каталог]""
		|name=""DevDepot_devObjectsStatistic"" version=""[Версия]"">
		|<crs:auth user=""[Пользователь]"" password=""[ПарольМД5]""/>
		|<crs:params><crs:objRefs/><crs:removed value=""true""/></crs:params>
		|</crs:call>";
	Статусы = ВыполнитьЗапросКХранилищуHTTP(ПараметрыХранилища, ТекстЗапроса);
	
	// 2) Заполняем соотвествие пользователей
	мПользователи = Новый Соответствие;
	Для Каждого Юзер Из Статусы.crs_users.crs_value Цикл
		мПользователи[Юзер.crs_first.value_] = Юзер.crs_second.crs_info.crs_name.value_;
	КонецЦикла;
	СоответсивеТиповОбъектов = Справочники.ТипыОбъектов.ПолучитьСоответсивеТиповОбъектов();

	// 3) Получаем гуиды захваченных объектов и их расшифровку
	Для Каждого СтатусОбъекта Из Статусы.crs_statMap.crs_value Цикл
		Если СтатусОбъекта.crs_second.crs_revised.value_ = "true" Тогда
			Стр = Таблица.Добавить();
			Стр.ОбъектИД = СтатусОбъекта.crs_first.value_;
			Стр.ПользовательИД = СтатусОбъекта.crs_second.crs_revisorID.value_;
			Стр.Пользователь = мПользователи[СтатусОбъекта.crs_second.crs_revisorID.value_];
			Стр.ДатаЗахвата = СтроковыеФункцииКлиентСервер.СтрокаВДату(СтрЗаменить(СтатусОбъекта.crs_second.crs_reviseDate.value_, "T", " "), ЧастиДаты.ДатаВремя);
			
			ОписаниеОбъекта = ИндексОбъектов[Стр.ОбъектИД];
			Если ОписаниеОбъекта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Стр.НомерВерсии = ОписаниеОбъекта.crs_second.crs__super.crs_verNum;
			Стр.ОбъектИмя = ОписаниеОбъекта.crs_second.crs__super.crs_name.value_;
			ОбъектТипИД = ОписаниеОбъекта.crs_second.crs__super.crs__super.crs_classID.value_;
			Стр.ОбъектТип = СоответсивеТиповОбъектов[ОбъектТипИД].Ссылка;
			Если СоответсивеТиповОбъектов[ОбъектТипИД].СкрыватьВНазванииОбъекта = Ложь Тогда
				Стр.ОбъектИмя = СоответсивеТиповОбъектов[ОбъектТипИД].Наименование + "." + Стр.ОбъектИмя;
			КонецЕсли;
			Стр.РодительскийИД = Стр.ОбъектИД;
			
			// Собираем полное имя объекта
			Родитель = ИндексОбъектов[ОписаниеОбъекта.crs_second.crs__super.crs_parentID.value_];
			Пока Родитель <> Неопределено Цикл
				Если Родитель.crs_second.crs__super.crs_parentID.value_ = "00000000-0000-0000-0000-000000000000" Тогда
					Прервать;
				КонецЕсли;
				Стр.РодительскийИД = Родитель.crs_first.value_;
				РодительИмя = Родитель.crs_second.crs__super.crs_name.value_;
				ТипИД = Родитель.crs_second.crs__super.crs__super.crs_classID.value_;
				Если СоответсивеТиповОбъектов[ТипИД].СкрыватьВНазванииОбъекта = Ложь  Тогда
					РодительИмя = СоответсивеТиповОбъектов[ТипИД].Наименование + "." + РодительИмя;
				КонецЕсли;
				Стр.ОбъектИмя = РодительИмя + "." + Стр.ОбъектИмя;
				Родитель = ИндексОбъектов[Родитель.crs_second.crs__super.crs_parentID.value_];
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОсободившиесяОбъекты(ИндексОбъектов, ИдентификторыПроверяемыхОбъектов, ТабличаЗахваченныхОбъектов) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	ТипСтрока40 = ОбщегоНазначения.ОписаниеТипаСтрока(40);
	Таблица.Колонки.Добавить("ОбъектИД", ТипСтрока40);
	Таблица.Колонки.Добавить("ОбъектИмя", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	Таблица.Колонки.Добавить("НомерВерсии", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Для Каждого Эл Из ?(ИдентификторыПроверяемыхОбъектов = Неопределено, Новый Массив, ИдентификторыПроверяемыхОбъектов) Цикл
		Если ТабличаЗахваченныхОбъектов.Найти(Эл, "ОбъектИД") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеОбъекта = ИндексОбъектов[Эл];
		Если ОписаниеОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Стр = Таблица.Добавить();
		Стр.ОбъектИД = Эл;
		Стр.ОбъектИмя = ОписаниеОбъекта.crs_second.crs__super.crs_name.value_; // не полное
		Стр.НомерВерсии = ОписаниеОбъекта.crs_second.crs__super.crs_verNum;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Процедура УстановитьМетку(Хранилище, НомерКоммита, Метка, Комментарий = "") Экспорт
	
	РеквизитыХранилища = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Хранилище, "ПутьHTTP, БазаПереносаИмяПользователяХранилища, БазаПереносаПарольХранилища, ВерсияПлатформы");
	ПараметрыХранилища = Новый Структура;
	ПараметрыХранилища.Вставить("Хранилище", Хранилище);
	ПараметрыХранилища.Вставить("ПутьHTTP", РеквизитыХранилища.ПутьHTTP);
	ПараметрыХранилища.Вставить("ИмяПользователяХранилища", РеквизитыХранилища.БазаПереносаИмяПользователяХранилища);
	ПараметрыХранилища.Вставить("ПарольХранилища", РеквизитыХранилища.БазаПереносаПарольХранилища);
	ПараметрыХранилища.Вставить("ВерсияПлатформы", РеквизитыХранилища.ВерсияПлатформы);
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		"<crs:call xmlns:crs=""http://v8.1c.ru/8.2/crs"" alias=""[Каталог]""
		|name=""DevDepot_changeVersion"" version=""[Версия]"">
		|<crs:auth user=""[Пользователь]"" password=""[ПарольМД5]""/>
		|<crs:bind bindID=""00000000-0000-0000-0000-000000000000""/>
		|<crs:params>
		|<crs:oldVersion>
		|	<crs:info>
		|		<crs:verNum>0</crs:verNum>
		|		<crs:userID value=""00000000-0000-0000-0000-000000000000""/>
		|		 <crs:cvermajor>0</crs:cvermajor>
		|		<crs:cverminor>0</crs:cverminor>
		|		<crs:pvermajor value=""0""/>
		|		 <crs:pverminor value=""0""/>
		|		<crs:pverbuild value=""0""/>
		|		<crs:pverrevis value=""0""/>
		|		<crs:date value=""0001-01-01T00:00:00""/>
		|		<crs:code value=""0""/>
		|		<crs:comment></crs:comment>
		|		<crs:versionID value=""00000000-0000-0000-0000-000000000000""/>
		|		</crs:info>
		|	</crs:oldVersion>
		|<crs:newVersion>
		|	<crs:info>
		|		<crs:verNum>[Коммит]</crs:verNum>
		|		<crs:userID value=""00000000-0000-0000-0000-000000000000""/>
		|		<crs:cvermajor>0</crs:cvermajor>
		|		<crs:cverminor>0</crs:cverminor>
		|		<crs:pvermajor value=""0""/>
		|		<crs:pverminor value=""0""/>
		|		<crs:pverbuild value=""0""/>
		|		<crs:pverrevis value=""0""/>
		|		<crs:date value=""0001-01-01T00:00:00""/>
		|		<crs:code value=""""/>
		|		<crs:comment>[Комментарий]</crs:comment>
		|		<crs:versionID value=""00000000-0000-0000-0000-000000000000""/>
		|		</crs:info>
		|	<crs:label>
		|		<crs:verNum>0</crs:verNum>
		|		<crs:userID value=""00000000-0000-0000-0000-000000000000""/>
		|		<crs:date value=""0001-01-01T00:00:00""/>
		|		<crs:name value=""[Метка]""/>
		|		<crs:comment/>
		|		</crs:label>
		|	</crs:newVersion>
		|</crs:params>
		|</crs:call>", Новый Структура("Коммит, Метка, Комментарий", XMLСтрока(НомерКоммита), Метка, Комментарий));
	ВыполнитьЗапросКХранилищуHTTP(ПараметрыХранилища, ТекстЗапроса);
	
КонецПроцедуры

Функция CAPICOM_HASH_ALGORITHM_MD5(Пароль)
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(Пароль, "UTF16"));
	Возврат НРег(СтрЗаменить(ХешированиеДанных.ХешСумма, " ", ""));
КонецФункции

// Функция - Выполнить запрос к хранилищу HTTP
//
// Параметры:
//  ПараметрыХранилища	 - Структура - Хранилище, ПутьHTTP, ИмяПользователяХранилища, ПарольХранилища
//  Тело				 - Строка - Запрос XML
// 
// Возвращаемое значение:
//   - Структура
//
Функция ВыполнитьЗапросКХранилищуHTTP(ПараметрыХранилища, Тело)
	
	Если Не ЗначениеЗаполнено(ПараметрыХранилища.ПутьHTTP) Тогда
		ВызватьИсключение "Не указан ПутьHTTP хранилища " + ПараметрыХранилища.Хранилище;
	КонецЕсли;
	СИ = Новый СистемнаяИнформация;
	ПараметрыХранилища.Вставить("Версия", ?(ЗначениеЗаполнено(ПараметрыХранилища.ВерсияПлатформы), ПараметрыХранилища.ВерсияПлатформы, СИ.ВерсияПриложения));
	ПараметрыХранилища.Вставить("Пользователь", ПараметрыХранилища.ИмяПользователяХранилища);
	ПараметрыХранилища.Вставить("ПарольМД5", CAPICOM_HASH_ALGORITHM_MD5(ПараметрыХранилища.ПарольХранилища));
	
	Позиция = СтрНайти(ПараметрыХранилища.ПутьHTTP, ".1ccr");
	Адрес = Лев(ПараметрыХранилища.ПутьHTTP, Позиция + 4);
	ПараметрыХранилища.Вставить("Каталог", Сред(ПараметрыХранилища.ПутьHTTP, Позиция + 6));
	
	Тело = "<?xml version=""1.0"" encoding=""UTF-8""?>
		|" + СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Тело, ПараметрыХранилища);
	
	Ответ = КоннекторHTTP.Post(Адрес, Тело);
	Результат = КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8);
	Данные = ПолучитьСтруктуруИзXML(СтрЗаменить(Результат, ":", "_"));
	
	Если Данные.Свойство("Текст") Тогда
		Сообщение = Новый ТекстовыйДокумент;
		Чтение = Новый ЧтениеДанных(Base64Значение(Данные.Текст));
		Пока Истина Цикл
			Строка = Чтение.ПрочитатьСтроку();
			Если Не ЗначениеЗаполнено(Строка) Тогда
				Прервать;
			КонецЕсли;
			Сообщение.ДобавитьСтроку(Строка);
		КонецЦикла;
		ВызватьИсключение Сообщение.ПолучитьТекст();
	КонецЕсли;
	
	Возврат Данные;
КонецФункции

Функция ПолучитьСтруктуруИзXML(ТекстXML)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	РезультатЧтения = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	СтруктураДокумента = XDTOвСтруктуру(РезультатЧтения);
	Возврат СтруктураДокумента;
КонецФункции

Функция XDTOвСтруктуру(Значение)
	
	Если ТипЗнч(Значение)=Тип("СписокXDTO") Тогда
		Рез = Новый Массив;
		Для Каждого Эл Из Значение Цикл
			Рез.Добавить(XDTOвСтруктуру(Эл));
		КонецЦикла;
		Возврат Рез;
	ИначеЕсли ТипЗнч(Значение)=Тип("ОбъектXDTO") Тогда
		Рез = Новый Структура;
		Для Каждого Эл Из Значение.Свойства() Цикл
			Если Эл.Тип.Имя="anySimpleType" Тогда
				Рез.Вставить(?(Эл.Имя = "value", "value_",Эл.Имя), Значение[Эл.Имя]);
			Иначе
				Рез.Вставить(?(Эл.Имя = "value", "value_",Эл.Имя), XDTOвСтруктуру(Значение[Эл.Имя]));
			КонецЕсли;
		КонецЦикла;
		Попытка
			Последовательность = Значение.Последовательность();
			Если Последовательность.Количество()>0 и Последовательность.ПолучитьСвойство(0)=Неопределено Тогда
				Рез.Вставить("Текст", Последовательность.ПолучитьТекст(0));
			КонецЕсли;
		Исключение
			// ничего страшного
		КонецПопытки;
		Если Рез.Количество() = 0 Тогда
			Возврат Неопределено
		КонецЕсли;
		Возврат Рез;
	Иначе
		Возврат Значение;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецОбласти
