#Область ПрограммныйИнтерфейс

// Получает список пользователей-администраторов расширений с возможностью отбора по базе
//
// Параметры:
//  Базы	 - Массив (СправочникСсылка.Базы1С), Неопределено  - базы 1С для отбора
// 
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьСписокПользователейСПравом(Право, Знач Базы = Неопределено) Экспорт

	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("База", Новый ОписаниеТипов("СправочникСсылка.Базы1С"));
	Результат.Колонки.Добавить("Пользователь", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	
	ПутьМетода = СтрШаблон("/UserList/%1", Право);
	ПараметрыЗапросовСервиса = ПараметрыЗапросовСервиса(Базы, ПутьМетода, Новый Структура);
	
	// Перебираем все ответы от сервисов
	Для Каждого ПараметрыЗапроса Из ПараметрыЗапросовСервиса Цикл
		Попытка
			АдминистраторыОднойБазы = ОтветСервиса(ПараметрыЗапроса, Метаданные.СвойстваОбъектов.HTTPМетод.GET);
			Если АдминистраторыОднойБазы.КодСостояния = 200 И СтрНачинаетсяС(АдминистраторыОднойБазы.ТелоОтвета, "{") Тогда
				СтруктураОтвета = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(АдминистраторыОднойБазы.ТелоОтвета);
				Для Каждого Имя Из СтруктураОтвета.Результат Цикл
					СтрокаОшибка = Результат.Добавить();
					СтрокаОшибка.База = ПараметрыЗапроса.База;
					СтрокаОшибка.Пользователь = Имя;
				КонецЦикла;
			Иначе
				СтрокаОшибка = Результат.Добавить();
				СтрокаОшибка.База = ПараметрыЗапроса.База;
				СтрокаОшибка.Пользователь = СтрШаблон("%1: %2", АдминистраторыОднойБазы.КодСостояния, АдминистраторыОднойБазы.ТелоОтвета);
			КонецЕсли;
		Исключение
			СтрокаОшибка = Результат.Добавить();
			СтрокаОшибка.База = ПараметрыЗапроса.База;
			СтрокаОшибка.Пользователь = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокПользователейСРолью(Роль, Знач Базы = Неопределено) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("База", Новый ОписаниеТипов("СправочникСсылка.Базы1С"));
	Результат.Колонки.Добавить("Пользователь", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	
	ПутьМетода = СтрШаблон("/UserListRole/%1", Роль);
	ПараметрыЗапросовСервиса = ПараметрыЗапросовСервиса(Базы, ПутьМетода, Новый Структура);
	
	// Перебираем все ответы от сервисов
	Для Каждого ПараметрыЗапроса Из ПараметрыЗапросовСервиса Цикл
		Попытка
			АдминистраторыОднойБазы = ОтветСервиса(ПараметрыЗапроса, Метаданные.СвойстваОбъектов.HTTPМетод.GET);
			Если АдминистраторыОднойБазы.КодСостояния = 200 И СтрНачинаетсяС(АдминистраторыОднойБазы.ТелоОтвета, "{") Тогда
				СтруктураОтвета = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(АдминистраторыОднойБазы.ТелоОтвета);
				Для Каждого Имя Из СтруктураОтвета.Результат Цикл
					СтрокаОшибка = Результат.Добавить();
					СтрокаОшибка.База = ПараметрыЗапроса.База;
					СтрокаОшибка.Пользователь = Имя;
				КонецЦикла;
			Иначе
				СтрокаОшибка = Результат.Добавить();
				СтрокаОшибка.База = ПараметрыЗапроса.База;
				СтрокаОшибка.Пользователь = СтрШаблон("%1: %2", АдминистраторыОднойБазы.КодСостояния, АдминистраторыОднойБазы.ТелоОтвета);
			КонецЕсли;
		Исключение
			СтрокаОшибка = Результат.Добавить();
			СтрокаОшибка.База = ПараметрыЗапроса.База;
			СтрокаОшибка.Пользователь = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаССервисом

// Формирует параметры запросов к сервису на основании информации в справочнике Базы1С
// и выполняемой операции
//
// Параметры:
//  Базы	 - СправочникСсылка.Базы1С, Массив  - база или массив баз 1С для отбора
//  ПутьМетода		 - Строка - путь метода в сервисе дополнений
//  ПараметрыМетода	 - Структура - параметры для передачи в строке URI
// 
// Возвращаемое значение:
//  Массив - массив структур с параметрами сервисов баз.
//
Функция ПараметрыЗапросовСервиса(Базы, ПутьМетода, ПараметрыМетода)
	
	СтрокаПараметров = СтрокаПараметровЗапроса(ПараметрыМетода);
	АдресМетодаСПараметрами = ПутьМетода + СтрокаПараметров;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Базы1С.Ссылка КАК База,
		|	Базы1С.АдресСервисаУправлениеПользователями + &АдресМетодаСПараметрами КАК АдресЗапроса,
		|	Базы1С.ПользовательСервисаУправлениеПользователями КАК Пользователь,
		|	Базы1С.ПарольСервисаУправлениеПользователями КАК Пароль
		|ИЗ
		|	Справочник.Базы1С КАК Базы1С
		|ГДЕ
		|	1 = 1
		|	И Базы1С.ПометкаУдаления = Ложь
		|	И НЕ Базы1С.АдресСервисаУправлениеПользователями = """"
		|	И (&ВыбратьВсе
		|			ИЛИ Базы1С.Ссылка В (&Базы))
		|	И (НЕ &ОтборВКопии
		|			ИЛИ Базы1С.ЭтоКопия)";
	
	Запрос.УстановитьПараметр("ВыбратьВсе", Базы = Неопределено);	
	Запрос.УстановитьПараметр("Базы", Базы);
	Запрос.УстановитьПараметр("АдресМетодаСПараметрами", АдресМетодаСПараметрами);
	Запрос.УстановитьПараметр("ОтборВКопии", БлокировкаРаботыСВнешнимиРесурсамиУКПовтИсп.ЭтоКопияБазы());
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса.Выгрузить());
	
КонецФункции

Функция СтрокаПараметровЗапроса(СтруктураПараметров)

	СтрокаСПараметрами = "";	
	ШаблонПараметра = "&%1=%2";
	МассивСтрокПараметров = Новый Массив;
	Для Каждого ПараметрЗапроса Из СтруктураПараметров Цикл
		МассивСтрокПараметров.Добавить(СтрШаблон(ШаблонПараметра, ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение));
	КонецЦикла;		
	
	Если МассивСтрокПараметров.Количество() Тогда
		СтрокаСПараметрами = СтрШаблон("?%1", Сред(СтрСоединить(МассивСтрокПараметров), 2));
	КонецЕсли;
	
	Возврат	СтрокаСПараметрами;
	
КонецФункции

Функция Соединение(СтруктураURI, Пользователь, Пароль, Таймаут)
	
	ЗащищенноеСоединение = ?(СтруктураURI.Схема = "https", ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС), Неопределено);
	Порт = ?(ЗначениеЗаполнено(СтруктураURI.Порт), Число(СтруктураURI.Порт), ?(ЗащищенноеСоединение = Неопределено, 80, 443));
	
	Возврат Новый HTTPСоединение(СтруктураURI.Хост, Порт, Пользователь, Пароль,, Таймаут, ЗащищенноеСоединение);
	
КонецФункции

// Формирует запрос по переданным параметрам, и получает ответ сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ПараметрыЗапросовСервиса
//  ТипЗапроса		 - ПеречислимыеСвойстваОбъектовМетаданных.HTTPМетод - требуемый тип запроса
// 
// Возвращаемое значение:
//  Структура
//    * КодСостояния
//    * ТелоОтвета
//
Функция ОтветСервиса(ПараметрыЗапроса, ТипЗапроса)
	
	РезультатЗапроса = Новый Структура;
	РезультатЗапроса.Вставить("КодСостояния");
	РезультатЗапроса.Вставить("ТелоОтвета");
	
	АдресЗапроса =ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "АдресЗапроса");
	Пользователь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Пользователь", "");
	Пароль = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Пароль", "");
	ТелоЗапроса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ТелоЗапроса", "");
	ТипТелаЗапроса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ТипТелаЗапроса", Тип("Строка"));
	ОжидаемыйТипОтвета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ОжидаемыйТипОтвета", Тип("Строка"));
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресЗапроса);
	
	Попытка
		Соединение = Соединение(СтруктураURI, Пользователь, Пароль, 30);
	Исключение
		ТекстОшибки =
			СтрШаблон("Не удалось установить соединение с сервисом: %1.", АдресЗапроса) 
				+ Символы.ПС + 	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.HTTPСервисы.Дополнения,
			,
			ТекстОшибки);
		РезультатЗапроса.КодСостояния = 1000;
		РезультатЗапроса.ТелоОтвета = ТекстОшибки;
		Возврат РезультатЗапроса;
	КонецПопытки;
	КонтентТайп = "application/json; charset=utf-8";
	Если Не ОжидаемыйТипОтвета = Тип("Строка") Тогда
		КонтентТайп = "application/octet-stream";
	КонецЕсли;
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", КонтентТайп);
	ЗаголовкиHTTP.Вставить("Accept-Charset", "utf-8");
	
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, ЗаголовкиHTTP);
	Если ТипТелаЗапроса = Тип("Строка") Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	ИначеЕсли ТипТелаЗапроса = Тип("ДвоичныеДанные") Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
	КонецЕсли;
	
	Попытка
		Если ТипЗапроса = Метаданные.СвойстваОбъектов.HTTPМетод.GET Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		ИначеЕсли ТипЗапроса = Метаданные.СвойстваОбъектов.HTTPМетод.POST Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ТипЗапроса = Метаданные.СвойстваОбъектов.HTTPМетод.PUT Тогда
			HTTPОтвет = Соединение.Записать(HTTPЗапрос);
		ИначеЕсли ТипЗапроса = Метаданные.СвойстваОбъектов.HTTPМетод.DELETE Тогда
			HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
		Иначе
			HTTPОтвет = Соединение.ВызватьHTTPМетод(Строка(ТипЗапроса), HTTPЗапрос);
		КонецЕсли;
	Исключение
		ТекстОшибки = СтрШаблон(
			"Ошибка работы с сервисом. Адрес: %1." "%2",
			АдресЗапроса,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.HTTPСервисы.Дополнения,
			,
			ТекстОшибки);
		РезультатЗапроса.КодСостояния = 1000;
		РезультатЗапроса.ТелоОтвета = ТекстОшибки;
		Возврат РезультатЗапроса;
	КонецПопытки;
	
	РезультатЗапроса.КодСостояния = HTTPОтвет.КодСостояния;
	Если ОжидаемыйТипОтвета = Тип("Строка")Тогда
		РезультатЗапроса.ТелоОтвета  = HTTPОтвет.ПолучитьТелоКакСтроку();
	ИначеЕсли ОжидаемыйТипОтвета = Тип("ДвоичныеДанные") Тогда
		РезультатЗапроса.ТелоОтвета  = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		ТекстОшибки = "Неподдерживаемый тип ответа сервиса. Код состояния: " + HTTPОтвет.КодСостояния;
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.HTTPСервисы.Дополнения,
			,
			ТекстОшибки);
		РезультатЗапроса.КодСостояния = 1000;
		РезультатЗапроса.ТелоОтвета = ТекстОшибки;
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

#Область Словари

Функция ИмяСобытияЖР()
	Возврат "Дополнения";
КонецФункции

#КонецОбласти

#КонецОбласти

