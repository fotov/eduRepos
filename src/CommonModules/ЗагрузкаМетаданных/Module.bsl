//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Методы для загрузки описания метаданных конфигурации
//  
//////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ЗагрузитьМетаданные(Конфигурация) Экспорт

	Хранилище = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Конфигурация, "ХранилищеРазработки");
	
	КаталогGit1С = ?(БлокировкаРаботыСВнешнимиРесурсамиУКПовтИсп.ЭтоКопияБазы(), "\\izb-app20\repos\git1c", РаботаСХранилищами.КаталогGit1С());
	КаталогРепозиторияХранилища =
		КаталогGit1С + "\" +
		РаботаСХранилищами.ИмяПапкиGitХранилища(Хранилище) + "\" +
		РаботаСХранилищами.КаталогКонфигурацииХранилища(Хранилище);
	
	Если Не ЭтоВыгрузкаКонфигурации(КаталогРепозиторияХранилища) Тогда
		ВызватьИсключение СтрШаблон(
			"Не обнаружен файл описания конфигурации. Выбранный каталог не является репозиторием хранилища.
			|Конфигурация: %1
			|Путь репозитория хранилища: %2",
			Конфигурация,
			КаталогРепозиторияХранилища);
	КонецЕсли;
	
	// Загрузку описания производим из файла ConfigDumpInfo
	// т.к. в нём достаточно информации uuid объекта, имя объекта.
	// Информацию по принадлежности объектов к подсистемам производим отдельно по иерархии подсистем.
	
	ЗагрузитьОписаниеОбъектовМетаданных(Конфигурация, КаталогРепозиторияХранилища);
	ЗагрузитьОписаниеПодсистемКонфигурации(Конфигурация, КаталогРепозиторияХранилища);
	ЗагрузитьПредопределенныеЭлементыОбъектовМетаданных(Конфигурация, КаталогРепозиторияХранилища);
	ЗагрузитьОписаниеРолей(Конфигурация, КаталогРепозиторияХранилища);
	
КонецПроцедуры

Процедура ЗагрузитьРоли(Конфигурация) Экспорт

	Хранилище = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Конфигурация, "ХранилищеРазработки");
	
	КаталогGit1С = ?(БлокировкаРаботыСВнешнимиРесурсамиУКПовтИсп.ЭтоКопияБазы(), "\\izb-app20\repos\git1c", РаботаСХранилищами.КаталогGit1С());
	КаталогРепозиторияХранилища =
		КаталогGit1С + "\" +
		РаботаСХранилищами.ИмяПапкиGitХранилища(Хранилище) + "\" +
		РаботаСХранилищами.КаталогКонфигурацииХранилища(Хранилище);
	
	Если Не ЭтоВыгрузкаКонфигурации(КаталогРепозиторияХранилища) Тогда
		ВызватьИсключение СтрШаблон(
			"Не обнаружен файл описания конфигурации. Выбранный каталог не является репозиторием хранилища.
			|Конфигурация: %1
			|Путь репозитория хранилища: %2",
			Конфигурация,
			КаталогРепозиторияХранилища);
	КонецЕсли;
	
	ЗагрузитьОписаниеРолей(Конфигурация, КаталогРепозиторияХранилища);
	
КонецПроцедуры

Функция ИзмененияМетаданныхОбъектовВерсии(ВерсияХранилища) Экспорт
		
	КаталогВыгрузкиКонфигурации = "src/cf/";// Относительно корня репозитория.
	ИзмененияОбъектов = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияХранилища.Ссылка КАК Ссылка,
		|	ИсторияХранилища.Владелец КАК Владелец,
		|	ИсторияХранилища.Код КАК Код
		|ПОМЕСТИТЬ ДанныеВерсии
		|ИЗ
		|	Справочник.ИсторияХранилища КАК ИсторияХранилища
		|ГДЕ
		|	ИсторияХранилища.Ссылка = &ВерсияХранилища
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|	ХешиGitВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
		|	ХешиGitВерсийХранилища.Хеш КАК Хеш,
		|	ХешиGitВерсийХранилища.ВерсияХранилища.Владелец.ПроектGit.Код КАК ИдентификаторПроектаГит
		|ИЗ
		|	РегистрСведений.ХешиGitВерсийХранилища КАК ХешиGitВерсийХранилища
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеВерсии КАК ДанныеВерсии
		|		ПО ХешиGitВерсийХранилища.ВерсияХранилища.Код <= ДанныеВерсии.Код
		|			И ХешиGitВерсийХранилища.ВерсияХранилища.Владелец = ДанныеВерсии.Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХешиGitВерсийХранилища.ВерсияХранилища.Код УБЫВ";
	
	Запрос.УстановитьПараметр("ВерсияХранилища", ВерсияХранилища);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ИдентификаторПроектаГит = 0;
	ХешКоммитаТекущего = "";
	ХешКоммитаРодителя = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ВерсияХранилища = ВерсияХранилища Тогда
			ХешКоммитаТекущего = ВыборкаДетальныеЗаписи.Хеш;
			ИдентификаторПроектаГит = ВыборкаДетальныеЗаписи.ИдентификаторПроектаГит;
		Иначе
			ХешКоммитаРодителя = ВыборкаДетальныеЗаписи.Хеш;
		КонецЕсли;
	КонецЦикла;	
	
	РезультатСравнения = РаботаСGIT.СравнитьКоммитыВеткиТеги(ИдентификаторПроектаГит, ХешКоммитаРодителя, ХешКоммитаТекущего,, "true");
	
	Если РезультатСравнения.КодСостояния >= 300 Тогда
		Сообщить(РезультатСравнения.ТелоОтвета);
		Возврат Неопределено;
	КонецЕсли;
	
	Различия = РезультатСравнения.Результат.diffs;
	ИмяФайлаРодитель = ПолучитьИмяВременногоФайла();
	ИмяФайлаТекущий = ПолучитьИмяВременногоФайла();
	СловарьКлассаОбъекта = СловарьКлассОбъектаПоИмениФайлаМетаданныхXML();
	Для Каждого БлокРазличий Из Различия Цикл
		ЭтоДобавлениеОбъекта = БлокРазличий.new_file;
		ЭтоУдалениеОбъекта = БлокРазличий.deleted_file;
		ИмяФайлаГитРодитель = БлокРазличий.old_path;
		ИмяФайлаГитТекущий = БлокРазличий.new_path;
		Если ЭтоДобавлениеОбъекта Или ЭтоУдалениеОбъекта Или Не ФайлОбъектаПодходитДляСравнения(ИмяФайлаГитТекущий) Тогда
			Продолжить;
		КонецЕсли;
		
		//// Нужно изменить способ получения ответа. Т.к. сейчас получается только строка, и преобразуется сразу в json.
		//РаботаСGIT.ПолучитьДвоичныеДанныеФайла(...);
		ДанныеФайлаРодитель = РаботаСGIT.ПолучитьДанныеФайла(ИдентификаторПроектаГит, КодироватьСтроку(ИмяФайлаГитРодитель, СпособКодированияСтроки.КодировкаURL), ХешКоммитаРодителя);
		Если ДанныеФайлаРодитель.КодСостояния >= 300 Тогда
			Сообщить(ДанныеФайлаРодитель.ТелоОтвета);
			Возврат Неопределено;
		КонецЕсли;
		СодержимоеРодитель = Base64Значение(ДанныеФайлаРодитель.Результат.content);
		СодержимоеРодитель.Записать(ИмяФайлаРодитель);
		
		ДанныеФайлаТекущий = РаботаСGIT.ПолучитьДанныеФайла(ИдентификаторПроектаГит, КодироватьСтроку(ИмяФайлаГитТекущий, СпособКодированияСтроки.КодировкаURL), ХешКоммитаТекущего);
		Если ДанныеФайлаТекущий.КодСостояния >= 300 Тогда
			Сообщить(ДанныеФайлаТекущий.ТелоОтвета);
			Возврат Неопределено;
		КонецЕсли;
		СодержимоеТекущий = Base64Значение(ДанныеФайлаТекущий.Результат.content);
		СодержимоеТекущий.Записать(ИмяФайлаТекущий);
		
		//ЧастиИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СтрЗаменить(ИмяФайлаГитРодитель, "/", "\"));
		ИзмененныйОбъектИмяФайла = Сред(ИмяФайлаГитРодитель, СтрНайти(ИмяФайлаГитРодитель, КаталогВыгрузкиКонфигурации) + СтрДлина(КаталогВыгрузкиКонфигурации));
		ИзмененныйОбъектИмяФайла = СтрЗаменить(ИзмененныйОбъектИмяФайла, ".xml", "");
		ИзмененныйОбъектИмяФайла = СтрЗаменить(ИзмененныйОбъектИмяФайла, "/", ".");
		ЧастиИмениОбъекта = СтрРазделить(ИзмененныйОбъектИмяФайла, ".");
		Если ЧастиИмениОбъекта.Количество() > 1 Тогда
			ЧастиИмениОбъекта[0] = СловарьКлассаОбъекта.Получить(ЧастиИмениОбъекта[0]);
			ИзмененныйОбъект = СтрСоединить(ЧастиИмениОбъекта, ".");
		Иначе
			ИзмененныйОбъект = ИзмененныйОбъектИмяФайла;
		КонецЕсли;
		
		ИзмененияОбъекта = ПолучитьИзмененияОбъектаМетаданныхXML(ИмяФайлаРодитель, ИмяФайлаТекущий);
		ИзмененияОбъектов.Вставить(ИзмененныйОбъект, ИзмененияОбъекта);
	КонецЦикла;
	
	// Предопределенные в отдельном файле
	Для Каждого БлокРазличий Из Различия Цикл
		// src/cf/Catalogs/ВидыВыборочнойПроверки/Ext/Predefined.xml
		ЭтоДобавлениеОбъекта = БлокРазличий.new_file;
		ЭтоУдалениеОбъекта = БлокРазличий.deleted_file;
		ИмяФайлаГитРодитель = БлокРазличий.old_path;
		ИмяФайлаГитТекущий = БлокРазличий.new_path;
		
		ИмяИзмененногоФайла = ?(ЗначениеЗаполнено(ИмяФайлаГитТекущий), ИмяФайлаГитТекущий, ИмяФайлаГитРодитель);
		Если Не СтрНайти(ИмяИзмененногоФайла, "Predefined.xml") > 0 Тогда
			Продолжить;
		КонецЕсли;
	
		ИзмененныйОбъектИмяФайла = Сред(ИмяИзмененногоФайла, СтрНайти(ИмяИзмененногоФайла, КаталогВыгрузкиКонфигурации) +
			СтрДлина(КаталогВыгрузкиКонфигурации));
		ИзмененныйОбъектИмяФайла = СтрЗаменить(ИзмененныйОбъектИмяФайла, "/Ext/Predefined.xml", "");
		ИзмененныйОбъектИмяФайла = СтрЗаменить(ИзмененныйОбъектИмяФайла, "/", ".");
		ЧастиИмениОбъекта = СтрРазделить(ИзмененныйОбъектИмяФайла, ".");
		Если ЧастиИмениОбъекта.Количество() > 1 Тогда
			ЧастиИмениОбъекта[0] = СловарьКлассаОбъекта.Получить(ЧастиИмениОбъекта[0]);
			ИзмененныйОбъект = СтрСоединить(ЧастиИмениОбъекта, ".");
		Иначе
			ИзмененныйОбъект = ИзмененныйОбъектИмяФайла;
		КонецЕсли;
		
		//ИмяФайлаГитРодительПредопределенные =
		//	ИмяФайлаПредопределенных = 
		//	ЧастиИмениФайлаОбъекта.Путь +
		//	ЧастиИмениФайлаОбъекта.ИмяБезРасширения + ПолучитьРазделительПути() +
		//	"Ext" + ПолучитьРазделительПути() + "Predefined.xml";

		ИмяФайлаПредопределенныеБылоXML = "";
		ИмяФайлаПредопределенныеСталоXML = "";
		Если ЭтоДобавлениеОбъекта Тогда
			ИмяФайлаПредопределенныеСталоXML = ИмяФайлаТекущий;
		ИначеЕсли ЭтоУдалениеОбъекта Тогда
			ИмяФайлаПредопределенныеБылоXML = ИмяФайлаРодитель;
		Иначе
			ИмяФайлаПредопределенныеБылоXML = ИмяФайлаРодитель;
			ИмяФайлаПредопределенныеСталоXML = ИмяФайлаТекущий;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяФайлаПредопределенныеБылоXML) Тогда
			ДанныеФайлаПредопределенныеРодитель = РаботаСGIT.ПолучитьДанныеФайла(ИдентификаторПроектаГит,
				КодироватьСтроку(ИмяФайлаГитРодитель, СпособКодированияСтроки.КодировкаURL), ХешКоммитаРодителя);
			Если ДанныеФайлаПредопределенныеРодитель.КодСостояния >= 300 Тогда
				Сообщить(ДанныеФайлаПредопределенныеРодитель.ТелоОтвета);
				Возврат Неопределено;
			КонецЕсли;
			СодержимоеРодитель = Base64Значение(ДанныеФайлаПредопределенныеРодитель.Результат.content);
			СодержимоеРодитель.Записать(ИмяФайлаПредопределенныеБылоXML);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяФайлаПредопределенныеСталоXML) Тогда
			ДанныеФайлаПредопределенныеТекущий = РаботаСGIT.ПолучитьДанныеФайла(ИдентификаторПроектаГит,
				КодироватьСтроку(ИмяФайлаГитТекущий, СпособКодированияСтроки.КодировкаURL), ХешКоммитаТекущего);
			Если ДанныеФайлаПредопределенныеТекущий.КодСостояния >= 300 Тогда
				Сообщить(ДанныеФайлаПредопределенныеТекущий.ТелоОтвета);
				Возврат Неопределено;
			КонецЕсли;
			СодержимоеТекущий = Base64Значение(ДанныеФайлаПредопределенныеТекущий.Результат.content);
			СодержимоеТекущий.Записать(ИмяФайлаПредопределенныеСталоXML);
		КонецЕсли;
		
		ПредопределенныеА = ПредопределенныеДанныеИзФайла(ИмяФайлаПредопределенныеБылоXML);
		ПредопределенныеБ = ПредопределенныеДанныеИзФайла(ИмяФайлаПредопределенныеСталоXML);
		Если ПредопределенныеА <> ПредопределенныеБ Тогда
			ИзмененияОбъекта = ИзмененияОбъектов.Получить(ИзмененныйОбъект);
			Если ИзмененияОбъекта = Неопределено Тогда
				ИзмененияОбъектов.Вставить(ИзмененныйОбъект, Новый Структура()); 
				ИзмененияОбъекта = ИзмененияОбъектов.Получить(ИзмененныйОбъект);
			КонецЕсли;
			ИзмененияОбъекта.Вставить("Предопределенные", СтрШаблон("%1 -> %2", ПредопределенныеА, ПредопределенныеБ));	
		КонецЕсли;
	КонецЦикла;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаРодитель);
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаТекущий);
	
	Возврат ИзмененияОбъектов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоВыгрузкаКонфигурации(Знач КаталогВыгрузки)
	
	ПутьФайлОписанияКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузки) + "Configuration.xml";
	ФайлОписанияКонфигурации = Новый Файл(ПутьФайлОписанияКонфигурации);
	
	Возврат ФайлОписанияКонфигурации.Существует() И Не ФайлОписанияКонфигурации.ЭтоКаталог();
	
КонецФункции

Процедура ЗагрузитьОписаниеОбъектовМетаданных(Конфигурация, КаталогВыгрузкиКонфигурации)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузкиКонфигурации) + "ConfigDumpInfo.xml");
	Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	ОписаниеОбъектовПодготовка = Новый ТаблицаЗначений;
	ОписаниеОбъектовПодготовка.Колонки.Добавить("УИД", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ОписаниеОбъектовПодготовка.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ОписаниеОбъектовПодготовка.Колонки.Добавить("ПолноеИмя", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ОписаниеОбъектовПодготовка.Колонки.Добавить("КлассОбъектаВЕдЧисле", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ОписаниеОбъектовПодготовка.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ОписаниеОбъектовПодготовка.Колонки.Добавить("Владелец", Новый ОписаниеТипов("СправочникСсылка.Конфигурации"));
	ОписаниеОбъектовПодготовка.Колонки.Добавить("ЭтоПодсистема", Новый ОписаниеТипов("Булево"));

	СловарьИменМетаданныхXML = СловарьИменМетаданныхXML();
	Попытка
		ОписаниеОбъектовМетаданных = Данные.ConfigVersions.Metadata;
	Исключение
		ВызватьИсключение СтрШаблон("Не онаружено описание медатанных в файле %1",
			 ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузкиКонфигурации) + "ConfigDumpInfo.xml");
	КонецПопытки;
	
	Для Каждого ОписаниеОбъектаМетаданных Из ОписаниеОбъектовМетаданных Цикл
		ПолноеИмя = ОписаниеОбъектаМетаданных.name;
		ЧастиПолногоИмени = СтрРазделить(ПолноеИмя, ".");
		
		Если ЧастиПолногоИмени[0] = "Configuration" Тогда
			// это корень конфигурации
		ИначеЕсли ЧастиПолногоИмени.Количество() < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		// Загрузка подсистем выполняется одновременно с объектами,
		// т.к. в файлах подсистем нет однозначного сопоставления по имени - нет данных о полном "пути" объекта.
		// Например, имя подсистемы Администрирование, а полное имя может быть "Подсистемы.Администрирование.Администрирование.
		ЭтоПодсистема = ЧастиПолногоИмени[0] = "Subsystem" И ЧастиПолногоИмени.Количество() = 2
			Или ЧастиПолногоИмени[0] = "Subsystem" И ЧастиПолногоИмени[ЧастиПолногоИмени.ВГраница()-1] = "Subsystem";
		
		// Загружаем только метаданные верхнего уровня. Подсистемы имеют иерархию, поэтому нужна доп.проверка.
		Если Не ЧастиПолногоИмени.Количество() = 2 И Не ЭтоПодсистема Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОбъекта = ОписаниеОбъектовПодготовка.Добавить();
		СтрокаОбъекта.УИД = ОписаниеОбъектаМетаданных.id;
		СтрокаОбъекта.ПолноеИмя = ПолноеИмя;
		СтрокаОбъекта.КлассОбъектаВЕдЧисле = СловарьИменМетаданныхXML.Получить(ЧастиПолногоИмени[0]);
		СтрокаОбъекта.Наименование = СтрокаОбъекта.КлассОбъектаВЕдЧисле + "." + СтрЗаменить(ПолноеИмя, ЧастиПолногоИмени[0] + ".", "");
		СтрокаОбъекта.Имя = ЧастиПолногоИмени[ЧастиПолногоИмени.ВГраница()];
		СтрокаОбъекта.Владелец = Конфигурация;
		СтрокаОбъекта.ЭтоПодсистема = ЭтоПодсистема;
		Если ЧастиПолногоИмени[0] = "Configuration" Тогда
			//СтрокаОбъекта.ПолноеИмя = ЧастиПолногоИмени[1];
			СтрокаОбъекта.Наименование = ЧастиПолногоИмени[1];
		КонецЕсли;
	КонецЦикла;
	
	// Поиск элементов справочника
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗагруженныеОбъекты", ОписаниеОбъектовПодготовка);
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗагруженныеОбъекты.УИД КАК УИД,
		|	ЗагруженныеОбъекты.Наименование КАК Наименование,
		|	ЗагруженныеОбъекты.ПолноеИмя КАК ПолноеИмя,
		|	ЗагруженныеОбъекты.КлассОбъектаВЕдЧисле КАК КлассОбъектаВЕдЧисле,
		|	ЗагруженныеОбъекты.Имя КАК Имя,
		|	ЗагруженныеОбъекты.Владелец КАК Конфигурация,
		|	ЗагруженныеОбъекты.ЭтоПодсистема КАК ЭтоПодсистема
		|ПОМЕСТИТЬ ЗагруженныеОписанияМетаданных
		|ИЗ
		|	&ЗагруженныеОбъекты КАК ЗагруженныеОбъекты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗагруженныеОписанияМетаданных.УИД КАК УИД,
		|	ЗагруженныеОписанияМетаданных.Наименование КАК Наименование,
		|	ЗагруженныеОписанияМетаданных.ПолноеИмя КАК ПолноеИмя,
		|	ЗагруженныеОписанияМетаданных.КлассОбъектаВЕдЧисле КАК КлассОбъектаВЕдЧисле,
		|	ЗагруженныеОписанияМетаданных.Имя КАК Имя,
		|	ОбъектыМетаданных.Ссылка КАК СсылкаОбъектаМетаданных,
		|	НЕ ЗагруженныеОписанияМетаданных.Наименование = ОбъектыМетаданных.Наименование КАК ЕстьИзменения,
		|	ЗагруженныеОписанияМетаданных.Конфигурация КАК Конфигурация,
		|	ЗагруженныеОписанияМетаданных.ЭтоПодсистема КАК ЭтоПодсистема
		|ПОМЕСТИТЬ СуществующиеОбъекты
		|ИЗ
		|	ЗагруженныеОписанияМетаданных КАК ЗагруженныеОписанияМетаданных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|		ПО ЗагруженныеОписанияМетаданных.УИД = ОбъектыМетаданных.УИД
		|			И ЗагруженныеОписанияМетаданных.Конфигурация = ОбъектыМетаданных.Владелец
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗагруженныеОписанияМетаданных.УИД,
		|	ЗагруженныеОписанияМетаданных.Наименование,
		|	ЗагруженныеОписанияМетаданных.ПолноеИмя,
		|	ЗагруженныеОписанияМетаданных.КлассОбъектаВЕдЧисле,
		|	ЗагруженныеОписанияМетаданных.Имя,
		|	ОбъектыМетаданных.Ссылка,
		|	НЕ ЗагруженныеОписанияМетаданных.УИД = ОбъектыМетаданных.УИД,
		|	ЗагруженныеОписанияМетаданных.Конфигурация,
		|	ЗагруженныеОписанияМетаданных.ЭтоПодсистема
		|ИЗ
		|	ЗагруженныеОписанияМетаданных КАК ЗагруженныеОписанияМетаданных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|		ПО ЗагруженныеОписанияМетаданных.ПолноеИмя = ОбъектыМетаданных.ПолноеИмя
		|			И ЗагруженныеОписанияМетаданных.Конфигурация = ОбъектыМетаданных.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗагруженныеОписанияМетаданных.УИД КАК УИД,
		|	ЗагруженныеОписанияМетаданных.Наименование КАК Наименование,
		|	ЗагруженныеОписанияМетаданных.ПолноеИмя КАК ПолноеИмя,
		|	ЗагруженныеОписанияМетаданных.КлассОбъектаВЕдЧисле КАК КлассОбъектаВЕдЧисле,
		|	ЗагруженныеОписанияМетаданных.Имя КАК Имя,
		|	ЗНАЧЕНИЕ(Справочник.ОбъектыМетаданных.ПустаяСсылка) КАК СсылкаОбъектаМетаданных,
		|	""Добавлены"" КАК ВидИзменений,
		|	ЗагруженныеОписанияМетаданных.Конфигурация КАК Владелец,
		|	ЗагруженныеОписанияМетаданных.ЭтоПодсистема КАК ЭтоПодсистема
		|ПОМЕСТИТЬ ИзмененияПоОбъектамМетаданных
		|ИЗ
		|	ЗагруженныеОписанияМетаданных КАК ЗагруженныеОписанияМетаданных
		|		ЛЕВОЕ СОЕДИНЕНИЕ СуществующиеОбъекты КАК СуществующиеОбъекты
		|		ПО ЗагруженныеОписанияМетаданных.УИД = СуществующиеОбъекты.УИД
		|ГДЕ
		|	СуществующиеОбъекты.СсылкаОбъектаМетаданных ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СуществующиеОбъекты.УИД,
		|	СуществующиеОбъекты.Наименование,
		|	СуществующиеОбъекты.ПолноеИмя,
		|	СуществующиеОбъекты.КлассОбъектаВЕдЧисле,
		|	СуществующиеОбъекты.Имя,
		|	СуществующиеОбъекты.СсылкаОбъектаМетаданных,
		|	""Изменены"",
		|	СуществующиеОбъекты.Конфигурация,
		|	СуществующиеОбъекты.ЭтоПодсистема
		|ИЗ
		|	СуществующиеОбъекты КАК СуществующиеОбъекты
		|ГДЕ
		|	СуществующиеОбъекты.ЕстьИзменения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	ОбъектыМетаданных.Ссылка,
		|	""Удалены"",
		|	ОбъектыМетаданных.Владелец,
		|	ОбъектыМетаданных.ПолноеИмя ПОДОБНО ""Subsystem%""
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|		ЛЕВОЕ СОЕДИНЕНИЕ СуществующиеОбъекты КАК СуществующиеОбъекты
		|		ПО (СуществующиеОбъекты.СсылкаОбъектаМетаданных = ОбъектыМетаданных.Ссылка)
		|			И ОбъектыМетаданных.Владелец = СуществующиеОбъекты.Конфигурация
		|ГДЕ
		|	СуществующиеОбъекты.УИД ЕСТЬ NULL
		|	И ОбъектыМетаданных.Владелец = &Конфигурация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИзмененияПоОбъектамМетаданных.УИД КАК УИД,
		|	ИзмененияПоОбъектамМетаданных.Наименование КАК Наименование,
		|	ИзмененияПоОбъектамМетаданных.ПолноеИмя КАК ПолноеИмя,
		|	ИзмененияПоОбъектамМетаданных.КлассОбъектаВЕдЧисле КАК КлассОбъектаВЕдЧисле,
		|	ИзмененияПоОбъектамМетаданных.Имя КАК Имя,
		|	ИзмененияПоОбъектамМетаданных.СсылкаОбъектаМетаданных КАК СсылкаОбъектаМетаданных,
		|	ИзмененияПоОбъектамМетаданных.ВидИзменений КАК ВидИзменений,
		|	ИзмененияПоОбъектамМетаданных.Владелец КАК Владелец,
		|	ИзмененияПоОбъектамМетаданных.ЭтоПодсистема КАК ЭтоПодсистема,
		|	ВЫБОР
		|		КОГДА ИзмененияПоОбъектамМетаданных.ЭтоПодсистема
		|			ТОГДА ЕСТЬNULL(ЕСТЬNULL(Подсистемы.Ссылка, ПодсистемыПоНаименованию.Ссылка), ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка))
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка)
		|	КОНЕЦ КАК ПодсистемаСсылка,
		|	ТипыОбъектов.Ссылка КАК ТипОбъекта
		|ИЗ
		|	ИзмененияПоОбъектамМетаданных КАК ИзмененияПоОбъектамМетаданных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подсистемы КАК Подсистемы
		|		ПО ИзмененияПоОбъектамМетаданных.Владелец = Подсистемы.Владелец
		|			И ИзмененияПоОбъектамМетаданных.УИД = Подсистемы.УИД
		|			И (ИзмененияПоОбъектамМетаданных.ЭтоПодсистема)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подсистемы КАК ПодсистемыПоНаименованию
		|		ПО ИзмененияПоОбъектамМетаданных.Владелец = ПодсистемыПоНаименованию.Владелец
		|			И ИзмененияПоОбъектамМетаданных.ПолноеИмя = ПодсистемыПоНаименованию.ПолноеИмя
		|			И (ИзмененияПоОбъектамМетаданных.ЭтоПодсистема)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыОбъектов КАК ТипыОбъектов
		|		ПО ИзмененияПоОбъектамМетаданных.КлассОбъектаВЕдЧисле = ТипыОбъектов.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидИзменений = "Добавлены" Тогда
			ОбъектМетаданных = Справочники.ОбъектыМетаданных.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ОбъектМетаданных, Выборка);
			ОбъектМетаданных.Записать();
		ИначеЕсли Выборка.ВидИзменений = "Изменены" Тогда
			ОбъектМетаданных = Выборка.СсылкаОбъектаМетаданных.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ОбъектМетаданных, Выборка,,"Владелец");
			ОбъектМетаданных.Записать();
		ИначеЕсли Выборка.ВидИзменений = "Удалены" Тогда
			ОбъектМетаданных = Выборка.СсылкаОбъектаМетаданных.ПолучитьОбъект();
			ОбъектМетаданных.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		
		Если Выборка.ЭтоПодсистема Тогда
			Если Выборка.ВидИзменений = "Добавлены" Тогда
				ОбъектМетаданных = Справочники.Подсистемы.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(ОбъектМетаданных, Выборка,, "Наименование");
				ОбъектМетаданных.Наименование = Сред(Выборка.Наименование, СтрНайти(Выборка.Наименование, ".") + 1);
				ОбъектМетаданных.Записать();
			ИначеЕсли Выборка.ВидИзменений = "Изменены" Тогда
				Если ЗначениеЗаполнено(Выборка.ПодсистемаСсылка) Тогда
					ОбъектМетаданных = Выборка.ПодсистемаСсылка.ПолучитьОбъект();
					ЗаполнитьЗначенияСвойств(ОбъектМетаданных, Выборка,,"Владелец, Наименование");
				Иначе
					ОбъектМетаданных = Справочники.Подсистемы.СоздатьЭлемент();
					ЗаполнитьЗначенияСвойств(ОбъектМетаданных, Выборка,,"Наименование");
				КонецЕсли;
				ОбъектМетаданных.Наименование = Сред(Выборка.Наименование, СтрНайти(Выборка.Наименование, ".") + 1);
				ОбъектМетаданных.Записать();
			ИначеЕсли Выборка.ВидИзменений = "Удалены" Тогда
				Если ЗначениеЗаполнено(Выборка.ПодсистемаСсылка) Тогда
					ОбъектМетаданных = Выборка.ПодсистемаСсылка.ПолучитьОбъект();
					ОбъектМетаданных.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьПредопределенныеЭлементыОбъектовМетаданных(Конфигурация, КаталогРепозиторияХранилища)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Владелец", Новый ОписаниеТипов("СправочникСсылка.ОбъектыМетаданных"));
	Таблица.Колонки.Добавить("УИД", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	Таблица.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Таблица.Колонки.Добавить("Синоним", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	Таблица.Колонки.Добавить("КодЭлемента", ОбщегоНазначения.ОписаниеТипаСтрока(25));
	Таблица.Колонки.Добавить("ЯвляетсяГруппой", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("РодительУИД", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбъектыМетаданных.Ссылка КАК Ссылка,
		|	ОбъектыМетаданных.Имя КАК Имя,
		|	ОбъектыМетаданных.ТипОбъекта.Наименование КАК Класс
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|ГДЕ
		|	ОбъектыМетаданных.Владелец = &Конфигурация
		|	И ОбъектыМетаданных.ТипОбъекта.ИмеетПредопределенныеЭлементы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Класс
		|ИТОГИ ПО
		|	Класс";
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	ВыборкаКлассы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Словарь = СловарьИменаКаталоговМетаданныхXML();
	Пока ВыборкаКлассы.Следующий() Цикл
		Если Словарь[ВыборкаКлассы.Класс] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаОбъекты = ВыборкаКлассы.Выбрать();
		Пока ВыборкаОбъекты.Следующий() Цикл
			ИмяФайлаПредопределнныхЭлементов = СтрШаблон("%1\%2\%3\Ext\Predefined.xml", 
				КаталогРепозиторияХранилища, 
				Словарь[ВыборкаОбъекты.Класс], 
				ВыборкаОбъекты.Имя);
				
			Файл = Новый Файл(ИмяФайлаПредопределнныхЭлементов);
			Если Не Файл.Существует() Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеXDTO = ДесериализоватьXML(ИмяФайлаПредопределнныхЭлементов);
			ПрочитатьПредопределенныеЭлементы(Таблица, КоллекцияXDTO(ДанныеXDTO.Item), ВыборкаОбъекты.Ссылка, "");
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписатьПредопределенныеЭлементы(Конфигурация, Таблица);
	
КонецПроцедуры

Процедура ЗагрузитьОписаниеРолей(Конфигурация, КаталогРепозиторияХранилища)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ОбъектМетаданных", Новый ОписаниеТипов("СправочникСсылка.ОбъектыМетаданных"));
	Таблица.Колонки.Добавить("ПолноеИмя", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	Таблица.Колонки.Добавить("Право", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Таблица.Колонки.Добавить("Роль", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	ФайлыРолей = НайтиФайлы(КаталогРепозиторияХранилища + "\Roles", "Rights.xml", Истина);
	Для Каждого ФайлРоли Из ФайлыРолей Цикл
		
		Части = СтрРазделить(ФайлРоли.Путь, "\/", Ложь);
		ИмяРоли = Части[Части.ВГраница() - 1];
		Таблица.Очистить();
		
		ДанныеXDTO = ДесериализоватьXML(ФайлРоли.ПолноеИмя);
		Если ДанныеXDTO.setForNewObjects = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОбъектДоступа Из КоллекцияXDTO(ДанныеXDTO.object) Цикл
			Если СтрЧислоВхождений(ОбъектДоступа.name, ".") > 1 Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого Право Из КоллекцияXDTO(ОбъектДоступа.right) Цикл
				Если Право.value <> Истина Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаблицы = Таблица.Добавить();
				СтрокаТаблицы.Роль = ИмяРоли;
				СтрокаТаблицы.Право = Право.name;
				СтрокаТаблицы.ПолноеИмя = ОбъектДоступа.name;
			КонецЦикла;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Таблица.Роль КАК Роль,
			|	Таблица.Право КАК Право,
			|	Таблица.ПолноеИмя КАК ПолноеИмя
			|ПОМЕСТИТЬ Таблица
			|ИЗ
			|	&Таблица КАК Таблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ 
			|	Таблица.Роль КАК Роль,
			|	Таблица.Право КАК Право,
			|	ОбъектыМетаданных.Ссылка КАК ОбъектМетаданных
			|ИЗ
			|	Таблица КАК Таблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
			|		ПО Таблица.ПолноеИмя = ОбъектыМетаданных.ПолноеИмя
			|			И (ОбъектыМетаданных.Владелец = &Конфигурация)";
		Запрос.УстановитьПараметр("Таблица", Таблица);
		Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
		Набор = РегистрыСведений.ОбъектыМетаданныхПрава.СоздатьНаборЗаписей();
		Набор.Отбор.Роль.Установить(ИмяРоли);
		Набор.Загрузить(Запрос.Выполнить().Выгрузить());
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьПредопределенныеЭлементы(Таблица, ЭлементыXDTO, Владелец, РодительУИД = "")
	
	Для Каждого ЭлементыXDTO Из ЭлементыXDTO Цикл
		Строка = Таблица.Добавить();
		Строка.РодительУИД = РодительУИД;
		Строка.Владелец = Владелец;
		Строка.УИД = ЭлементыXDTO.id;
		Строка.Наименование = ЭлементыXDTO.Name;
		Если Строка(ЭлементыXDTO.Description) <> "ОбъектXDTO" Тогда
			Строка.Синоним = ЭлементыXDTO.Description;
		КонецЕсли;
		Если Строка(ЭлементыXDTO.Code) <> "ОбъектXDTO" Тогда
			Строка.КодЭлемента = ЭлементыXDTO.Code;
		КонецЕсли;
		Если ЭлементыXDTO.Свойства().Получить("IsFolder") <> Неопределено Тогда
			Строка.ЯвляетсяГруппой = ЭлементыXDTO.IsFolder;
		КонецЕсли;
		Если ЭлементыXDTO.Свойства().Получить("ChildItems") <> Неопределено Тогда
			ПрочитатьПредопределенныеЭлементы(Таблица, КоллекцияXDTO(ЭлементыXDTO.ChildItems.Item), Владелец, Строка.УИД);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьПредопределенныеЭлементы(Конфигурация, Таблица)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	Запрос.УстановитьПараметр("ТЗ", Таблица);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЗ.Владелец КАК Владелец,
		|	ТЗ.УИД КАК УИД,
		|	ТЗ.КодЭлемента КАК КодЭлемента,
		|	ТЗ.Наименование КАК Наименование,
		|	ТЗ.Синоним КАК Синоним,
		|	ТЗ.ЯвляетсяГруппой КАК ЯвляетсяГруппой,
		|	ТЗ.РодительУИД КАК РодительУИД
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Спр.Ссылка КАК Ссылка,
		|	Спр.Владелец КАК Владелец,
		|	Спр.Наименование КАК Наименование,
		|	Спр.Синоним КАК Синоним,
		|	Спр.КодЭлемента КАК КодЭлемента,
		|	Спр.ЯвляетсяГруппой КАК ЯвляетсяГруппой,
		|	Спр.УИД КАК УИД,
		|	ЕСТЬNULL(Спр.Группа.УИД, """") КАК РодительУИД
		|ПОМЕСТИТЬ Спр
		|ИЗ
		|	Справочник.ПредопределенныеЭлементыОбъектовМетаданных КАК Спр
		|ГДЕ
		|	Спр.Владелец.Владелец = &Конфигурация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Спр.Ссылка КАК Ссылка,
		|	ТЗ.Владелец КАК Владелец,
		|	ТЗ.УИД КАК УИД,
		|	ТЗ.КодЭлемента КАК КодЭлемента,
		|	ТЗ.Наименование КАК Наименование,
		|	ТЗ.Синоним КАК Синоним,
		|	ТЗ.ЯвляетсяГруппой КАК ЯвляетсяГруппой,
		|	ЕСТЬNULL(Родитель.Ссылка, ЗНАЧЕНИЕ(Справочник.ПредопределенныеЭлементыОбъектовМетаданных.ПустаяСсылка)) КАК Группа
		|ИЗ
		|	ТЗ КАК ТЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Спр КАК Спр
		|		ПО ТЗ.УИД = Спр.УИД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Спр КАК Родитель
		|		ПО ТЗ.РодительУИД = Родитель.УИД
		|			И (ТЗ.РодительУИД <> """")
		|ГДЕ
		|	(Спр.Ссылка ЕСТЬ NULL
		|			ИЛИ ТЗ.КодЭлемента <> Спр.КодЭлемента
		|			ИЛИ ТЗ.Наименование <> Спр.Наименование
		|			ИЛИ ТЗ.Синоним <> Спр.Синоним
		|			ИЛИ ТЗ.ЯвляетсяГруппой <> Спр.ЯвляетсяГруппой
		|			ИЛИ ТЗ.РодительУИД <> Спр.РодительУИД)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Владелец,
		|	КодЭлемента";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			Объект = Справочники.ПредопределенныеЭлементыОбъектовМетаданных.СоздатьЭлемент();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Объект, Выборка, , "Ссылка");
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьОписаниеПодсистемКонфигурации(Конфигурация, КаталогРепозиторияХранилища)
	
	// Для подсистем загружаем родителя и состав по УИД.
	// Первичная загрузка подсистем производится при загрузке метаданных, чтобы учитывалось полное имя в иерархии.
	// Сопоставление состава по полному имени.
	
	ОписанияПодсистем = Новый ТаблицаЗначений;
	ОписанияПодсистем.Колонки.Добавить("УИД", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ОписанияПодсистем.Колонки.Добавить("РодительУИД", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ОписанияПодсистем.Колонки.Добавить("Владелец", Новый ОписаниеТипов("СправочникСсылка.Конфигурации"));
	
	ОписанияСоставаОбъектовПодсистем = Новый ТаблицаЗначений;
	ОписанияСоставаОбъектовПодсистем.Колонки.Добавить("УИДПодсистемы", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ОписанияСоставаОбъектовПодсистем.Колонки.Добавить("Владелец", Новый ОписаниеТипов("СправочникСсылка.Конфигурации"));
	ОписанияСоставаОбъектовПодсистем.Колонки.Добавить("ПолноеИмяОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	ПрочитатьПодсистемыXMLРекурсивно(КаталогРепозиторияХранилища, ОписанияПодсистем, ОписанияСоставаОбъектовПодсистем);
	
	ОписанияПодсистем.ЗаполнитьЗначения(Конфигурация, "Владелец");
	ОписанияСоставаОбъектовПодсистем.ЗаполнитьЗначения(Конфигурация, "Владелец");
	
	// Перечитываем подсистемы
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОписаниеПодсистем", ОписанияПодсистем);
	Запрос.УстановитьПараметр("СоставПодсистем", ОписанияСоставаОбъектовПодсистем);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОписаниеПодсистем.УИД КАК УИД,
		|	ОписаниеПодсистем.РодительУИД КАК РодительУИД,
		|	ОписаниеПодсистем.Владелец КАК Владелец
		|ПОМЕСТИТЬ ОписаниеПодсистем
		|ИЗ
		|	&ОписаниеПодсистем КАК ОписаниеПодсистем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Подсистемы.Ссылка КАК Подсистема,
		|	ЕСТЬNULL(ПодсистемыРодители.Ссылка, ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка)) КАК ПодсистемаРодитель,
		|	Подсистемы.Родитель КАК ТекущийРодитель,
		|	ОписаниеПодсистем.УИД КАК УИД,
		|	ОписаниеПодсистем.Владелец КАК Владелец
		|ПОМЕСТИТЬ ИзменениеИерархии
		|ИЗ
		|	ОписаниеПодсистем КАК ОписаниеПодсистем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Подсистемы КАК Подсистемы
		|		ПО ОписаниеПодсистем.УИД = Подсистемы.УИД
		|			И ОписаниеПодсистем.Владелец = Подсистемы.Владелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подсистемы КАК ПодсистемыРодители
		|		ПО ОписаниеПодсистем.РодительУИД = ПодсистемыРодители.УИД
		|			И ОписаниеПодсистем.Владелец = ПодсистемыРодители.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставПодсистем.УИДПодсистемы КАК УИДПодсистемы,
		|	СоставПодсистем.ПолноеИмяОбъекта КАК ПолноеИмяОбъекта,
		|	СоставПодсистем.Владелец КАК Владелец
		|ПОМЕСТИТЬ СоставПодсистем
		|ИЗ
		|	&СоставПодсистем КАК СоставПодсистем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоискСоставаПодсистем.ОбъектМетаданных КАК ОбъектМетаданных,
		|	ПоискСоставаПодсистем.Подсистема КАК Подсистема
		|ПОМЕСТИТЬ ПоискСоставаПодсистем
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОбъектыМетаданных.Ссылка КАК ОбъектМетаданных,
		|		Подсистемы.Ссылка КАК Подсистема
		|	ИЗ
		|		СоставПодсистем КАК СоставПодсистем
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|			ПО СоставПодсистем.ПолноеИмяОбъекта = ОбъектыМетаданных.ПолноеИмя
		|				И СоставПодсистем.Владелец = ОбъектыМетаданных.Владелец
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Подсистемы КАК Подсистемы
		|			ПО СоставПодсистем.УИДПодсистемы = Подсистемы.УИД
		|				И СоставПодсистем.Владелец = Подсистемы.Владелец
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОбъектыМетаданных.Ссылка,
		|		ИзменениеИерархии.Подсистема
		|	ИЗ
		|		ИзменениеИерархии КАК ИзменениеИерархии
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|			ПО ИзменениеИерархии.УИД = ОбъектыМетаданных.УИД
		|				И ИзменениеИерархии.Владелец = ОбъектыМетаданных.Владелец) КАК ПоискСоставаПодсистем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УточнениеСостава.Подсистема КАК Подсистема
		|ПОМЕСТИТЬ ПодсистемыСИзменениемСостава
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоискСоставаПодсистем.ОбъектМетаданных КАК ОбъектМетаданных,
		|		ПоискСоставаПодсистем.Подсистема КАК Подсистема,
		|		1 КАК ИндикаторСостава
		|	ИЗ
		|		ПоискСоставаПодсистем КАК ПоискСоставаПодсистем
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СоставПодсистем.ОбъектМетаданных,
		|		СоставПодсистем.Подсистема,
		|		-1
		|	ИЗ
		|		РегистрСведений.СоставПодсистем КАК СоставПодсистем
		|	ГДЕ
		|		СоставПодсистем.Подсистема В
		|				(ВЫБРАТЬ
		|					ПоискСоставаПодсистем.Подсистема КАК Подсистема
		|				ИЗ
		|					ПоискСоставаПодсистем)) КАК УточнениеСостава
		|
		|СГРУППИРОВАТЬ ПО
		|	УточнениеСостава.ОбъектМетаданных,
		|	УточнениеСостава.Подсистема
		|
		|ИМЕЮЩИЕ
		|	НЕ СУММА(УточнениеСостава.ИндикаторСостава) = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоискСоставаПодсистем.ОбъектМетаданных КАК ОбъектМетаданных,
		|	ПоискСоставаПодсистем.Подсистема КАК Подсистема
		|ИЗ
		|	ПоискСоставаПодсистем КАК ПоискСоставаПодсистем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодсистемыСИзменениемСостава КАК ПодсистемыСИзменениемСостава
		|		ПО ПоискСоставаПодсистем.Подсистема = ПодсистемыСИзменениемСостава.Подсистема
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИзменениеИерархии.Подсистема КАК Подсистема,
		|	ИзменениеИерархии.ПодсистемаРодитель КАК ПодсистемаРодитель,
		|	""ИзменениеИерархии"" КАК ВидИзменения
		|ИЗ
		|	ИзменениеИерархии КАК ИзменениеИерархии
		|ГДЕ
		|	НЕ ИзменениеИерархии.ТекущийРодитель = ИзменениеИерархии.ПодсистемаРодитель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодсистемыСИзменениемСостава.Подсистема,
		|	ПодсистемыСИзменениемСостава.Подсистема.Родитель,
		|	""ИзменениеСостава""
		|ИЗ
		|	ПодсистемыСИзменениемСостава КАК ПодсистемыСИзменениемСостава";
	
	Результаты = Запрос.ВыполнитьПакет();
	ИндексИзменения = 6;
	ИндексСостав = 5;
	
	Выборка = Результаты[ИндексИзменения].Выбрать();
	СоставПодсистем = Результаты[ИндексСостав].Выгрузить();
	СоставПодсистем.Индексы.Добавить("Подсистема");
	ОтборПодсистемы = Новый Структура("Подсистема");
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидИзменения = "ИзменениеИерархии" Тогда
			ПодсистемаОбъект = Выборка.Подсистема.ПолучитьОбъект();
			ПодсистемаОбъект.Родитель = Выборка.ПодсистемаРодитель;
			ПодсистемаОбъект.Записать();
		КонецЕсли;
		
		Если Выборка.ВидИзменения = "ИзменениеСостава" Тогда
			ОтборПодсистемы.Подсистема = Выборка.Подсистема;
			Набор = РегистрыСведений.СоставПодсистем.СоздатьНаборЗаписей();
			Набор.Отбор.Подсистема.Установить(Выборка.Подсистема);
			Набор.Загрузить(СоставПодсистем.Скопировать(СоставПодсистем.НайтиСтроки(ОтборПодсистемы)));
			Набор.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьПодсистемыXMLРекурсивно(КаталогВыгрузкиКонфигурации, ОписанияПодсистем, ОписанияСоставаОбъектовПодсистем, РодительУИД = "")
	
	ИмяКаталогаПодсистем = СловарьИменаКаталоговМетаданныхXML().Получить("Подсистема");//"Subsystems";
	КорневойКаталогПодсистем =
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузкиКонфигурации) + ИмяКаталогаПодсистем;
	
	ФайлыПодсистем = НайтиФайлы(КорневойКаталогПодсистем, "*.xml", Ложь);
	
	Для Каждого ФайлПодсистемы Из ФайлыПодсистем Цикл
		Данные = ДесериализоватьXML(ФайлПодсистемы.ПолноеИмя);
		
		ОписаниеПодсистемы = ОписанияПодсистем.Добавить();
		ОписаниеПодсистемы.УИД = Данные.Subsystem.uuid;
		ОписаниеПодсистемы.РодительУИД = РодительУИД;
		
		Если Не Данные.Subsystem.Properties.Content.Свойства().Количество() Тогда
			// Значит не добавили объектов в подсистему, нужно пропустить добавление.
		ИначеЕсли ТипЗнч(Данные.Subsystem.Properties.Content.Item) = Тип("Строка") Тогда
			ОписаниеСостава = ОписанияСоставаОбъектовПодсистем.Добавить();
			ОписаниеСостава.УИДПодсистемы = ОписаниеПодсистемы.УИД;
			ОписаниеСостава.ПолноеИмяОбъекта = Данные.Subsystem.Properties.Content.Item;
		ИначеЕсли ТипЗнч(Данные.Subsystem.Properties.Content.Item) = Тип("СписокXDTO") Тогда
			Для Каждого ИмяОбъекта Из Данные.Subsystem.Properties.Content.Item Цикл
				ОписаниеСостава = ОписанияСоставаОбъектовПодсистем.Добавить();
				ОписаниеСостава.УИДПодсистемы = ОписаниеПодсистемы.УИД;
				ОписаниеСостава.ПолноеИмяОбъекта = ИмяОбъекта;
			КонецЦикла;
		КонецЕсли;
		
		// Рекурсивное получение данных дочерних подсистем
		Если Данные.Subsystem.ChildObjects.Свойства().Количество() Тогда
			КаталогПодсистемы = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КорневойКаталогПодсистем) + Данные.Subsystem.Properties.Name;
			ПрочитатьПодсистемыXMLРекурсивно(КаталогПодсистемы, ОписанияПодсистем, ОписанияСоставаОбъектовПодсистем, ОписаниеПодсистемы.УИД)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДесериализоватьXML(ПутьКФайлуXML)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуXML);
	
	Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат Данные;
	
КонецФункции

Функция СловарьИменМетаданныхXML()
	
	// Порядок указывается в порядке следования метаданных в конфигурации.
	// Имя объекта в значении указывается, как имя типа на кириллице.
	
	СоответствиеИменМетаданных = Новый Соответствие;
	// Общие
	СоответствиеИменМетаданных.Вставить("Configuration", "Конфигурация");
	СоответствиеИменМетаданных.Вставить("Subsystem", "Подсистема");
	СоответствиеИменМетаданных.Вставить("CommonModule", "ОбщийМодуль");
	СоответствиеИменМетаданных.Вставить("SessionParameter", "ПараметрСеанса");
	СоответствиеИменМетаданных.Вставить("Role", "Роль");
	СоответствиеИменМетаданных.Вставить("CommonAttribute", "ОбщийРеквизит");
	СоответствиеИменМетаданных.Вставить("ExchangePlan", "ПланОбмена");
	СоответствиеИменМетаданных.Вставить("FilterCriterion", "КритерийОтбора");
	СоответствиеИменМетаданных.Вставить("EventSubscription", "ПодпискаНаСобытие");
	СоответствиеИменМетаданных.Вставить("ScheduledJob", "РегламентноеЗадание");
	СоответствиеИменМетаданных.Вставить("FunctionalOption", "ФункциональнаяОпция");
	СоответствиеИменМетаданных.Вставить("FunctionalOptionsParameter", "ПараметрФункциональнойОпции");
	СоответствиеИменМетаданных.Вставить("DefinedType", "ОпределяемыйТип");
	СоответствиеИменМетаданных.Вставить("SettingsStorage", "ХранилищеНастроек");
	СоответствиеИменМетаданных.Вставить("CommonCommand", "ОбщаяКоманда");
	СоответствиеИменМетаданных.Вставить("CommandGroup", "ГруппаКоманд");
	СоответствиеИменМетаданных.Вставить("CommonForm", "ОбщаяФорма");
	СоответствиеИменМетаданных.Вставить("CommonTemplate", "ОбщийМакет");
	СоответствиеИменМетаданных.Вставить("CommonPicture", "ОбщаяКартинка");
	СоответствиеИменМетаданных.Вставить("XDTOPackage", "ПакетXDTO");
	СоответствиеИменМетаданных.Вставить("WebService", "WebСервис");
	СоответствиеИменМетаданных.Вставить("HTTPService", "HTTPСервис");
	СоответствиеИменМетаданных.Вставить("StyleItem", "ЭлементСтиля");
	СоответствиеИменМетаданных.Вставить("Language", "Язык");
	СоответствиеИменМетаданных.Вставить("Interface", "Интерфейс");
	СоответствиеИменМетаданных.Вставить("WSReference", "WSСсылка");
	СоответствиеИменМетаданных.Вставить("Bot", "Бот");
	СоответствиеИменМетаданных.Вставить("Style", "Стиль");
	
	// Объекты
	СоответствиеИменМетаданных.Вставить("Constant", "Константа");
	СоответствиеИменМетаданных.Вставить("Catalog", "Справочник");
	СоответствиеИменМетаданных.Вставить("Document", "Документ");
	СоответствиеИменМетаданных.Вставить("DocumentNumerator", "НумераторДокументов");
	СоответствиеИменМетаданных.Вставить("Sequence", "Последовательность");
	СоответствиеИменМетаданных.Вставить("DocumentJournal", "ЖурналДокументов");
	СоответствиеИменМетаданных.Вставить("Enum", "Перечисление");
	СоответствиеИменМетаданных.Вставить("Report", "Отчет");
	СоответствиеИменМетаданных.Вставить("DataProcessor", "Обработка");
	СоответствиеИменМетаданных.Вставить("ChartOfCharacteristicTypes", "ПланВидовХарактеристик");
	СоответствиеИменМетаданных.Вставить("ChartOfAccounts", "ПланСчетов");
	СоответствиеИменМетаданных.Вставить("ChartOfCalculationTypes", "ПланВидовРасчета");
	СоответствиеИменМетаданных.Вставить("InformationRegister", "РегистрСведений");
	СоответствиеИменМетаданных.Вставить("AccumulationRegister", "РегистрНакопления");
	СоответствиеИменМетаданных.Вставить("AccountingRegister", "РегистрБухгалтерии");
	СоответствиеИменМетаданных.Вставить("CalculationRegister", "РегистрРасчета");
	СоответствиеИменМетаданных.Вставить("BusinessProcess", "БизнесПроцесс");
	СоответствиеИменМетаданных.Вставить("Task", "Задача");
	СоответствиеИменМетаданных.Вставить("ExternalDataSource", "ВнешнийИсточникДанных");
		
	СловарьИменМетаданных = Новый Соответствие;
	
	// Добавляем обратные ключи-значения
	Для Каждого КлючИЗначение Из СоответствиеИменМетаданных Цикл
		СловарьИменМетаданных.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		СловарьИменМетаданных.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
		
	Возврат СловарьИменМетаданных;
	
КонецФункции

Функция СловарьИменаКаталоговМетаданныхXML()
	
	СоответствиеИменМетаданных = Новый Соответствие;
	
	СоответствиеИменМетаданных.Вставить("РегистрБухгалтерии", "AccountingRegisters");
	СоответствиеИменМетаданных.Вставить("AccountingRegister", "AccountingRegisters");
	
	СоответствиеИменМетаданных.Вставить("РегистрНакопления", "AccumulationRegisters");
	СоответствиеИменМетаданных.Вставить("AccumulationRegister", "AccumulationRegisters");
	
	СоответствиеИменМетаданных.Вставить("БизнесПроцесс", "BusinessProcesses");
	СоответствиеИменМетаданных.Вставить("BusinessProcess", "BusinessProcesses");
	
	СоответствиеИменМетаданных.Вставить("РегистрРасчета", "CalculationRegisters");
	СоответствиеИменМетаданных.Вставить("CalculationRegister", "CalculationRegisters");
	
	СоответствиеИменМетаданных.Вставить("Справочник", "Catalogs");
	СоответствиеИменМетаданных.Вставить("Catalog", "Catalogs");
	
	СоответствиеИменМетаданных.Вставить("ПланСчетов", "ChartsOfAccounts");
	СоответствиеИменМетаданных.Вставить("ChartOfAccounts", "ChartsOfAccounts");
	
	СоответствиеИменМетаданных.Вставить("ПланВидовРасчета", "ChartsOfCalculationTypes");
	СоответствиеИменМетаданных.Вставить("ChartOfCalculationTypes", "ChartsOfCalculationTypes");
	
	СоответствиеИменМетаданных.Вставить("ПланВидовХарактеристик", "ChartsOfCharacteristicTypes");
	СоответствиеИменМетаданных.Вставить("ChartOfCharacteristicTypes", "ChartsOfCharacteristicTypes");
	
	СоответствиеИменМетаданных.Вставить("ОбщаяГруппа", "CommandGroups");
	СоответствиеИменМетаданных.Вставить("CommandGroup", "CommandGroups");
	
	СоответствиеИменМетаданных.Вставить("ОбщийРеквизит", "CommonAttributes");
	СоответствиеИменМетаданных.Вставить("CommonAttribute", "CommonAttributes");
	
	СоответствиеИменМетаданных.Вставить("ОбщаяКоманда", "CommonCommands");
	СоответствиеИменМетаданных.Вставить("CommonCommand", "CommonCommands");
	
	СоответствиеИменМетаданных.Вставить("ОбщаяФорма", "CommonForms");
	СоответствиеИменМетаданных.Вставить("CommonForm", "CommonForms");
	
	СоответствиеИменМетаданных.Вставить("ОбщийМодуль", "CommonModules");
	СоответствиеИменМетаданных.Вставить("CommonModule", "CommonModules");
	
	СоответствиеИменМетаданных.Вставить("ОбщаяКартинка", "CommonPictures");
	СоответствиеИменМетаданных.Вставить("CommonPicture", "CommonPictures");
	
	СоответствиеИменМетаданных.Вставить("ОбщийМакет", "CommonTemplates");
	СоответствиеИменМетаданных.Вставить("CommonTemplate", "CommonTemplates");
	
	СоответствиеИменМетаданных.Вставить("Константа", "Constants");
	СоответствиеИменМетаданных.Вставить("Constant", "Constants");
	
	СоответствиеИменМетаданных.Вставить("Обработка", "DataProcessors");
	СоответствиеИменМетаданных.Вставить("DataProcessor", "DataProcessors");
	
	СоответствиеИменМетаданных.Вставить("ОпределяемыйТип", "DefinedTypes");
	СоответствиеИменМетаданных.Вставить("DefinedType", "DefinedTypes");
	
	СоответствиеИменМетаданных.Вставить("ЖурналДокумента", "DocumentJournals");
	СоответствиеИменМетаданных.Вставить("DocumentJournal", "DocumentJournals");
	
	СоответствиеИменМетаданных.Вставить("Нумератор", "DocumentNumerators");
	
	СоответствиеИменМетаданных.Вставить("Документ", "Documents");
	СоответствиеИменМетаданных.Вставить("Document", "Documents");
	
	СоответствиеИменМетаданных.Вставить("Перечисление", "Enums");
	СоответствиеИменМетаданных.Вставить("Enum", "Enums");
	
	СоответствиеИменМетаданных.Вставить("ПодпискаНаСобытие", "EventSubscriptions");
	СоответствиеИменМетаданных.Вставить("EventSubscription", "EventSubscriptions");
	
	СоответствиеИменМетаданных.Вставить("ПланОбмена", "ExchangePlans");
	СоответствиеИменМетаданных.Вставить("ExchangePlan", "ExchangePlans");
	
	СоответствиеИменМетаданных.Вставить("ВнешнийИсточник", "ExternalDataSources");
	СоответствиеИменМетаданных.Вставить("ExternalDataSource", "ExternalDataSources");
	
	СоответствиеИменМетаданных.Вставить("КритерийОтбора", "FilterCriteria");
	СоответствиеИменМетаданных.Вставить("FilterCriterion", "FilterCriteria");
	
	СоответствиеИменМетаданных.Вставить("ФункциональнаяОпция", "FunctionalOptions");
	СоответствиеИменМетаданных.Вставить("FunctionalOption", "FunctionalOptions");
	
	СоответствиеИменМетаданных.Вставить("ПарамертФункциональыхОпций", "FunctionalOptionsParameters");
	СоответствиеИменМетаданных.Вставить("FunctionalOptionsParameter", "FunctionalOptionsParameters");
	
	СоответствиеИменМетаданных.Вставить("HTTPСервис", "HTTPServices");
	СоответствиеИменМетаданных.Вставить("HTTPService", "HTTPServices");
	
	СоответствиеИменМетаданных.Вставить("РегистрСведений", "InformationRegisters");
	СоответствиеИменМетаданных.Вставить("InformationRegister", "InformationRegisters");
	
	СоответствиеИменМетаданных.Вставить("Язык", "Languages");
	
	СоответствиеИменМетаданных.Вставить("Отчет", "Reports");
	СоответствиеИменМетаданных.Вставить("Report", "Reports");
	
	СоответствиеИменМетаданных.Вставить("Роль", "Roles");
	СоответствиеИменМетаданных.Вставить("Role", "Roles");
	
	СоответствиеИменМетаданных.Вставить("РегламентноеЗадание", "ScheduledJobs");
	СоответствиеИменМетаданных.Вставить("ScheduledJob", "ScheduledJobs");
	
	СоответствиеИменМетаданных.Вставить("Последовательность", "Sequences");
	СоответствиеИменМетаданных.Вставить("Sequence", "Sequences");
	
	СоответствиеИменМетаданных.Вставить("ПараметрСеанса", "SessionParameters");
	СоответствиеИменМетаданных.Вставить("SessionParameter", "SessionParameters");
	
	СоответствиеИменМетаданных.Вставить("ХранилищеНастроек", "SettingsStorages");
	СоответствиеИменМетаданных.Вставить("SettingsStorage", "SettingsStorages");
	
	СоответствиеИменМетаданных.Вставить("ЭлементСтиля", "StyleItems");
	СоответствиеИменМетаданных.Вставить("StyleItem", "StyleItems");
	
	СоответствиеИменМетаданных.Вставить("Подсистема", "Subsystems");
	СоответствиеИменМетаданных.Вставить("Subsystem", "Subsystems");
	
	СоответствиеИменМетаданных.Вставить("Задача", "Tasks");
	СоответствиеИменМетаданных.Вставить("Task", "Tasks");
	
	СоответствиеИменМетаданных.Вставить("WebСервис", "WebServices");
	СоответствиеИменМетаданных.Вставить("WebService", "WebServices");
	
	СоответствиеИменМетаданных.Вставить("XDTOПакет", "XDTOPackages");
	СоответствиеИменМетаданных.Вставить("XDTOPackage", "XDTOPackages");
	
		
	СловарьИменМетаданных = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеИменМетаданных Цикл
		СловарьИменМетаданных.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
		
	Возврат СловарьИменМетаданных;
	
КонецФункции

Функция СловарьКлассОбъектаПоИмениФайлаМетаданныхXML()
	
	СоответствиеИменМетаданных = Новый Соответствие;
	
	СоответствиеИменМетаданных.Вставить("РегистрБухгалтерии", "AccountingRegisters");
	СоответствиеИменМетаданных.Вставить("РегистрНакопления", "AccumulationRegisters");
	СоответствиеИменМетаданных.Вставить("БизнесПроцесс", "BusinessProcesses");
	СоответствиеИменМетаданных.Вставить("РегистрРасчета", "CalculationRegisters");	
	СоответствиеИменМетаданных.Вставить("Справочник", "Catalogs");
	СоответствиеИменМетаданных.Вставить("ПланСчетов", "ChartsOfAccounts");
	СоответствиеИменМетаданных.Вставить("ПланВидовРасчета", "ChartsOfCalculationTypes");	
	СоответствиеИменМетаданных.Вставить("ПланВидовХарактеристик", "ChartsOfCharacteristicTypes");	
	СоответствиеИменМетаданных.Вставить("ОбщаяГруппа", "CommandGroups");	
	СоответствиеИменМетаданных.Вставить("ОбщийРеквизит", "CommonAttributes");	
	СоответствиеИменМетаданных.Вставить("ОбщаяКоманда", "CommonCommands");	
	СоответствиеИменМетаданных.Вставить("ОбщаяФорма", "CommonForms");	
	СоответствиеИменМетаданных.Вставить("ОбщийМодуль", "CommonModules");	
	СоответствиеИменМетаданных.Вставить("ОбщаяКартинка", "CommonPictures");	
	СоответствиеИменМетаданных.Вставить("ОбщийМакет", "CommonTemplates");	
	СоответствиеИменМетаданных.Вставить("Константа", "Constants");	
	СоответствиеИменМетаданных.Вставить("Обработка", "DataProcessors");	
	СоответствиеИменМетаданных.Вставить("ОпределяемыйТип", "DefinedTypes");	
	СоответствиеИменМетаданных.Вставить("ЖурналДокумента", "DocumentJournals");	
	СоответствиеИменМетаданных.Вставить("Нумератор", "DocumentNumerators");
	СоответствиеИменМетаданных.Вставить("Документ", "Documents");	
	СоответствиеИменМетаданных.Вставить("Перечисление", "Enums");	
	СоответствиеИменМетаданных.Вставить("ПодпискаНаСобытие", "EventSubscriptions");	
	СоответствиеИменМетаданных.Вставить("ПланОбмена", "ExchangePlans");	
	СоответствиеИменМетаданных.Вставить("ВнешнийИсточник", "ExternalDataSources");	
	СоответствиеИменМетаданных.Вставить("КритерийОтбора", "FilterCriteria");	
	СоответствиеИменМетаданных.Вставить("ФункциональнаяОпция", "FunctionalOptions");	
	СоответствиеИменМетаданных.Вставить("ПарамертФункциональыхОпций", "FunctionalOptionsParameters");	
	СоответствиеИменМетаданных.Вставить("HTTPСервис", "HTTPServices");	
	СоответствиеИменМетаданных.Вставить("РегистрСведений", "InformationRegisters");	
	СоответствиеИменМетаданных.Вставить("Язык", "Languages");
	СоответствиеИменМетаданных.Вставить("Отчет", "Reports");	
	СоответствиеИменМетаданных.Вставить("Роль", "Roles");	
	СоответствиеИменМетаданных.Вставить("РегламентноеЗадание", "ScheduledJobs");	
	СоответствиеИменМетаданных.Вставить("Последовательность", "Sequences");	
	СоответствиеИменМетаданных.Вставить("ПараметрСеанса", "SessionParameters");	
	СоответствиеИменМетаданных.Вставить("ХранилищеНастроек", "SettingsStorages");	
	СоответствиеИменМетаданных.Вставить("ЭлементСтиля", "StyleItems");	
	СоответствиеИменМетаданных.Вставить("Подсистема", "Subsystems");	
	СоответствиеИменМетаданных.Вставить("Задача", "Tasks");	
	СоответствиеИменМетаданных.Вставить("WebСервис", "WebServices");	
	СоответствиеИменМетаданных.Вставить("XDTOПакет", "XDTOPackages");	
		
	СловарьИменМетаданных = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеИменМетаданных Цикл
		СловарьИменМетаданных.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
		
	Возврат СловарьИменМетаданных;
	
КонецФункции

Функция СловарьСвойствОбъектаМетаданныхXML()
	
	Свойства = Новый Структура;
	Свойства.Вставить("id", "УИД");
	Свойства.Вставить("name", "ПолноеИмя");
	
	Возврат Свойства;
	
КонецФункции

Функция НаименованиеКлассаОбъекта(КлассОбъекта)
	
	Если КлассОбъекта = "Constant" Тогда
		Возврат "Константа";
	КонецЕсли;
	
	Если КлассОбъекта = "Catalog" Тогда
		Возврат "Справочник";
	КонецЕсли;
	
	Если КлассОбъекта = "Document" Тогда
		Возврат "Документ";
	КонецЕсли; 
	
	Если КлассОбъекта = "Sequence" Тогда
		Возврат "Последовательность";
	КонецЕсли; 
	
	Если КлассОбъекта = "DocumentNumerator" Тогда
		Возврат "Нумератор";
	КонецЕсли;
	
	Если КлассОбъекта = "DocumentJournal" Тогда
		Возврат "ЖурналДокументов";
	КонецЕсли; 
	
	Если КлассОбъекта = "Enum" Тогда
		Возврат "Перечисление";
	КонецЕсли;
	
	Если КлассОбъекта = "Report" Тогда
		Возврат "Отчет";
	КонецЕсли;
	
	Если КлассОбъекта = "DataProcessor" Тогда
		Возврат "Обработка";
	КонецЕсли;
	
	Если КлассОбъекта = "ChartOfCharacteristicTypes" Тогда
		Возврат "ПланВидовХарактеристик";
	КонецЕсли;
	
	Если КлассОбъекта = "ChartOfAccounts" Тогда
		Возврат "ПланСчетов";
	КонецЕсли;
	
	Если КлассОбъекта = "ChartOfCalculationTypes" Тогда
		Возврат "ПланВидовРасчета";
	КонецЕсли;
	
	Если КлассОбъекта = "InformationRegister" Тогда
		Возврат "РегистрСведений";
	КонецЕсли;
	
	Если КлассОбъекта = "AccumulationRegister" Тогда
		Возврат "РегистрНакопления";
	КонецЕсли;
	
	Если КлассОбъекта = "AccountingRegister" Тогда
		Возврат "РегистрБухгалтерии";
	КонецЕсли;
	
	Если КлассОбъекта = "CalculationRegister" Тогда
		Возврат "РегистрРасчета";
	КонецЕсли;
	
	Если КлассОбъекта = "BusinessProcess" Тогда
		Возврат "БизнесПроцесс";
	КонецЕсли;
	
	Если КлассОбъекта = "Task" Тогда
		Возврат "Задача";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonModule" Тогда
		Возврат "ОбщийМодуль";
	КонецЕсли;
	
	Если КлассОбъекта = "SessionParameter" Тогда
		Возврат "ПараметрСеанса";
	КонецЕсли;
	
	Если КлассОбъекта = "Role" Тогда
		Возврат "Роль";
	КонецЕсли;
	
	Если КлассОбъекта = "ExchangePlan" Тогда
		Возврат "ПланОбмена";
	КонецЕсли;
	
	Если КлассОбъекта = "FilterCriterion" Тогда
		Возврат "КритерийОтбора";
	КонецЕсли;
	
	Если КлассОбъекта = "EventSubscription" Тогда
		Возврат "ПодпискаНаСобытие";
	КонецЕсли;
	
	Если КлассОбъекта = "ScheduledJob" Тогда
		Возврат "РегламентноеЗадание";
	КонецЕсли;
	
	Если КлассОбъекта = "FunctionalOption" Тогда
		Возврат "ФункциональнаяОпция";
	КонецЕсли;
	
	Если КлассОбъекта = "FunctionalOptionsParameter" Тогда
		Возврат "ПараметрФункциональнойОпции";
	КонецЕсли;
	
	Если КлассОбъекта = "SettingsStorage" Тогда
		Возврат "ХранилищеНастроек";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonForm" Тогда
		Возврат "ОбщаяФорма";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonCommand" Тогда
		Возврат "ОбщаяКоманда";
	КонецЕсли;
	
	Если КлассОбъекта = "CommandGroup" Тогда
		Возврат "ГруппаКоманд";
	КонецЕсли;
	
	Если КлассОбъекта = "XDTOPackage" Тогда
		Возврат "ПакетXDTO";
	КонецЕсли;
	
	Если КлассОбъекта = "WebService" Тогда
		Возврат "WebСервис";
	КонецЕсли;
	
	Если КлассОбъекта = "WSReference" Тогда
		Возврат "WSСсылка";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonAttribute" Тогда
		Возврат "ОбщийРеквизит";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonPicture" Тогда
		Возврат "ОбщаяКартинка";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonTemplate" Тогда
		Возврат "ОбщийМакет";
	КонецЕсли;
	
	Если КлассОбъекта = "DefinedType" Тогда
		Возврат "ОпределяемыйТип";
	КонецЕсли;
	
	Если КлассОбъекта = "ExternalDataSource" Тогда
		Возврат "ВнешнийИсточникДанных";
	КонецЕсли;
	
	Если КлассОбъекта = "HTTPService" Тогда
		Возврат "HTTPСервис";
	КонецЕсли;
	
	Если КлассОбъекта = "Language" Тогда
		Возврат "Язык";
	КонецЕсли;
	
	Если КлассОбъекта = "StyleItem" Тогда
		Возврат "ЭлементСтиля";
	КонецЕсли;
	
	Если КлассОбъекта = "Style" Тогда
		Возврат "Стиль";
	КонецЕсли;
	

КонецФункции 

Функция КоллекцияXDTO(Элемент)
	Если Не ТипЗнч(Элемент) = Тип("СписокXDTO") Тогда
		МассивXDTO = Новый Массив;
		МассивXDTO.Добавить(Элемент);
		Возврат МассивXDTO;
	КонецЕсли;
	Возврат Элемент;
КонецФункции

Функция ФайлОбъектаПодходитДляСравнения(ИмяФайлаГит)
	Если Не СтрЗаканчиваетсяНа(ИмяФайлаГит, ".xml") Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрНайти(ИмяФайлаГит, "ConfigDumpInfo.xml") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрНайти(ИмяФайлаГит, "Form.xml") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрНайти(ИмяФайлаГит, "CommandInterface.xml") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрНайти(ИмяФайлаГит, "Help.xml") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрНайти(ИмяФайлаГит, "Template.xml") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	// Предопределенные сравниваем отдельно, т.к. они в отдельных файлах хранятся
	Если СтрНайти(ИмяФайлаГит, "Predefined.xml") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	Возврат Истина;
КонецФункции

Функция МетаданныеОбъектаМетаданныхИзФайла(ИмяФайлаОбъектаXML)
	
	ЧтениеХМЛ = Новый ЧтениеXML();
	ЧтениеХМЛ.ОткрытьФайл(ИмяФайлаОбъектаXML);
	Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ);
	ЧтениеХМЛ.Закрыть();
	
	КлассОбъекта = "";
	Для Каждого СвойствоВерхнегоУровня Из Данные.Свойства() Цикл
		Если СвойствоВерхнегоУровня.Имя = "version" Тогда
			Продолжить;
		КонецЕсли;
		КлассОбъекта = СвойствоВерхнегоУровня.Имя;
	КонецЦикла;
	ОбъектМетаданныхХДТО = Данные[КлассОбъекта];
	ОбъектМетаданных = Новый Структура();
	ОбъектМетаданных.Вставить("КлассОбъекта", КлассОбъекта);
	Если Данные.Свойства().Количество() <> 2 Тогда
		// Вероятно, это роль. Такие объекты не обрабатываем на данный момент
		Возврат ОбъектМетаданных;
	КонецЕсли;
	
	// Реквизиты объекта
	Если ТипЗнч(ОбъектМетаданныхХДТО) = Тип("ОбъектXDTO") И ОбъектМетаданныхХДТО.Свойства().Получить("ChildObjects") <> Неопределено Тогда
		ТипыПолей = Новый Структура();
		ТипыПолей.Вставить("Attribute", "Реквизиты");
		ТипыПолей.Вставить("Resource", "Ресурсы");
		ТипыПолей.Вставить("Dimension", "Измерения");
		Для Каждого ТипПоля Из ТипыПолей Цикл
			Если ОбъектМетаданныхХДТО.ChildObjects.Свойства().Получить(ТипПоля.Ключ) <> Неопределено Тогда
				Поля = Новый Структура();
				Для Каждого РеквизитХДТО Из КоллекцияXDTO(ОбъектМетаданныхХДТО.ChildObjects[ТипПоля.Ключ]) Цикл
					СвойстваРеквизитаХДТО = РеквизитХДТО.Properties;
					СвойстваРеквизита = Новый Структура();
					ТипыРеквизита = Новый СписокЗначений();
					// Внутри могут быть Type и TypeSet
					Если РеквизитХДТО.Properties.Свойства().Получить("Type") = Неопределено
							Или РеквизитХДТО.Properties.Type.Свойства().Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					СвойствоТипаХДТО = РеквизитХДТО.Properties.Type.Свойства()[0];
					ИмяПоляТипа = РеквизитХДТО.Properties.Type.Свойства()[0].Имя;
					Для Каждого Тип Из КоллекцияXDTO(РеквизитХДТО.Properties.Type) Цикл
						ЗначениеТипа = Тип[ИмяПоляТипа];
						Если ЗначениеТипа = "xs:string" Тогда
							ИмяТипа = СтрШаблон("Строка(%1)", Тип.StringQualifiers.Length);
						ИначеЕсли ЗначениеТипа = "xs:decimal" Тогда
							ИмяТипа = СтрШаблон(
								"Число(%1,%2,%3)",
								Тип.NumberQualifiers.Digits,
								Тип.NumberQualifiers.FractionDigits,
								Тип.NumberQualifiers.AllowedSign);
						ИначеЕсли ЗначениеТипа = "xs:dateTime" Тогда
							ИмяТипа = СтрШаблон("Дата(%1)", Тип.DateQualifiers.DateFractions);
						Иначе
							ИмяТипа = ЗначениеТипа;
						КонецЕсли;
						ТипыРеквизита.Добавить(ИмяТипа);
					КонецЦикла;
					ТипыРеквизита.СортироватьПоЗначению();
					СвойстваРеквизита.Вставить("Тип", СтрСоединить(ТипыРеквизита.ВыгрузитьЗначения(), ";"));
					Поля.Вставить(РеквизитХДТО.Properties.Name, СвойстваРеквизита);
				КонецЦикла;
				ОбъектМетаданных.Вставить(ТипПоля.Значение, Поля);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Реквизиты табличных частей объекта
	Если ТипЗнч(ОбъектМетаданныхХДТО) = Тип("ОбъектXDTO") И ОбъектМетаданныхХДТО.Свойства().Получить("ChildObjects") <> Неопределено
			И ОбъектМетаданныхХДТО.ChildObjects.Свойства().Получить("TabularSection") <> Неопределено Тогда
		Для Каждого ТчХДТО Из КоллекцияXDTO(ОбъектМетаданныхХДТО.ChildObjects.TabularSection) Цикл
			ИмяТЧ = ТчХДТО.Properties.Name;
			Если ТчХДТО.Свойства().Получить("ChildObjects") <> Неопределено
					И ТчХДТО.ChildObjects.Свойства().Получить("Attribute") <> Неопределено Тогда
				Поля = Новый Структура();
				Для Каждого РеквизитХДТО Из КоллекцияXDTO(ТчХДТО.ChildObjects["Attribute"]) Цикл
					СвойстваРеквизитаХДТО = РеквизитХДТО.Properties;
					СвойстваРеквизита = Новый Структура();
					ТипыРеквизита = Новый СписокЗначений();
					// Внутри могут быть Type и TypeSet
					Если РеквизитХДТО.Properties.Свойства().Получить("Type") = Неопределено
							Или РеквизитХДТО.Properties.Type.Свойства().Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					СвойствоТипаХДТО = РеквизитХДТО.Properties.Type.Свойства()[0];
					ИмяПоляТипа = РеквизитХДТО.Properties.Type.Свойства()[0].Имя;
					Для Каждого Тип Из КоллекцияXDTO(РеквизитХДТО.Properties.Type) Цикл
						ЗначениеТипа = Тип[ИмяПоляТипа];
						Если ЗначениеТипа = "xs:string" Тогда
							ИмяТипа = СтрШаблон("Строка(%1)", Тип.StringQualifiers.Length);
						ИначеЕсли ЗначениеТипа = "xs:decimal" Тогда
							ИмяТипа = СтрШаблон(
							"Число(%1,%2,%3)",
							Тип.NumberQualifiers.Digits,
							Тип.NumberQualifiers.FractionDigits,
							Тип.NumberQualifiers.AllowedSign);
						ИначеЕсли ЗначениеТипа = "xs:dateTime" Тогда
							ИмяТипа = СтрШаблон("Дата(%1)", Тип.DateQualifiers.DateFractions);
						Иначе
							ИмяТипа = ЗначениеТипа;
						КонецЕсли;
						ТипыРеквизита.Добавить(ИмяТипа);
					КонецЦикла;
					ТипыРеквизита.СортироватьПоЗначению();
					СвойстваРеквизита.Вставить("Тип", СтрСоединить(ТипыРеквизита.ВыгрузитьЗначения(), ";"));
					Поля.Вставить("ТЧ_" + ИмяТЧ + "_" + РеквизитХДТО.Properties.Name, СвойстваРеквизита);
				КонецЦикла;
				ОбъектМетаданных.Вставить("РеквизитыТабличныхЧастей", Поля);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Если у объекта есть свои свойства
	Если ТипЗнч(ОбъектМетаданныхХДТО) = Тип("ОбъектXDTO") И ОбъектМетаданныхХДТО.Свойства().Получить("Properties") <> Неопределено Тогда
		// Владельцы
		Если ОбъектМетаданныхХДТО.Properties.Свойства().Получить("Owners") <> Неопределено Тогда
			ВладельцыОбъекта = Новый СписокЗначений();
			Если ОбъектМетаданныхХДТО.Properties.Owners.Свойства().Количество() Тогда
				Для Каждого ВладельцыХДТО Из КоллекцияXDTO(ОбъектМетаданныхХДТО.Properties.Owners.Item) Цикл
					ВладельцыОбъекта.Добавить(ВладельцыХДТО);
				КонецЦикла;
				ВладельцыОбъекта.СортироватьПоЗначению();
			КонецЕсли;
			ОбъектМетаданных.Вставить("Владельцы", СтрСоединить(ВладельцыОбъекта.ВыгрузитьЗначения(), ";"));
		КонецЕсли;
		// Иерархия
		Если ОбъектМетаданныхХДТО.Properties.Свойства().Получить("Hierarchical") <> Неопределено Тогда
			СвойстваИерархии = Новый Структура();
			СвойстваИерархии.Вставить("Иерархический", XMLЗначение(Тип("Булево"), ОбъектМетаданныхХДТО.Properties.Hierarchical));
			СвойстваИерархии.Вставить("ТипИерархии", 
				?(ОбъектМетаданныхХДТО.Properties.Свойства().Получить("HierarchyType") <> Неопределено, ОбъектМетаданныхХДТО.Properties.HierarchyType, ""));
			СвойстваИерархии.Вставить("ОграничениеКоличестваУровней",
				?(ОбъектМетаданныхХДТО.Properties.Свойства().Получить("LimitLevelCount") <> Неопределено, XMLЗначение(Тип("Булево"), ОбъектМетаданныхХДТО.Properties.LimitLevelCount), ""));
			СвойстваИерархии.Вставить("КоличествоУровней",
				?(ОбъектМетаданныхХДТО.Properties.Свойства().Получить("LevelCount") <> Неопределено, ОбъектМетаданныхХДТО.Properties.LevelCount, ""));
			ОбъектМетаданных.Вставить("СвойстваИерархии", СвойстваИерархии);
		КонецЕсли;
		// Движения
		Если ОбъектМетаданныхХДТО.Properties.Свойства().Получить("RegisterRecords") <> Неопределено Тогда
			Движения = Новый СписокЗначений();
			Если ОбъектМетаданныхХДТО.Properties.RegisterRecords.Свойства().Количество() Тогда
				Для Каждого ДвиженияХДТО Из КоллекцияXDTO(ОбъектМетаданныхХДТО.Properties.RegisterRecords.Item) Цикл
					Движения.Добавить(ДвиженияХДТО);
				КонецЦикла;
				Движения.СортироватьПоЗначению();
			КонецЕсли;
			ОбъектМетаданных.Вставить("Движения", СтрСоединить(Движения.ВыгрузитьЗначения(), ";"));
		КонецЕсли;
	КонецЕсли;
	// Значения перечислений
	Если ТипЗнч(ОбъектМетаданныхХДТО) = Тип("ОбъектXDTO")
			И ОбъектМетаданныхХДТО.Свойства().Получить("ChildObjects") <> Неопределено
			И ОбъектМетаданныхХДТО.ChildObjects.Свойства().Получить("EnumValue") <> Неопределено
			Тогда
		ЗначенияПеречисления = Новый СписокЗначений();
		Для Каждого ЗначениеПеречисленияХДТО Из КоллекцияXDTO(ОбъектМетаданныхХДТО.ChildObjects.EnumValue) Цикл
			ЗначенияПеречисления.Добавить(ЗначениеПеречисленияХДТО.Properties.Name);
		КонецЦикла;
		ЗначенияПеречисления.СортироватьПоЗначению();
		ОбъектМетаданных.Вставить("ЗначенияПеречисления", СтрСоединить(ЗначенияПеречисления.ВыгрузитьЗначения(), ";"));
	КонецЕсли;
	
	Возврат ОбъектМетаданных;
	
КонецФункции

Функция ПолучитьИзмененияОбъектаМетаданныхXML(ИмяФайлаРодитель, ИмяФайлаТекущий)
	
	ОбъектМетаданныхРодитель = МетаданныеОбъектаМетаданныхИзФайла(ИмяФайлаРодитель);
	ОбъектМетаданныхТекущий = МетаданныеОбъектаМетаданныхИзФайла(ИмяФайлаТекущий);
	
	Изменения = Новый Структура();
	// Разница Полей
	ТипыПолей = Новый Массив();
	ТипыПолей.Добавить("Реквизиты");
	ТипыПолей.Добавить("РеквизитыТабличныхЧастей");
	ТипыПолей.Добавить("Ресурсы");
	ТипыПолей.Добавить("Измерения");
	Для Каждого ТипПоля Из ТипыПолей Цикл
		Если ОбъектМетаданныхРодитель.Свойство(ТипПоля) Тогда
			РеквизитыА = ОбъектМетаданныхРодитель[ТипПоля];
			РеквизитыБ = ?(ОбъектМетаданныхТекущий.Свойство(ТипПоля), ОбъектМетаданныхТекущий[ТипПоля], Новый Структура());
			Ключи1 = СтрРазделить(ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(РеквизитыА, ","), ",");
			Ключи2 = СтрРазделить(ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(РеквизитыБ, ","), ",");
			
			УдаленныеРеквизиты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Ключи1, Ключи2);
			ДобавленныеРеквизиты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Ключи2, Ключи1);
			ДобавленныеИУдаленные = Новый Массив();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДобавленныеИУдаленные, УдаленныеРеквизиты);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДобавленныеИУдаленные, ДобавленныеРеквизиты);
			РеквизитыДляПроверкиИзменений =
				ОбщегоНазначенияКлиентСервер.РазностьМассивов(
					Ключи1,
					ДобавленныеИУдаленные);
			ИзмененныеРеквизиты = Новый Структура();
			Для Каждого ИмяРеквизита Из РеквизитыДляПроверкиИзменений Цикл
				Для Каждого КлючИЗначениеСвойствРеквизита Из РеквизитыА[ИмяРеквизита] Цикл
					ИзмененияРеквизита = Новый Структура;
					Если РеквизитыА[ИмяРеквизита][КлючИЗначениеСвойствРеквизита.Ключ] <> РеквизитыБ[ИмяРеквизита][КлючИЗначениеСвойствРеквизита.Ключ] Тогда
						ИзмененияРеквизита.Вставить(
							КлючИЗначениеСвойствРеквизита.Ключ,
							СтрШаблон(
								"%1 -> %2",
								РеквизитыА[ИмяРеквизита][КлючИЗначениеСвойствРеквизита.Ключ],
								РеквизитыБ[ИмяРеквизита][КлючИЗначениеСвойствРеквизита.Ключ]));
					КонецЕсли;
					Если ИзмененияРеквизита.Количество() Тогда
						ИзмененныеРеквизиты.Вставить(ИмяРеквизита, ИзмененияРеквизита);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если ИзмененныеРеквизиты.Количество() Или ДобавленныеРеквизиты.Количество() Или УдаленныеРеквизиты.Количество() Тогда
				ИзмененияРеквизитов = Новый Структура(
					"Изменены, Добавлены, Удалены",
					ИзмененныеРеквизиты,
					ДобавленныеРеквизиты,
					УдаленныеРеквизиты);
				Изменения.Вставить(ТипПоля, ИзмененияРеквизитов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// Разница Владельцы. Свойство присутствует для объектов, в классах которых возможно установить. (Если пустое, то одиночный пустой тег)
	Если ОбъектМетаданныхРодитель.Свойство("Владельцы") Тогда
		ВладельцыА = ОбъектМетаданныхРодитель.Владельцы;
		ВладельцыБ = ОбъектМетаданныхТекущий.Владельцы;
		Если ВладельцыА <> ВладельцыБ Тогда
			Изменения.Вставить("Владельцы", СтрШаблон("%1 -> %2", ВладельцыА, ВладельцыБ));
		КонецЕсли;
	КонецЕсли;
	// Разница Иерархия. Свойство присутствует для объектов, в классах которых возможно установить. (Если пустое, то одиночный пустой тег)
	Если ОбъектМетаданныхРодитель.Свойство("Иерархия") Тогда
		А = ОбъектМетаданныхРодитель.Иерархия;
		Б = ОбъектМетаданныхТекущий.Иерархия;
		ИзмененияИерархии = Новый Структура();
		Для Каждого КлючИЗначение Из А Цикл
			Если А[КлючИЗначение.Ключ] <> Б[КлючИЗначение.Ключ] Тогда
				ИзмененияИерархии.Вставить(
					КлючИЗначение.Ключ,
					СтрШаблон(
						"%2 -> %3",
						А[КлючИЗначение.Ключ],
						Б[КлючИЗначение.Ключ]));
			КонецЕсли;
		КонецЦикла;
		Если ИзмененияИерархии.Количество() Тогда
			Изменения.Вставить("Иерархия", ИзмененияИерархии);
		КонецЕсли;
	КонецЕсли;
	// Разница Движения. Свойство присутствует для объектов, в классах которых возможно установить. (Если пустое, то одиночный пустой тег)
	Если ОбъектМетаданныхРодитель.Свойство("Движения") Тогда
		А = ОбъектМетаданныхРодитель.Движения;
		Б = ОбъектМетаданныхТекущий.Движения;
		Если А <> Б Тогда
			Изменения.Вставить("Движения", СтрШаблон("%1 -> %2", А, Б));
		КонецЕсли;
	КонецЕсли;
	// Значения перечисления
	Если ОбъектМетаданныхРодитель.Свойство("ЗначенияПеречисления") Тогда
		А = ОбъектМетаданныхРодитель.ЗначенияПеречисления;
		Б = ОбъектМетаданныхТекущий.ЗначенияПеречисления;
		Если А <> Б Тогда
			Изменения.Вставить("ЗначенияПеречисления", СтрШаблон("%1 -> %2", А, Б));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Изменения;
	
КонецФункции

Функция ПредопределенныеДанныеИзФайла(ИмяФайлаОбъектаXML)
	
	Если Не ЗначениеЗаполнено(ИмяФайлаОбъектаXML) Тогда
		Возврат "";
	КонецЕсли;
	
	ЧтениеХМЛ = Новый ЧтениеXML();
	ЧтениеХМЛ.ОткрытьФайл(ИмяФайлаОбъектаXML);
	ПредопределенныеДанныеХДТО = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ);
	ЧтениеХМЛ.Закрыть();
	
	ПредопределенныеЭлементы = Новый СписокЗначений();
	Для Каждого ПредопределенныйХДТО Из КоллекцияXDTO(ПредопределенныеДанныеХДТО.Item) Цикл
		ПредопределенныеЭлементы.Добавить(ПредопределенныйХДТО.Name);
	КонецЦикла;
	ПредопределенныеЭлементы.СортироватьПоЗначению();
	Возврат СтрСоединить(ПредопределенныеЭлементы.ВыгрузитьЗначения(), ";");
	
КонецФункции

#КонецОбласти

