
#Область ПрограммныйИнтерфейс

#Область ОбновлениеИсторииХранилища

Процедура ОбновитьИсториюХранилища(Хранилище) Экспорт
	
	Если Хранилище.Пустая() Тогда
		Возврат;
	КонецЕсли;
	Попытка
		// Перед запуском нужно отслеживать уже запущенные задания по обновлению хранилища
		// Иначе может произойти "Зависание"
		ЗаблокироватьДанныеДляРедактирования(Хранилище);
	Исключение
		Возврат;
	КонецПопытки;
		
	ДатаНачала = ТекущаяДатаСеанса();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Хранилище", Хранилище);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хранилища.Наименование,
		|	Хранилища.БазаИсторииСтрокаСоединения КАК База1ССтрокаСоединения,
		|	Хранилища.БазаИсторииИмяПользователя КАК ПользовательБазы,
		|	Хранилища.БазаИсторииПароль КАК ПарольБазы,
		|	Хранилища.Путь КАК КаталогХранилища,
		|	Хранилища.БазаИсторииИмяПользователяХранилища КАК ПользовательХранилища,
		|	Хранилища.БазаИсторииПарольХранилища КАК ПарольХранилища,
		|	ВЫБОР
		|		КОГДА НЕ Хранилища.БазовоеХранилище = ЗНАЧЕНИЕ(Справочник.Хранилища.ПустаяСсылка)
		|			ТОГДА Хранилища.ИмяПапкиGit
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ИмяРасширения,
		|	ЕСТЬNULL(МаксимальныйНомерИсторииХранилища.МаксимальныйНомер, 0) КАК НомерНачальнойВерсии
		|ИЗ
		|	Справочник.Хранилища КАК Хранилища
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ИсторияХранилища.Код) КАК МаксимальныйНомер
		|		ИЗ
		|			Справочник.ИсторияХранилища КАК ИсторияХранилища
		|		ГДЕ
		|			ИсторияХранилища.Владелец = &Хранилище) КАК МаксимальныйНомерИсторииХранилища
		|		ПО ИСТИНА
		|ГДЕ
		|	Хранилища.Ссылка = &Хранилище";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	КлючеваяОперация = СтрШаблон(
		"ОбновлениеИсторииХранилища_Полное_%1",
		Выборка.Наименование);
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	ПараметрыСкрипта = КонструкторПараметровСкриптаПолученияИсторииХранилища(Хранилище);
	ПараметрыСкрипта.Вставить("СтрокаСоединения", СтрокаСоединения_v8(Выборка.База1ССтрокаСоединения));
	ПараметрыСкрипта.Вставить("ПользовательБазы", Выборка.ПользовательБазы);
	ПараметрыСкрипта.Вставить("ПарольБазы", Выборка.ПарольБазы);
	ПараметрыСкрипта.Вставить("КаталогХранилища", Выборка.КаталогХранилища);
	ПараметрыСкрипта.Вставить("ПользовательХранилища", Выборка.ПользовательХранилища);
	ПараметрыСкрипта.Вставить("ПарольХранилища", Выборка.ПарольХранилища);
	ПараметрыСкрипта.Вставить("НомерНачальнойВерсии", Выборка.НомерНачальнойВерсии);
	ПараметрыСкрипта.Вставить("ИмяРасширения", Выборка.ИмяРасширения);
	ПараметрыСкрипта.Вставить("Хранилище", Хранилище);
	
	НовыеВерсии = ПолучитьИсториюХранилища_ОС(ПараметрыСкрипта);
	Если Не НовыеВерсии.Количество() Тогда
		Возврат;
	КонецЕсли;
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, 1, "ВыполнениеСкрипта_getRepoHistory");

	ИменаТЧ = СтрРазделить("Изменены,Добавлены,Удалены", ",");
	Для Каждого ДанныеНовойВерсии Из НовыеВерсии Цикл
		
		НайденнаяИсторияХранилища = Справочники.ИсторияХранилища.НайтиПоКоду(ДанныеНовойВерсии.Номер, Истина,, Хранилище);
		
		Если ТипЗнч(НайденнаяИсторияХранилища) = Тип("СправочникСсылка.ИсторияХранилища")
			И Не НайденнаяИсторияХранилища.Пустая() Тогда
			НоваяВерсияОбъект = НайденнаяИсторияХранилища.ПолучитьОбъект();
		Иначе
			НоваяВерсияОбъект = Справочники.ИсторияХранилища.СоздатьЭлемент();
			НоваяВерсияОбъект.Код = ДанныеНовойВерсии.Номер;
			НоваяВерсияОбъект.Владелец = Хранилище;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяВерсияОбъект, ДанныеНовойВерсии, "Версия, Автор, Комментарий");
		НоваяВерсияОбъект.Дата = ДанныеНовойВерсии.Дата;
		
		Для Каждого ИмяТЧ Из ИменаТЧ Цикл
			НоваяВерсияОбъект[ИмяТЧ].Очистить();
			Для Каждого ИмяОбъекта Из ДанныеНовойВерсии[ИмяТЧ] Цикл
				НоваяСтрокаТЧ = НоваяВерсияОбъект[ИмяТЧ].Добавить();
				НоваяСтрокаТЧ.ИмяОбъекта = ИмяОбъекта;
			КонецЦикла;
		КонецЦикла;

		НоваяВерсияОбъект.Записать();
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, 1, "ЗаписьВерсии");
	КонецЦикла;

	РегистрыСведений.ИсторияОбновленияХранилища.Отразить(Хранилище, ДатаНачала);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);

КонецПроцедуры

Процедура ОбновитьВерсиюИсторииХранилища(ВерсияИсторииХранилища) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВерсияИсторииХранилища", ВерсияИсторииХранилища);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хранилища.Наименование КАК Наименование,
		|	Хранилища.БазаИсторииСтрокаСоединения КАК База1ССтрокаСоединения,
		|	Хранилища.БазаИсторииИмяПользователя КАК ПользовательБазы,
		|	Хранилища.БазаИсторииПароль КАК ПарольБазы,
		|	Хранилища.Путь КАК КаталогХранилища,
		|	Хранилища.БазаИсторииИмяПользователяХранилища КАК ПользовательХранилища,
		|	Хранилища.БазаИсторииПарольХранилища КАК ПарольХранилища,
		|	ВЫБОР
		|		КОГДА НЕ Хранилища.БазовоеХранилище = ЗНАЧЕНИЕ(Справочник.Хранилища.ПустаяСсылка)
		|			ТОГДА Хранилища.ИмяПапкиGit
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ИмяРасширения,
		|	ИсторияХранилища.Код КАК НомерНачальнойВерсии,
		|	ИсторияХранилища.Код КАК НомерКонечнойВерсии,
		|	ИсторияХранилища.Владелец КАК Хранилище
		|ИЗ
		|	Справочник.ИсторияХранилища КАК ИсторияХранилища
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Хранилища КАК Хранилища
		|		ПО ИсторияХранилища.Владелец = Хранилища.Ссылка
		|ГДЕ
		|	ИсторияХранилища.Ссылка = &ВерсияИсторииХранилища";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Выборка.Хранилище);
	Исключение
		ЗаписьЖурналаРегистрации(
			"Обновление истории хранилища",
			УровеньЖурналаРегистрации.Предупреждение,
			Выборка.Хранилище.Метаданные(),
			Выборка.Хранилище,
				СтрШаблон("Обновление хранилища %1 уже выполняется.
				|Параллельное обновление одного хранилища запрещено.",
				Выборка.Хранилище));
		Возврат;
	КонецПопытки;
	
	КлючеваяОперация = СтрШаблон(
		"ОбновлениеИсторииХранилища_ПоКоммиту_%2",
		Выборка.Наименование);
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	ПараметрыСкрипта = КонструкторПараметровСкриптаПолученияИсторииХранилища(Выборка.Хранилище);
	ПараметрыСкрипта.Вставить("СтрокаСоединения", СтрокаСоединения_v8(Выборка.База1ССтрокаСоединения));
	ПараметрыСкрипта.Вставить("ПользовательБазы", Выборка.ПользовательБазы);
	ПараметрыСкрипта.Вставить("ПарольБазы", Выборка.ПарольБазы);
	ПараметрыСкрипта.Вставить("КаталогХранилища", Выборка.КаталогХранилища);
	ПараметрыСкрипта.Вставить("ПользовательХранилища", Выборка.ПользовательХранилища);
	ПараметрыСкрипта.Вставить("ПарольХранилища", Выборка.ПарольХранилища);
	ПараметрыСкрипта.Вставить("НомерНачальнойВерсии", Выборка.НомерНачальнойВерсии);
	ПараметрыСкрипта.Вставить("НомерКонечнойВерсии", Выборка.НомерКонечнойВерсии);
	ПараметрыСкрипта.Вставить("ИмяРасширения", Выборка.ИмяРасширения);
	ПараметрыСкрипта.Вставить("Хранилище", Выборка.Хранилище);
	
	НовыеВерсии = ПолучитьИсториюХранилища_ОС(ПараметрыСкрипта);
	Если Не НовыеВерсии.Количество() Тогда
		ВызватьИсключение "Ошибка получения истории. Вероятно, хранилище занято. Попробуйте снова через несколько минут.";
	КонецЕсли;
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, 1, "ВыполнениеСкрипта_getRepoHistory");

	ИменаТЧ = СтрРазделить("Изменены,Добавлены,Удалены", ",");
	Для Каждого ДанныеНовойВерсии Из НовыеВерсии Цикл
		НоваяВерсияОбъект = ВерсияИсторииХранилища.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НоваяВерсияОбъект, ДанныеНовойВерсии, "Версия, Автор, Комментарий");
		НоваяВерсияОбъект.Код = ДанныеНовойВерсии.Номер;
		НоваяВерсияОбъект.Дата = ДанныеНовойВерсии.Дата;
		НоваяВерсияОбъект.Владелец = Выборка.Хранилище;
		
		Для Каждого ИмяТЧ Из ИменаТЧ Цикл
			НоваяВерсияОбъект[ИмяТЧ].Очистить();
			Для Каждого ИмяОбъекта Из ДанныеНовойВерсии[ИмяТЧ] Цикл
				НоваяСтрокаТЧ = НоваяВерсияОбъект[ИмяТЧ].Добавить();
				НоваяСтрокаТЧ.ИмяОбъекта = ИмяОбъекта;
			КонецЦикла;
		КонецЦикла;

		НоваяВерсияОбъект.Записать();
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, 1, "ЗаписьВерсии");
	КонецЦикла;

	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);

КонецПроцедуры

Функция ПолучитьИсториюХранилища_ОС(Знач ПараметрыСкрипта)
	
	Хранилище = ПараметрыСкрипта.Хранилище;
	ПараметрыСкрипта.Удалить("Хранилище");
	НомерКонечнойВерсии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыСкрипта, "НомерКонечнойВерсии", 0);
	Комментарий =
		"[" +
		Строка(ПараметрыСкрипта.НомерНачальнойВерсии) +
		?(НомерКонечнойВерсии = ПараметрыСкрипта.НомерНачальнойВерсии, "", ":") +
		?(НомерКонечнойВерсии = 0, "", ПараметрыСкрипта.НомерКонечнойВерсии) +
		"]";
	
	Результат = Новый Массив;
	ВремяВыполнения = 0;
	
	ФайлПараметров = ИмяВременногоФайла();
	ФайлРезультата = ИмяВременногоФайла();
	ФайлОшибки = ИмяВременногоФайла();

	ПараметрыСкрипта.Вставить("ФайлРезультата", ФайлРезультата);
	ПараметрыСкрипта.Вставить("ФайлОшибки", ФайлОшибки);
	СохранитьТекст(СтроковыеФункцииУККлиентСервер.ЗаписатьЗначениеJSON(ПараметрыСкрипта), ФайлПараметров);
	
	КомандаСкрипта = Константы.Путь_oscript.Получить() +
		" " + Константы.ПутьСкрипта_getRepoHistory.Получить() +
		?(ЗначениеЗаполнено(ФайлПараметров), " " + ФайлПараметров, "");
		
	Мониторинг.ЗаписатьНачалоОперации(
		Справочники.КлючевыеОперацииМониторинга.ВыполнениеСкрипта_getRepoHistory,
		Хранилище,
		Комментарий
		);
		
	КодВозврата = 0;
	ЗапуститьПриложение(КомандаСкрипта, , Истина, КодВозврата);
	
	Мониторинг.ЗаписатьЗавершениеОперации(
		Справочники.КлючевыеОперацииМониторинга.ВыполнениеСкрипта_getRepoHistory,
		Хранилище,
		Комментарий,
		Не КодВозврата = 0
		);
	
	Если КодВозврата = 0 Тогда
		Текст = ПрочитатьТекст(ФайлРезультата);

		// Нестандартное чтение, т.к. необходимо указать, в каких колонках находится дата, и в каком формате.	
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Текст);
		Ответ = ПрочитатьJSON(ЧтениеJSON,,"Дата", ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
		
		Если Не ТипЗнч(Ответ) = Тип("Структура") Тогда
			Результат = Ответ;
		Иначе
			Результат = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Ответ, "Версии", Результат);
			ВремяВыполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Ответ, "ВремяВыполнения", 0);
		КонецЕсли;
	
	Иначе
		ТекстИсключения = СтрШаблон(
			"При выполнении скрипта ""%1"" возникли ошибки.
			|Код возврата: %2
			|Хранилище: %3
			|Ошибки:
			|%5",			
			"getRepoHistory",
			КодВозврата,
			ПараметрыСкрипта.КаталогХранилища,
			ПрочитатьТекст(ФайлОшибки));
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_GIT("ПолучитьИсториюХранилища_ОС"),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			ТекстИсключения);
	КонецЕсли;
	
	Если Не ВремяВыполнения = 0 Тогда
		Мониторинг.ЗаписатьМониторингОперации(
			Справочники.КлючевыеОперацииМониторинга.ВыполнениеСкрипта_getRepoHistory_Время,
			Хранилище,
			,
			Комментарий,
			,
			ВремяВыполнения);
	КонецЕсли;
	
	УдалитьФайлы(ФайлОшибки);
	УдалитьФайлы(ФайлПараметров);
	УдалитьФайлы(ФайлРезультата);

	Возврат Результат;
	
КонецФункции

Функция КонструкторПараметровСкриптаПолученияИсторииХранилища(Хранилище)
	
	ПараметрыСкрипта = Новый Структура;
	ПараметрыСкрипта.Вставить("ПутьКПлатформе1С", ПутьКПлатформе1С(Хранилище));
	ПараметрыСкрипта.Вставить("СтрокаСоединения", "");
	ПараметрыСкрипта.Вставить("ПользовательБазы", "");
	ПараметрыСкрипта.Вставить("ПарольБазы", "");
	ПараметрыСкрипта.Вставить("КаталогХранилища", "");
	ПараметрыСкрипта.Вставить("ПользовательХранилища", "");
	ПараметрыСкрипта.Вставить("ПарольХранилища", "");
	ПараметрыСкрипта.Вставить("НомерНачальнойВерсии", 0);
	ПараметрыСкрипта.Вставить("НомерКонечнойВерсии", 0);
	ПараметрыСкрипта.Вставить("ИмяРасширения", "");
	
	Возврат ПараметрыСкрипта;
		
КонецФункции

Процедура ЗагрузитьХэшиGit(Хранилище) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НовыеХэшиGit.ХэшGit КАК ХешGit,
	|	НовыеХэшиGit.Номер КАК Номер
	|ПОМЕСТИТЬ НовыеХэшиGit
	|ИЗ
	|	&НовыеХэшиGit КАК НовыеХэшиGit
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеХэшиGit.Номер КАК Номер,
	|	МАКСИМУМ(ЕСТЬNULL(ПредыдущиеХэшиGit.Номер, ЕСТЬNULL(ПредыдущиеКоммиты.Код, 0))) КАК ПредыдущиеНомер
	|ПОМЕСТИТЬ Номера
	|ИЗ
	|	НовыеХэшиGit КАК ТекущиеХэшиGit
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеХэшиGit КАК ПредыдущиеХэшиGit
	|		ПО ТекущиеХэшиGit.Номер > ПредыдущиеХэшиGit.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсторияХранилища КАК ПредыдущиеКоммиты
	|		ПО (ПредыдущиеХэшиGit.Номер ЕСТЬ NULL)
	|		И (&Хранилище = ПредыдущиеКоммиты.Владелец)
	|		И ТекущиеХэшиGit.Номер > ПредыдущиеКоммиты.Код
	|СГРУППИРОВАТЬ ПО
	|	ТекущиеХэшиGit.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеКоммиты.Ссылка КАК Коммит,
	|	ТекущиеХэшиGit.ХешGit КАК ХешGit,
	|	ЕСТЬNULL(ПредыдущиеХэшиGit.ХешGit, ЕСТЬNULL(ХешиGitПредыдущиеКоммиты.Хеш, """")) КАК ПредыдущийХешGit
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ТекущиеКоммиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Номера КАК Номера
	|		ПО (ТекущиеКоммиты.Владелец = &Хранилище)
	|		И ТекущиеКоммиты.Код = Номера.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеХэшиGit КАК ТекущиеХэшиGit
	|		ПО (Номера.Номер = ТекущиеХэшиGit.Номер)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеХэшиGit КАК ПредыдущиеХэшиGit
	|		ПО (Номера.ПредыдущиеНомер = ПредыдущиеХэшиGit.Номер)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсторияХранилища КАК ПредыдущиеКоммиты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХешиGitВерсийХранилища КАК ХешиGitПредыдущиеКоммиты
	|			ПО ХешиGitПредыдущиеКоммиты.ВерсияХранилища = ПредыдущиеКоммиты.Ссылка
	|		ПО (ПредыдущиеХэшиGit.Номер ЕСТЬ NULL)
	|		И (&Хранилище = ПредыдущиеКоммиты.Владелец)
	|		И (Номера.ПредыдущиеНомер = ПредыдущиеКоммиты.Код)";
	Запрос.УстановитьПараметр("НовыеХэшиGit", НовыеХэшиGit(Хранилище));
	Запрос.УстановитьПараметр("Хранилище", Хранилище);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		об = Выборка.Коммит.ПолучитьОбъект();
		об.ФайлыGit.Загрузить(ФайлыGit(об.Владелец, Выборка.ХешGit, Выборка.ПредыдущийХешGit));
		об.Записать();
		
		РаботаСХранилищами.ЗаписатьХешGitВерсииХранилища(Выборка.Коммит, Выборка.ХешGit);
		// TODO: заменить логику добавления измененных объектов по аналогии с логикой из справочника ИсторияХранилища перед записью.

	КонецЦикла;

КонецПроцедуры

Функция ИмяСобытияЖР_GIT(ВложенноеСобытие = "")
	Возврат "GIT" + ?(ПустаяСтрока(ВложенноеСобытие), "", "." + ВложенноеСобытие);
КонецФункции

Функция НовыеХэшиGit(Хранилище)

	ДлинаХэша = 40;
	ТекстНачалаНомера = ",//№";
	ДлинаТекстНачалаНомера = СтрДлина(ТекстНачалаНомера);
	ПозицияНачалаНомера = ДлинаХэша + 1 + ДлинаТекстНачалаНомера;

	НовыеХэшиGit = Новый ТаблицаЗначений;
	НовыеХэшиGit.Колонки.Добавить("ХэшGit", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(ДлинаХэша)));
	НовыеХэшиGit.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(9, 0, ДопустимыйЗнак.Неотрицательный)));

	ФайлРезультата = ИмяВременногоФайла();
	ПоследнийХэшGit = РаботаСХранилищамиСлужебный.ПоследнийХэшGit(Хранилище);
	Если Не ЗначениеЗаполнено(ПоследнийХэшGit) Тогда
		ПоследнийХэшGit = ПервыйХэшGit(Хранилище);
	КонецЕсли;
	ИмяФайла = ИсполняемыйФайл_НовыеХэшиGit(Хранилище, ПоследнийХэшGit, ФайлРезультата);

	КодВозврата = ЗапуститьПриложениеPS(ИмяФайла);
	Если ЗначениеЗаполнено(КодВозврата) Тогда
		ТекстОшибки = СтрШаблон(
			"Не удалось получить новыйе хэши git
			|Хранилище: %1
			|Код возврата: %2", Хранилище, КодВозврата);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_GIT("НовыеХэшиGit"), УровеньЖурналаРегистрации.Информация, , , ТекстОшибки);
	Иначе
		Текст = СокрЛП(ПрочитатьТекст(ФайлРезультата));
		Для Каждого Строка Из СтрРазделить(Текст, Символы.ПС) Цикл

			НачалоНомера = СтрНайти(Строка, ТекстНачалаНомера, , ДлинаХэша) + ДлинаТекстНачалаНомера;
			Если Не НачалоНомера = ПозицияНачалаНомера Тогда
				Продолжить;
			КонецЕсли;
			КонецНомера = СтрНайти(Строка, " ", , НачалоНомера) - 1;
			Если КонецНомера = -1 Тогда
				КонецНомера = СтрДлина(Строка);
			КонецЕсли;

			Попытка
				Номер = Число(Сред(Строка, НачалоНомера, КонецНомера - НачалоНомера + 1));
			Исключение
				ТекстОшибки = СтрШаблон(
					"Не удалось выделить номер коммита из комментария
					|Хранилище: %1
					|Комментарий коммита:
					|%2", Хранилище, Строка);
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖР_GIT("НовыеХэшиGit"), УровеньЖурналаРегистрации.Информация, , , ТекстОшибки);
				Продолжить;
			КонецПопытки;

			НоваяСтрока = НовыеХэшиGit.Добавить();
			НоваяСтрока.ХэшGit = Лев(Строка, ДлинаХэша);
			НоваяСтрока.Номер = Номер;

		КонецЦикла;
	КонецЕсли;

	УдалитьФайлы(ФайлРезультата);
	УдалитьФайлы(ИмяФайла);

	Возврат НовыеХэшиGit;

КонецФункции

Функция ИсполняемыйФайл_НовыеХэшиGit(Хранилище, ПоследнийХэшGit, ФайлРезультата)

	ИмяФайла = ИмяВременногоФайла("ps1");

	Текст =
	"chcp 65001
	|%КомандаПереходаВКаталогGit1С%
	|git log --pretty=format:%H,%s %ПоследнийХэшGit%..HEAD -- '%КаталогКонфигурацииХранилища%' ':!%КаталогКонфигурацииХранилища%\VERSION' ':!%КаталогКонфигурацииХранилища%\AUTHORS' >> %ФайлРезультата%";

	Текст = СтрЗаменить(Текст, "%КомандаПереходаВКаталогGit1С%", КомандаПереходаВКаталогGit1С(Хранилище));
	Текст = СтрЗаменить(Текст, "%ПоследнийХэшGit%", ПоследнийХэшGit);
	Текст = СтрЗаменить(Текст, "%ФайлРезультата%", ФайлРезультата);
	Текст = СтрЗаменить(Текст, "%КаталогКонфигурацииХранилища%", КаталогКонфигурацииХранилища(Хранилище));

	СохранитьТекст(Текст, ИмяФайла);

	Возврат ИмяФайла;

КонецФункции

Функция ПервыйХэшGit(Хранилище)

	ПервыйХэшGit = "";

	ФайлРезультата = ИмяВременногоФайла();
	ИмяФайла = ИсполняемыйФайл_ПервыйХэшGit(Хранилище, ФайлРезультата);

	КодВозврата = ЗапуститьПриложениеPS(ИмяФайла);
	Если ЗначениеЗаполнено(КодВозврата) Тогда
		ТекстОшибки = СтрШаблон(
			"Не удалось получить первый хэш git
			|Хранилище: %1
			|Код возврата: %2", Хранилище, КодВозврата);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_GIT("ПервыйХэшGit"), УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
	Иначе
		ПервыйХэшGit = СокрЛП(ПрочитатьТекст(ФайлРезультата));
	КонецЕсли;

	УдалитьФайлы(ФайлРезультата);
	УдалитьФайлы(ИмяФайла);

	Возврат ПервыйХэшGit;

КонецФункции

Функция ИсполняемыйФайл_ПервыйХэшGit(Хранилище, ФайлРезультата)

	ИмяФайла = ИмяВременногоФайла("ps1");

	Текст =
	"chcp 65001
	|%КомандаПереходаВКаталогGit1С%
	|git rev-list HEAD -- '%КаталогКонфигурацииХранилища%' ':!%КаталогКонфигурацииХранилища%\VERSION' ':!%КаталогКонфигурацииХранилища%\AUTHORS' | Select-Object -Last 1 >> %ФайлРезультата%";

	Текст = СтрЗаменить(Текст, "%КомандаПереходаВКаталогGit1С%", КомандаПереходаВКаталогGit1С(Хранилище));
	Текст = СтрЗаменить(Текст, "%ФайлРезультата%", ФайлРезультата);
	Текст = СтрЗаменить(Текст, "%КаталогКонфигурацииХранилища%", КаталогКонфигурацииХранилища(Хранилище));

	СохранитьТекст(Текст, ИмяФайла);

	Возврат ИмяФайла;

КонецФункции

#Область ТаблицаФайловGit

Функция ФайлыGit(Хранилище, ХэшGit, ПредыдущийХэшGit) Экспорт

	ФайлыGit = ОписаниеТаблицыФайлыGit();

	ЗаполнитьТаблицуФайлыGitПоИзмененнымФайлам(ФайлыGit, Хранилище, ХэшGit, ПредыдущийХэшGit);

	ДополнитьТаблицуФайлыGitДаннымиСтатистики(ФайлыGit, Хранилище, ХэшGit, ПредыдущийХэшGit);

	Возврат ФайлыGit;

КонецФункции

Функция ОписаниеТаблицыФайлыGit()

	ФайлыGit = Новый ТаблицаЗначений;
	ФайлыGit.Колонки.Добавить("Флаг", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1)));
	ФайлыGit.Колонки.Добавить("Файл", Новый ОписаниеТипов("Строка"));
	ФайлыGit.Колонки.Добавить("СтарыйФайл", Новый ОписаниеТипов("Строка"));
	ФайлыGit.Колонки.Добавить("СтрокДобавлено", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ФайлыGit.Колонки.Добавить("СтрокУдалено", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));

	Возврат ФайлыGit;

КонецФункции

Процедура ЗаполнитьТаблицуФайлыGitПоИзмененнымФайлам(ФайлыGit, Хранилище, ХэшGit, ПредыдущийХэшGit)

	ФайлРезультата = ИмяВременногоФайла();
	ИмяФайла = ИсполняемыйФайл_ФайлыGit(Хранилище, ХэшGit, ПредыдущийХэшGit, ФайлРезультата);

	КодВозврата = ЗапуститьПриложениеPS(ИмяФайла);

	Если ЗначениеЗаполнено(КодВозврата) Тогда
		ТекстОшибки = СтрШаблон(
			"Не удалось получить файлы git
			|Хранилище: %1
			|Код возврата: %2", Хранилище, КодВозврата);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_GIT("ЗаполнитьТаблицуФайлыGitПоИзмененнымФайлам"), УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
	Иначе
		Текст = СокрЛП(ПрочитатьТекст(ФайлРезультата));
		ЭтоПерваяСтрока = Истина;
		Для Каждого Строка Из СтрРазделить(Текст, Символы.ПС) Цикл

			Если ЭтоПерваяСтрока Тогда
				ЭтоПерваяСтрока = Ложь;
				Продолжить;
			КонецЕсли;

			ДанныеСтроки = СтрРазделить(Строка, Символы.Таб);
			Если ДанныеСтроки.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ФайлыGit.Добавить();
			НоваяСтрока.Флаг = ДанныеСтроки[0];
			Если ДанныеСтроки.Количество() > 2 Тогда
				НоваяСтрока.Файл = ДанныеСтроки[2];
				НоваяСтрока.СтарыйФайл = ДанныеСтроки[1];
			Иначе
				НоваяСтрока.Файл = ДанныеСтроки[1];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	УдалитьФайлы(ФайлРезультата);
	УдалитьФайлы(ИмяФайла);

КонецПроцедуры

Процедура ДополнитьТаблицуФайлыGitДаннымиСтатистики(ФайлыGit, Хранилище, ХэшGit, ПредыдущийХэшGit)

	ФайлРезультата 		= ИмяВременногоФайла();
	ИмяФайлаСтатистики 	= ИсполняемыйФайл_СтатистикаИзмененияФайловGit(Хранилище, ХэшGit, ПредыдущийХэшGit, ФайлРезультата);
	КодВозврата		 	= ЗапуститьПриложениеPS(ИмяФайлаСтатистики);
	Если ЗначениеЗаполнено(КодВозврата) Тогда
		ТекстОшибки = СтрШаблон(
			"Не удалось получить статистику по файлам git
			|Хранилище: %1
			|Код возврата: %2", Хранилище, КодВозврата);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_GIT("ДополнитьТаблицуФайлыGitДаннымиСтатистики"), УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);

		УдалитьФайлы(ФайлРезультата);
		УдалитьФайлы(ИмяФайлаСтатистики);

		Возврат;
	КонецЕсли;

	ОписаниеЧисла = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));

	Текст = СокрЛП(ПрочитатьТекст(ФайлРезультата));
	Сообщить(Текст);
	Для Каждого Строка Из СтрРазделить(Текст, Символы.ПС) Цикл

		ДанныеСтроки = СтрРазделить(Строка, Символы.Таб);
		Если ДанныеСтроки.Количество() < 3 Тогда
			Продолжить;
		КонецЕсли;

		КоличествоДобавленныхСтрок 	= ОписаниеЧисла.ПривестиЗначение(ДанныеСтроки[0]);
		КоличествоУдаленныхСтрок 	= ОписаниеЧисла.ПривестиЗначение(ДанныеСтроки[1]);

		Если КоличествоДобавленныхСтрок = 0 И КоличествоУдаленныхСтрок = 0 Тогда
			Продолжить;
		КонецЕсли;

		ИмяИзмененногоФайла = ИмяФайлаGitСУчетомПереименованияДляСтатистики(ДанныеСтроки[2]);

		НайденнаяСтрокаФайлыGit = ФайлыGit.Найти(ИмяИзмененногоФайла, "Файл");
		Если Не НайденнаяСтрокаФайлыGit = Неопределено Тогда
			НайденнаяСтрокаФайлыGit.СтрокДобавлено 	= КоличествоДобавленныхСтрок;
			НайденнаяСтрокаФайлыGit.СтрокУдалено 	= КоличествоУдаленныхСтрок;
		КонецЕсли;

	КонецЦикла;

	УдалитьФайлы(ФайлРезультата);
	УдалитьФайлы(ИмяФайлаСтатистики);

КонецПроцедуры

Функция ИмяФайлаGitСУчетомПереименованияДляСтатистики(Знач ИмяИзмененногоФайла)

	РезультатФункции = ИмяИзмененногоФайла;

	Если Не СтрНайти(ИмяИзмененногоФайла, "=>") Тогда
		Возврат РезультатФункции;
	КонецЕсли;

	МассивКомпонентовПолногоИмениФайла = СтрРазделить(ИмяИзмененногоФайла, "/");
	Для ИтераторМассива = 0 По МассивКомпонентовПолногоИмениФайла.ВГраница() Цикл
		КомпонентаИмениФайла = МассивКомпонентовПолногоИмениФайла[ИтераторМассива];

		Позиция = СтрНайти(КомпонентаИмениФайла, "=>");
		Если Позиция Тогда
			КомпонентаИмениФайла = Сред(КомпонентаИмениФайла, Позиция + 2);
			КомпонентаИмениФайла = СтрЗаменить(КомпонентаИмениФайла, "}", "");
			МассивКомпонентовПолногоИмениФайла[ИтераторМассива] = СокрЛП(КомпонентаИмениФайла);
		КонецЕсли;

	КонецЦикла;
	Сообщить("новый файл - " + СтрСоединить(МассивКомпонентовПолногоИмениФайла, "/"));
	РезультатФункции = СтрСоединить(МассивКомпонентовПолногоИмениФайла, "/");

	Возврат РезультатФункции;

КонецФункции

Функция ИсполняемыйФайл_ФайлыGit(Хранилище, ХэшGit, ПредыдущийХэшGit, ФайлРезультата)

	ИмяФайла = ИмяВременногоФайла("ps1");

	Текст =
	"chcp 65001
	|%КомандаПереходаВКаталогGit1С%
	|git log --name-status --oneline %ПредыдущийХэшGit%..%ХэшGit% -- '%КаталогКонфигурацииХранилища%' ':!%КаталогКонфигурацииХранилища%\VERSION' ':!%КаталогКонфигурацииХранилища%\AUTHORS' >> %ФайлРезультата%";
	Текст = СтрЗаменить(Текст, "%КомандаПереходаВКаталогGit1С%", КомандаПереходаВКаталогGit1С(Хранилище));
	Текст = СтрЗаменить(Текст, "%ХэшGit%", ХэшGit);
	Текст = СтрЗаменить(Текст, "%ПредыдущийХэшGit%", ПредыдущийХэшGit);
	Текст = СтрЗаменить(Текст, "%ФайлРезультата%", ФайлРезультата);
	Текст = СтрЗаменить(Текст, "%КаталогКонфигурацииХранилища%", КаталогКонфигурацииХранилища(Хранилище));

	СохранитьТекст(Текст, ИмяФайла);

	Возврат ИмяФайла;

КонецФункции

Функция ИсполняемыйФайл_СтатистикаИзмененияФайловGit(Хранилище, ХэшGit, ПредыдущийХэшGit, ФайлРезультата)

	ИмяФайла = ИмяВременногоФайла("ps1");

	Текст =
	"chcp 65001
	|%КомандаПереходаВКаталогGit1С%
	|git diff %ПредыдущийХэшGit%..%ХэшGit% --numstat -- '%КаталогКонфигурацииХранилища%'  >> %ФайлРезультата%";
	Текст = СтрЗаменить(Текст, "%КомандаПереходаВКаталогGit1С%", КомандаПереходаВКаталогGit1С(Хранилище));
	Текст = СтрЗаменить(Текст, "%ХэшGit%", ХэшGit);
	Текст = СтрЗаменить(Текст, "%ПредыдущийХэшGit%", ПредыдущийХэшGit);
	Текст = СтрЗаменить(Текст, "%ФайлРезультата%", ФайлРезультата);
	Текст = СтрЗаменить(Текст, "%КаталогКонфигурацииХранилища%", КаталогКонфигурацииХранилища(Хранилище));

	СохранитьТекст(Текст, ИмяФайла);

	Возврат ИмяФайла;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПеренесНаработок

Процедура ПеренестиНаработки(Проект, ВерсииХранилища) Экспорт

	Если ВерсииХранилища.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаНачала = ОценкаПроизводительности.НачатьЗамерВремени();		
	ХранилищеРазработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ХранилищеРазработки");

	НачатьТранзакцию();

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.Конфигурации");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Проект);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();

	ОбъектыХранилища = ОбъектыХранилища(ВерсииХранилища);
	МассивОбъектов = МассивОбъектовКЗахвату(ОбъектыХранилища);
	Комментарий = КомментарийХранилища(ВерсииХранилища);
	МассивОбъектовКОбъединению = МассивОбъектовКОбъединению(ОбъектыХранилища);
	МассивОбъектовИсключаемыхИзОбъединения = МассивОбъектовИсключаемыхИзОбъединения(Проект, ОбъектыХранилища);
	// Для захвата и объединения с учётом возможности добавления новых объектов, добавляем объект конфигурации
	// В МассивОбъектов, чтобы был захват корня
	// В МассивОбъектовКОбъединению, чтобы в исключения добавились все объекты, которых нет в переносимых коммитах.
	ОбъектКонфигурация = ИмяОбъектаКонфигурация(ХранилищеРазработки);
	Если Не ПустаяСтрока(ОбъектКонфигурация) Тогда
		Если НЕ МассивОбъектов.Найти(ОбъектКонфигурация) = Неопределено Тогда
			МассивОбъектов.Добавить(ОбъектКонфигурация);
			Если НЕ МассивОбъектовКОбъединению.Найти(ОбъектКонфигурация) = Неопределено Тогда
				МассивОбъектовКОбъединению.Добавить(ОбъектКонфигурация);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	НомерВерсииРБ = ПеренестиНаработкиИзРазработкиВРБ(Проект, МассивОбъектов, МассивОбъектовКОбъединению, МассивОбъектовИсключаемыхИзОбъединения, Комментарий);
	НомераВерсийРБ = Новый Массив;
	ВерсииХранилищаРБ = Новый Массив;
	Если ЗначениеЗаполнено(НомерВерсииРБ) Тогда
		НомераВерсийРБ.Добавить(НомерВерсииРБ);
		ПоискКоммита = Справочники.ИсторияХранилища.НайтиПоКоду(НомерВерсииРБ, , , Проект.ХранилищеОбновления);
		Если ЗначениеЗаполнено(ПоискКоммита) Тогда
			ВерсииХранилищаРБ.Добавить(ПоискКоммита);
		Иначе
			ОбъектИсторияХранилищаРБ = Справочники.ИсторияХранилища.СоздатьЭлемент();
			ОбъектИсторияХранилищаРБ.Код = НомерВерсииРБ;
			ОбъектИсторияХранилищаРБ.Владелец = Проект.ХранилищеОбновления;
			ОбъектИсторияХранилищаРБ.Записать();
			ВерсииХранилищаРБ.Добавить(ОбъектИсторияХранилищаРБ.Ссылка);
		КонецЕсли;
	КонецЕсли;

	НомераВерсийРазраб = НомераВерсий(ВерсииХранилища);
	МеткаРБ = МеткаПоНомерам(НомераВерсийРазраб);
	МеткаРазраб = МеткаПоНомерам(НомераВерсийРБ);

	Если Не ПометитьНомераХранилищ(ХранилищеРазработки, НомераВерсийРазраб, МеткаРазраб) Тогда
		ВызватьИсключение "Ошибка пометки номера версии в хранилище разработки.";
	КонецЕсли;
	ПометитьВерсииХранилища(ВерсииХранилища, МеткаРазраб);
	Если Не ПометитьНомераХранилищ(Проект.ХранилищеОбновления, НомераВерсийРБ, МеткаРБ) Тогда
		ВызватьИсключение "Ошибка пометки номера версии в хранилище РБ.";
	КонецЕсли;
	ПометитьВерсииХранилища(ВерсииХранилищаРБ, МеткаРБ);

	ЗафиксироватьТранзакцию();
	
	ИмяКлючевойОперации = СтрШаблон("ПереносИзменений_%1", Проект);
	ОценкаПроизводительности.ЗакончитьЗамерВремени(ИмяКлючевойОперации, ДатаНачала);

КонецПроцедуры

Функция МассивОбъектовКЗахвату(ОбъектыХранилища) Экспорт

	Изменены = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОбъектыХранилища.Изменены, ОбъектыХранилища.Добавлены);
	Удалены = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОбъектыХранилища.Удалены, ОбъектыХранилища.Добавлены);

	МассивОбъектов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбъектов, Изменены);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбъектов, Удалены, Истина);
	Для Каждого ИмяОбъекта Из ОбъектыХранилища.Добавлены Цикл
		Если ЭтоКонфигурация(ИмяОбъекта) Тогда
			МассивОбъектов.Добавить(ИмяОбъекта);
		КонецЕсли;
		Если СтрНачинаетсяС(ИмяОбъекта, "ВнешнийИсточникДанных") Тогда // Если это внешний источник данных
			ЧастиИмениОбъекта = СтрРазделить(ИмяОбъекта, ".");
			Если ЧастиИмениОбъекта.Количество() > 1 Тогда
				МассивОбъектов.Добавить(ЧастиИмениОбъекта[0] + "." + ЧастиИмениОбъекта[1]);// Нужно захватить корневой объект ВИД
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	МассивОбъектов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОбъектов);

	Возврат МассивОбъектов;

КонецФункции

Функция ИмяОбъектаКонфигурация(Хранилище)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсторияХранилищаИзменены.ИмяОбъекта КАК ИмяОбъекта
		|ИЗ
		|	Справочник.ИсторияХранилища.Изменены КАК ИсторияХранилищаИзменены
		|ГДЕ
		|	НЕ ИсторияХранилищаИзменены.ИмяОбъекта ПОДОБНО ""%.%""
		|	И ИсторияХранилищаИзменены.Ссылка.Владелец = &Хранилище";
	Запрос.УстановитьПараметр("Хранилище", Хранилище);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИмяОбъекта;
	КонецЕсли;
	Возврат "";
КонецФункции

Функция МассивОбъектовКОбъединению(ОбъектыХранилища) Экспорт
	Результат = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ОбъектыХранилища.Изменены);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ОбъектыХранилища.Добавлены, Истина);
	
	Возврат Результат;
КонецФункции

Функция МассивОбъектовИсключаемыхИзОбъединения(Проект, ОбъектыХранилища) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсторияХранилищаДобавлены.ИмяОбъекта КАК ИмяОбъекта
		|ИЗ
		|	Справочник.ИсторияХранилища.Добавлены КАК ИсторияХранилищаДобавлены
		|ГДЕ
		|	ИсторияХранилищаДобавлены.Ссылка.Метка = """"
		|	И НЕ ИсторияХранилищаДобавлены.ИмяОбъекта В (&ДобавляемыеОбъекты)
		|	И ИсторияХранилищаДобавлены.Ссылка.Владелец = &ХранилищеДляРазработки
		|	И НЕ ИсторияХранилищаДобавлены.ИмяОбъекта ПОДОБНО ""%.%.%""
		|	И НЕ ИсторияХранилищаДобавлены.ИмяОбъекта В
		|				(ВЫБРАТЬ
		|					ИсторияХранилищаДобавлены.ИмяОбъекта КАК ИмяОбъекта
		|				ИЗ
		|					Справочник.ИсторияХранилища.Добавлены КАК ИсторияХранилищаДобавлены
		|				ГДЕ
		|					ИсторияХранилищаДобавлены.Ссылка.Владелец = &ХранилищеДляРБ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияХранилищаДобавлены.ИмяОбъекта";
	Запрос.УстановитьПараметр("ХранилищеДляРазработки", Проект.ХранилищеРазработки);
	Запрос.УстановитьПараметр("ХранилищеДляРБ", Проект.ХранилищеОбновления);
	Запрос.УстановитьПараметр("ДобавляемыеОбъекты", МассивОбъектовКОбъединению(ОбъектыХранилища));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("ИмяОбъекта");
	КонецЕсли;
КонецФункции

Функция ПеренестиНаработкиИзРазработкиВРБ(Проект,
										  МассивОбъектов,
										  МассивОбъектовКОбъединению,
										  МассивОбъектовИсключаемыхИзОбъединения,
										  Комментарий,
										  НомерВерсииРазработки = Неопределено) Экспорт

	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ОбновитьИсториюХранилища(Проект.ХранилищеОбновления);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбновлениеИсторииХранилища", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
	КонецПопытки; 
	ПоследнийНомерРБ_До = РаботаСХранилищамиСлужебный.ПоследнийНомер(Проект.ХранилищеОбновления,
		Проект.ХранилищеОбновления.БазаПереносаИмяПользователяХранилища);
	ПараметрыСкрипта = Новый Структура;
	ПараметрыСкрипта.Вставить("ПутьКПлатформе1С", ПутьКПлатформе1С(Проект.ХранилищеОбновления));
	
	КрайнийНомерВерсииХР = РаботаСХранилищамиСлужебный.ПоследнийКешированныйНомер(Проект.ХранилищеРазработки);
	ПараметрыПолученияВерсии = Новый Структура("Хранилище,ВерсияНомер", Проект.ХранилищеРазработки, КрайнийНомерВерсииХР);
	ПараметрыСкрипта.Вставить("Разраб_ПутьКФайлуВерсииХранилища", КешВерсийХранилищ.ПолучитьПутьФайлаВерсииПоИдентификаторам(ПараметрыПолученияВерсии));

	ПараметрыСкрипта.Вставить("Разраб_СтрокаСоединения", СтрокаСоединения_v8(Проект.ХранилищеРазработки.БазаПереносаСтрокаСоединения));
	ПараметрыСкрипта.Вставить("Разраб_ПользовательБазы", Проект.ХранилищеРазработки.БазаПереносаИмяПользователя);
	ПараметрыСкрипта.Вставить("Разраб_ПарольБазы", Проект.ХранилищеРазработки.БазаПереносаПароль);
	ПараметрыСкрипта.Вставить("Разраб_КаталогХранилища", Проект.ХранилищеРазработки.Путь);
	ПараметрыСкрипта.Вставить("Разраб_ПользовательХранилища", Проект.ХранилищеРазработки.БазаПереносаИмяПользователяХранилища);
	ПараметрыСкрипта.Вставить("Разраб_ПарольХранилища", Проект.ХранилищеРазработки.БазаПереносаПарольХранилища);
	Если ЗначениеЗаполнено(НомерВерсииРазработки) Тогда
		ПараметрыСкрипта.Вставить("Разраб_НомерВерсии", НомерВерсииРазработки);
	КонецЕсли;

	Если ЗначениеЗаполнено(Проект.ХранилищеРазработки.БазовоеХранилище) Тогда
		ПараметрыСкрипта.Вставить("Разраб_ИмяРасширения", Проект.ХранилищеРазработки.ИмяПапкиGit);
	КонецЕсли;

	ПараметрыСкрипта.Вставить("РБ_СтрокаСоединения", СтрокаСоединения_v8(Проект.ХранилищеОбновления.БазаПереносаСтрокаСоединения));
	ПараметрыСкрипта.Вставить("РБ_ПользовательБазы", Проект.ХранилищеОбновления.БазаПереносаИмяПользователя);
	ПараметрыСкрипта.Вставить("РБ_ПарольБазы", Проект.ХранилищеОбновления.БазаПереносаПароль);
	ПараметрыСкрипта.Вставить("РБ_КаталогХранилища", Проект.ХранилищеОбновления.Путь);
	ПараметрыСкрипта.Вставить("РБ_ПользовательХранилища", Проект.ХранилищеОбновления.БазаПереносаИмяПользователяХранилища);
	ПараметрыСкрипта.Вставить("РБ_ПарольХранилища", Проект.ХранилищеОбновления.БазаПереносаПарольХранилища);
	ПараметрыСкрипта.Вставить("РБ_Комментарий", Комментарий);
	ПараметрыСкрипта.Вставить("РБ_ФайлСпискаОбъектовКЗахвату", ФайлСпискаОбъектовКЗахвату(МассивОбъектов));
	ПараметрыСкрипта.Вставить("РБ_ФайлНастроекОбъединения", ФайлНастроекОбъединения(МассивОбъектовКОбъединению, МассивОбъектовИсключаемыхИзОбъединения));
	ПараметрыСкрипта.Вставить("ВременныйКаталог", ИмяВременногоКаталога());
	ПараметрыСкрипта.Вставить("ПоследнийНомерРБ", ПоследнийНомерРБ_До + 1);

	Если ЗначениеЗаполнено(Проект.ХранилищеОбновления.БазовоеХранилище)Тогда
		ПараметрыСкрипта.Вставить("РБ_ИмяРасширения", Проект.ХранилищеОбновления.ИмяПапкиGit);
	КонецЕсли;
	
	Отказ = Не ВыполнитьСкрипт("repoTransfer", ПараметрыСкрипта);

	УдалитьФайлы(ПараметрыСкрипта.РБ_ФайлСпискаОбъектовКЗахвату);
	УдалитьФайлы(ПараметрыСкрипта.РБ_ФайлНастроекОбъединения);
	УдалитьФайлы(ПараметрыСкрипта.ВременныйКаталог);

	Если Отказ Тогда
		ВызватьИсключение "При выполнении переноса в работе скрипта repoTransfer возникла ошибка. См. логи.";
	КонецЕсли;

	Попытка
		ОбновитьИсториюХранилища(Проект.ХранилищеОбновления);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбновлениеИсторииХранилища", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
	КонецПопытки;
	ПоследнийНомерРБ_После = ПоследнийНомерРБ_После(ПоследнийНомерРБ_До, Проект);
	Возврат ПоследнийНомерРБ_После;

КонецФункции

Функция ФайлСпискаОбъектовКЗахвату(МассивОбъектов)

	ФайлСпискаОбъектовКЗахвату = ИмяВременногоФайла();

	Текст =
	"<Objects xmlns=""http://v8.1c.ru/8.3/config/objects"" version=""1.0"">
	|	%Объекты%
	|</Objects>";

	МассивСтрок = Новый Массив;
	Для Каждого ИмяОбъекта Из МассивОбъектов Цикл

		Если ЭтоКонфигурация(ИмяОбъекта) Тогда
			ОбъектЗахвата = "<Configuration includeChildObjects=""false""/>";
		Иначе
			ОбъектЗахвата = "<Object fullName=""%ИмяОбъекта%"" includeChildObjects=""false""/>";
			ОбъектЗахвата = СтрЗаменить(ОбъектЗахвата, "%ИмяОбъекта%", ИмяОбъекта);
		КонецЕсли;
		МассивСтрок.Добавить(ОбъектЗахвата);

	КонецЦикла;

	Текст = СтрЗаменить(Текст, "%Объекты%", СтрСоединить(МассивСтрок, Символы.ПС));

	СохранитьТекст(Текст, ФайлСпискаОбъектовКЗахвату);

	Возврат ФайлСпискаОбъектовКЗахвату;

КонецФункции

Функция ФайлНастроекОбъединения(МассивОбъектовКОбъединению, МассивОбъектовИсключаемыхИзОбъединения)

	ФайлНастроекОбъединения = ИмяВременногоФайла();

	Текст =
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<Settings xmlns=""http://v8.1c.ru/8.3/config/merge/settings"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" version=""1.0"">
	|	<Parameters>
	|		<ConfigurationsRelation>ConfigurationsNotRelated</ConfigurationsRelation>
	|		<AllowMainConfigurationObjectDeletion>true</AllowMainConfigurationObjectDeletion>
	|		<CopyObjectsMode>false</CopyObjectsMode>
	|	</Parameters>
	|	%Объекты%
	|</Settings>";

	ДобавляютсяНовыеОбъекты = Ложь;
	МассивСтрок = Новый Массив;
	Для Каждого ИмяОбъекта Из МассивОбъектовКОбъединению Цикл
		Если ЭтоКонфигурация(ИмяОбъекта) Тогда
			ДобавляютсяНовыеОбъекты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Для Каждого ИмяОбъекта Из МассивОбъектовИсключаемыхИзОбъединения Цикл
		Если Не ЭтоКонфигурация(ИмяОбъекта) Тогда
			ПравилоДляОбъекта = "<Object fullNameInSecondConfiguration=""%ИмяОбъекта%""><MergeRule>DoNotMerge</MergeRule></Object>";
			ПравилоДляОбъекта = СтрЗаменить(ПравилоДляОбъекта, "%ИмяОбъекта%", ИмяОбъекта);
			МассивСтрок.Добавить(ПравилоДляОбъекта);
		КонецЕсли;
	КонецЦикла;

	Если ДобавляютсяНовыеОбъекты Тогда
		СтрокаНастроекОбъединенияОбъектов = "<Objects>%Объекты%</Objects>";
		СтрокаНастроекОбъединенияОбъектов = СтрЗаменить(СтрокаНастроекОбъединенияОбъектов, "%Объекты%", СтрСоединить(МассивСтрок, Символы.ПС));
	Иначе
		СтрокаНастроекОбъединенияОбъектов = "";
	КонецЕсли;
	Текст = СтрЗаменить(Текст, "%Объекты%", СтрокаНастроекОбъединенияОбъектов);

	СохранитьТекст(Текст, ФайлНастроекОбъединения);

	Возврат ФайлНастроекОбъединения;

КонецФункции

Функция ПоследнийНомерРБ_После(ПоследнийНомерРБ_До, Проект)

	ПоследнийНомерРБ_После = ПоследнийНомерРБ_До;

	КоличествоПопыток = 1;
	ТекущаяПопытка = 1;

	Пока ПоследнийНомерРБ_После = ПоследнийНомерРБ_До И ТекущаяПопытка <= КоличествоПопыток Цикл

		Если ТекущаяПопытка > 1 Тогда
			ОбщегоНазначенияУК.Пауза(5);
		КонецЕсли;

		ОбновитьИсториюХранилища(Проект.ХранилищеОбновления);
		ПоследнийНомерРБ_После = РаботаСХранилищамиСлужебный.ПоследнийНомер(Проект.ХранилищеОбновления,
			Проект.ХранилищеОбновления.БазаПереносаИмяПользователяХранилища);

		ТекущаяПопытка = ТекущаяПопытка + 1;

	КонецЦикла;

	Возврат ПоследнийНомерРБ_После;

КонецФункции

Функция ПометитьНомераХранилищ(Хранилище, Номера, Метка) Экспорт

	Если Номера.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;

	ПараметрыСкрипта = Новый Структура;
	ПараметрыСкрипта.Вставить("ПутьКПлатформе1С", ПутьКПлатформе1С(Хранилище));
	ПараметрыСкрипта.Вставить("СтрокаСоединения", СтрокаСоединения_v8(Хранилище.БазаПереносаСтрокаСоединения));
	ПараметрыСкрипта.Вставить("ПользовательБазы", Хранилище.БазаПереносаИмяПользователя);
	ПараметрыСкрипта.Вставить("ПарольБазы", Хранилище.БазаПереносаПароль);
	ПараметрыСкрипта.Вставить("КаталогХранилища", Хранилище.Путь);
	ПараметрыСкрипта.Вставить("ПользовательХранилища", Хранилище.БазаПереносаИмяПользователяХранилища);
	ПараметрыСкрипта.Вставить("ПарольХранилища", Хранилище.БазаПереносаПарольХранилища);
	ПараметрыСкрипта.Вставить("Номера", Номера);
	ПараметрыСкрипта.Вставить("Метка", Метка);

	Если ЗначениеЗаполнено(Хранилище.БазовоеХранилище) Тогда
		ПараметрыСкрипта.Вставить("ИмяРасширения", Хранилище.ИмяПапкиGit);
	КонецЕсли;
	
	Попытка
		Если ЗначениеЗаполнено(Хранилище.ПутьHTTP) Тогда
			Для Каждого НомерКоммита Из Номера Цикл
				РаботаСХранилищамиСлужебный.УстановитьМетку(Хранилище, НомерКоммита, Метка);
			КонецЦикла;
			Возврат Истина;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("КонвеерОбработки.УстановитьМетку", УровеньЖурналаРегистрации.Ошибка, , Хранилище, 
			"Не установленна метка по HTTP " + ОписаниеОшибки());
	КонецПопытки;

	Если Не ВыполнитьСкрипт("setMark", ПараметрыСкрипта) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Процедура ПометитьВерсииХранилища(ВерсииХранилища, Метка) Экспорт

	Для Каждого Версия Из ВерсииХранилища Цикл
		об = Версия.ПолучитьОбъект();
		об.Метка = Метка;
		об.Записать();
	КонецЦикла;

КонецПроцедуры

Функция НомераВерсий(ВерсииХранилища)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияХранилища.Код КАК Номер
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|ГДЕ
	|	ИсторияХранилища.Ссылка В(&ВерсииХранилища)";
	Запрос.УстановитьПараметр("ВерсииХранилища", ВерсииХранилища);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции

#КонецОбласти

#Область СинхронизацияСGit

Процедура СинхронизироватьХранилищеСGit(Хранилище) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	КрайняяВерсияХранилища = ПоследняяВерсияХранилища(Хранилище);
	
	ФайлПараметров = ФайлПараметров_gitsync(Хранилище);
	ИмяФайла = ИсполняемыйФайлСинхронизацииХранилища(Хранилище, ФайлПараметров);
	
	ДатаНачала = ТекущаяДата();		
	КодВозврата = ЗапуститьПриложениеPS(ИмяФайла);
	
	Мониторинг.ЗаписатьМониторингОперации(
		Справочники.КлючевыеОперацииМониторинга.СинхронизацияХранилищаС_GIT_ВыполнениеСкрипта,
		КрайняяВерсияХранилища,
		Перечисления.ЭтапыОперацийМониторинга.ЗамерВремени,
		,
		Не КодВозврата = 0,
		ТекущаяДата() - ДатаНачала);
	
	Если ЗначениеЗаполнено(КодВозврата) Тогда
		ТекстОшибки = СтрШаблон(
			"Не удалось снихроназировать хранилище с git
			|Хранилище: %1
			|Код возврата: %2", Хранилище, КодВозврата);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_GIT("СинхронизироватьХранилищеСGit"), УровеньЖурналаРегистрации.Информация, , , ТекстОшибки);
	КонецЕсли;

	УдалитьФайлы(ФайлПараметров);
	УдалитьФайлы(ИмяФайла);
	
КонецПроцедуры

Функция ИсполняемыйФайлСинхронизацииХранилища(Хранилище, ФайлПараметров)

	ИмяФайла = ИмяВременногоФайла("ps1");

	Текст =
	"chcp 65001
	|$env:GITSYNC_PLUGINS_PATH=""%Каталог_gitsync_plugins%""
	|%gitsync% --verbose all %ФайлПараметров% >> %КаталогGit1С%\gitsync_%ИмяПапкиGit%.log";
	Текст = СтрЗаменить(Текст, "%Каталог_gitsync_plugins%", Константы.Каталог_gitsync_plugins.Получить());
	//Текст = СтрЗаменить(Текст, "%КаталогGit1С%", КаталогGit1С());
	Текст = СтрЗаменить(Текст, "%КаталогGit1С%", КаталогЛоговСкриптов_GitSync());
	Текст = СтрЗаменить(Текст, "%ИмяПапкиGit%", ИмяПапкиGitХранилища(Хранилище));
	Текст = СтрЗаменить(Текст, "%КомандаПереходаВКаталогGit1С%", КомандаПереходаВКаталогGit1С(Хранилище));
	Текст = СтрЗаменить(Текст, "%gitsync%", Константы.Путь_oscript.Получить() + " " + Константы.ПутьСкрипта_gitsync.Получить());
	Текст = СтрЗаменить(Текст, "%ФайлПараметров%", ФайлПараметров);

	СохранитьТекст(Текст, ИмяФайла);

	Возврат ИмяФайла;

КонецФункции

Функция ФайлПараметров_gitsync(Хранилище)

	ИмяФайла = ИмяВременногоФайла();
	Если ЗначениеЗаполнено(Хранилище.БазовоеХранилище) Тогда
		Текст = 
		"{
		|    ""name"": ""%ИмяРасширения%"",
		|    ""extention"": ""%ИмяРасширения%"",
		|    ""path"": ""%КаталогХранилища%"",
		|    ""dir"": ""%КаталогGit1С%\%ИмяПапкиGit%\%КаталогКонфигурации%"",
		|    ""storage-user"": ""%ПользовательХранилища%"",
		|    ""storage-pwd"": ""%ПарольХранилища%"",
		|    ""git-path"": ""git"",
		|    ""temp-dir"": """",
		|    ""v8version"": ""%Версия1С%"",
		|    ""domain-email"": ""gitlab.com"",
		|    ""lic-try-count"": 5,
		|    ""plugins"": {
		|        ""enable"": [
		|            ""check-authors"",
		|            ""check-comments"",
		|            ""sync-remote""
		|        ],
		|        ""disable"": [
		|            ""tool1CD"",
		|            ""unpackForm""
		|        ]
		|    },
		|    ""plugins-config"": {
		|        ""push-n-commits"": 1,
		|        ""push-tags"": true,
		|        ""skip-exists-tags"": true,
		|        ""rename-module"": false,
		|        ""rename-form"": false,
		|        ""push"": true,
		|        ""pull"": true,
		|        ""URL"": ""https://gitlab.automacon.net/vkusvill-1c/%ИмяПапкиGit%.git""
		|    }
		|}";
	Иначе
		Текст =
		"{
		|	""globals"": {
		|	  ""git-path"": ""git"",
		|	  ""v8version"": ""%Версия1С%"",
		|	  ""storage-user"": ""%ПользовательХранилища%"",
		|	  ""storage-pwd"": ""%ПарольХранилища%"",
		|	  ""domain-email"": ""gitlab.com"",
		|	  ""lic-try-count"": 5,
		|	  ""plugins"": {
		|			""enable"": [
		|				""increment"",
		|				""check-authors"",
		|				""check-comments"",
		|				""sync-remote"",
		|				""tool1CD"",
		|				""unpackForm""
		|			]
		|		},
		|		""plugins-config"": {
		|			""push-n-commits"": 1,
		|			""push-tags"": true,
		|			""skip-exists-tags"": true,
		|			""rename-module"": true,
		|			""rename-form"": true,
		|			""push"": true,
		|			""pull"": true
		|		}
		|	},
		|	""repositories"": [
		|	  {
		|			""name"": ""%ИмяПапкиGit%"",
		|			""path"": ""%КаталогХранилища%"",
		|			""dir"": ""%КаталогGit1С%\%ИмяПапкиGit%\%КаталогКонфигурации%"",
		|			""temp-dir"": """",
		|			""plugins-config"": {
		|				""URL"": ""https://gitlab.automacon.net/vkusvill-1c/%ИмяПапкиGit%.git""
		|			}
		|		}
		|	]
		|  }
		|";
	КонецЕсли;

	Текст = СтрЗаменить(Текст, "%ИмяРасширения%", Хранилище.ИмяПапкиGit);
	Текст = СтрЗаменить(Текст, "%ПользовательХранилища%", Хранилище.GitИмяПользователя);
	Текст = СтрЗаменить(Текст, "%ПарольХранилища%", Хранилище.GitПароль);
	Текст = СтрЗаменить(Текст, "%КаталогХранилища%", Хранилище.Путь);
	Текст = СтрЗаменить(Текст, "%КаталогGit1С%", КаталогGit1С());
	Текст = СтрЗаменить(Текст, "%Версия1С%", Версия1С(Хранилище.ВерсияПлатформы));

	Текст = СтрЗаменить(Текст, "%ИмяПапкиGit%", ИмяПапкиGitХранилища(Хранилище));
	Текст = СтрЗаменить(Текст, "%КаталогКонфигурации%", КаталогКонфигурацииХранилища(Хранилище));

	Текст = СтрЗаменить(Текст, "\", "\\");
	СохранитьТекст(Текст, ИмяФайла);

	Возврат ИмяФайла;

КонецФункции

Функция КаталогКонфигурации()

	Возврат "src\cf";

КонецФункции

Функция КаталогРасширения()

	Возврат "src\cfe";

КонецФункции

Функция ИмяПапкиGitХранилища(Хранилище) Экспорт

	Возврат ?(ЗначениеЗаполнено(Хранилище.БазовоеХранилище), Хранилище.БазовоеХранилище.ИмяПапкиGit, Хранилище.ИмяПапкиGit);

КонецФункции

Функция КаталогКонфигурацииХранилища(Хранилище) Экспорт
	Возврат ?(ЗначениеЗаполнено(Хранилище.БазовоеХранилище), СтрШаблон("%1\%2", КаталогРасширения(), Хранилище.ИмяПапкиGit), КаталогКонфигурации());
КонецФункции  

// Замечания по коммиту.
// 
// Параметры:
//  Коммит - СправочникСсылка.ИсторияХранилища
// 
// Возвращаемое значение:
//  Массив из см. ПустоеЗамечаниеКоммита - Замечания по коммиту
Функция ЗамечанияПоКоммиту(Коммит) Экспорт

	ЗамечанияПоКоммиту = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Коммит", Коммит);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХешиGitВерсийХранилища.Хеш КАК ХэшКоммита,
	|	ВЫБОР
	|		КОГДА ИсторияХранилища.Владелец.БазовоеХранилище = ЗНАЧЕНИЕ(Справочник.Хранилища.ПустаяСсылка)
	|			ТОГДА ИсторияХранилища.Владелец.ПроектGit.Код
	|		ИНАЧЕ ИсторияХранилища.Владелец.БазовоеХранилище.ПроектGit.Код
	|	КОНЕЦ КАК ИдентификаторПроектаГитЛаб
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХешиGitВерсийХранилища КАК ХешиGitВерсийХранилища
	|		ПО (ХешиGitВерсийХранилища.ВерсияХранилища = ИсторияХранилища.Ссылка)
	|ГДЕ
	|	ИсторияХранилища.Ссылка = &Коммит";

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	ПараметрыАдреса = Новый Структура("ИдентификаторПроектаГитЛаб, ХэшКоммита");
	ЗаполнитьЗначенияСвойств(ПараметрыАдреса, Выборка);

	ДанныеОтвета = АвтоматизированнаяПроверкаКода.ВыполнитьЗапросКGit("comments", ПараметрыАдреса);

	Если ДанныеОтвета.КодСостояния < 300 Тогда

		Для Каждого Комментарий Из ДанныеОтвета.Результат Цикл

			Замечание = ПустоеЗамечаниеКоммита();

			Замечание.Дата					= XMLЗначение(Тип("Дата"), Комментарий.created_at);
			Замечание.Автор					= Справочники.Пользователи.НайтиПоКоду(Комментарий.author.username);
			Замечание.АвторСтрокой			= Комментарий.author.username;
			Замечание.Замечание				= Комментарий.note;
			Замечание.ИмяОбъекта			= Комментарий.path;
			Замечание.НомерСтрокиОбъекта	= Комментарий.line;

			ЗамечанияПоКоммиту.Добавить(Замечание);

		КонецЦикла;

	Иначе

		ВызватьИсключение ДанныеОтвета.Тело;

	КонецЕсли;

	Возврат ЗамечанияПоКоммиту;

КонецФункции

// Пустое замечание коммита.
// 
// Возвращаемое значение:
//  Структура - Пустое замечание коммита:
// * Дата - Дата
// * Автор - СправочникСсылка.Пользователи
// * АвторСтрокой - Строка
// * Замечание - Строка
// * ИмяОбъекта - Строка
// * НомерСтрокиОбъекта - Число
Функция ПустоеЗамечаниеКоммита()

	ПустоеЗамечаниеКоммита = Новый Структура;
	ПустоеЗамечаниеКоммита.Вставить("Дата");
	ПустоеЗамечаниеКоммита.Вставить("Автор");
	ПустоеЗамечаниеКоммита.Вставить("АвторСтрокой");
	ПустоеЗамечаниеКоммита.Вставить("Замечание");
	ПустоеЗамечаниеКоммита.Вставить("ИмяОбъекта");
	ПустоеЗамечаниеКоммита.Вставить("НомерСтрокиОбъекта");

	Возврат ПустоеЗамечаниеКоммита;

КонецФункции

#КонецОбласти

#Область НайтиМетаданныеПозадаче

Функция ДанныеПоЗадаче(ЗадачаМетеор, ТолькоАктивные = Истина) Экспорт

	ДанныеПоЗадаче = ПустыеДанныеПоЗадаче();
	Если Не ЗначениеЗаполнено(ЗадачаМетеор) Тогда
		Возврат ДанныеПоЗадаче;
	КонецЕсли;

	Для Каждого Проект Из АктивныеПроектыЗадачи(ЗадачаМетеор, ТолькоАктивные) Цикл

		ДанныеПоЗадачеПроекта = ДанныеПоЗадачеПроекта(ЗадачаМетеор, Проект, ТолькоАктивные);

		Для Каждого Строка Из ДанныеПоЗадачеПроекта.ТаблицаОбъектов Цикл
			НоваяСтрока = ДанныеПоЗадаче.ТаблицаОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		Для Каждого Строка Из ДанныеПоЗадачеПроекта.Версии Цикл
			НоваяСтрока = ДанныеПоЗадаче.Версии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		Для Каждого Строка Из ДанныеПоЗадачеПроекта.ФайлыGit Цикл
			НоваяСтрока = ДанныеПоЗадаче.ФайлыGit.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;

	КонецЦикла;

	ДанныеПоЗадаче.ТаблицаОбъектов.Сортировать("ИмяОбъекта");
	ДанныеПоЗадаче.Версии.Сортировать("Дата Убыв");
	ДанныеПоЗадаче.ФайлыGit.Сортировать("Файл");

	Возврат ДанныеПоЗадаче;

КонецФункции

Процедура ОтобратьУжеДобавленные(ТаблицаОбъектов, Проект)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.Проект КАК Проект,
	|	ТаблицаОбъектов.ИмяОбъекта КАК ИмяОбъекта,
	|	ТаблицаОбъектов.ВидИзменения КАК ВидИзменения,
	|	ТаблицаОбъектов.Подсистемы КАК Подсистемы,
	|	ТаблицаОбъектов.Ответственные КАК Ответственные
	|ПОМЕСТИТЬ ТаблицаОбъектов
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удалены.ИмяОбъекта КАК ИмяОбъекта,
	|	МАКСИМУМ(Удалены.Ссылка.Код) КАК ПоследнийНомерУдаления
	|ПОМЕСТИТЬ УдаленныеОбъектыВРБ
	|ИЗ
	|	Справочник.ИсторияХранилища.Удалены КАК Удалены
	|ГДЕ
	|	Удалены.Ссылка.Владелец = &ХранилищеДляРБ
	|	И Удалены.ИмяОбъекта В
	|			(ВЫБРАТЬ
	|				ТаблицаОбъектов.ИмяОбъекта
	|			ИЗ
	|				ТаблицаОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Удалены.ИмяОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Добавлены.ИмяОбъекта КАК ИмяОбъекта
	|ПОМЕСТИТЬ ОбъектыВРБ
	|ИЗ
	|	Справочник.ИсторияХранилища.Добавлены КАК Добавлены
	|		ЛЕВОЕ СОЕДИНЕНИЕ УдаленныеОбъектыВРБ КАК УдаленныеОбъектыВРБ
	|		ПО Добавлены.ИмяОбъекта = УдаленныеОбъектыВРБ.ИмяОбъекта
	|ГДЕ
	|	Добавлены.Ссылка.Владелец = &ХранилищеДляРБ
	|	И Добавлены.ИмяОбъекта В
	|			(ВЫБРАТЬ
	|				ТаблицаОбъектов.ИмяОбъекта
	|			ИЗ
	|				ТаблицаОбъектов)
	|	И Добавлены.Ссылка.Код > ЕСТЬNULL(УдаленныеОбъектыВРБ.ПоследнийНомерУдаления, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Проект КАК Проект,
	|	ТаблицаОбъектов.ИмяОбъекта КАК ИмяОбъекта,
	|	ТаблицаОбъектов.ВидИзменения КАК ВидИзменения,
	|	ТаблицаОбъектов.Подсистемы КАК Подсистемы,
	|	ТаблицаОбъектов.Ответственные КАК Ответственные
	|ИЗ
	|	ТаблицаОбъектов КАК ТаблицаОбъектов
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТаблицаОбъектов.ВидИзменения = ЗНАЧЕНИЕ(Перечисление.ВидыИзменений.Добавлено)
	|				ТОГДА НЕ ТаблицаОбъектов.ИмяОбъекта В
	|							(ВЫБРАТЬ
	|								ОбъектыВРБ.ИмяОбъекта
	|							ИЗ
	|								ОбъектыВРБ)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Запрос.УстановитьПараметр("ХранилищеДляРазработки", Проект.ХранилищеРазработки);
	Запрос.УстановитьПараметр("ХранилищеДляРБ", Проект.ХранилищеОбновления);

	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

Процедура ДобавитьОбъекты(Выборка, ИмяКоллекции, ВидИзменения, ВсеИзменения)

	ВыборкаДетальныеЗаписи = Выборка[ИмяКоллекции].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		НоваяСтрока = ВсеИзменения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.ВидИзменения = ВидИзменения;

	КонецЦикла;

КонецПроцедуры

Функция ДанныеПоЗадачеПроекта(ЗадачаМетеор, Проект, ТолькоАктивные = Ложь) Экспорт

	ДанныеПоЗадаче = ПустыеДанныеПоЗадаче();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияХранилища.Ссылка КАК ВерсияХранилища
	|ПОМЕСТИТЬ ВерсииПоЗадаче
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
	|		ПО ИсторияХранилища.Ссылка = ЗадачиМетеорВерсийХранилища.ВерсияХранилища
	|		И (ЗадачиМетеорВерсийХранилища.ЗадачаМетеор = &ЗадачаМетеор)
	|		И (ИсторияХранилища.Владелец = &Владелец)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененияСвойствОбъектовМетаданных.ВерсияХранилища КАК ВерсияХранилища,
	|	ИзмененияСвойствОбъектовМетаданных.ВидИзменения КАК ВидИзменения,
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ПОМЕСТИТЬ КоличествоИзмененийПоВидуИзменения
	|ИЗ
	|	РегистрСведений.ИзмененияСвойствОбъектовМетаданных КАК ИзмененияСвойствОбъектовМетаданных
	|ГДЕ
	|	ИзмененияСвойствОбъектовМетаданных.ВерсияХранилища В
	|		(ВЫБРАТЬ
	|			ВерсииПоЗадаче.ВерсияХранилища КАК ВерсияХранилища
	|		ИЗ
	|			ВерсииПоЗадаче КАК ВерсииПоЗадаче)
	|СГРУППИРОВАТЬ ПО
	|	ИзмененияСвойствОбъектовМетаданных.ВерсияХранилища,
	|	ИзмененияСвойствОбъектовМетаданных.ВидИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзменеияСвойствОбъектовВерсий.ВерсияХранилища КАК ВерсияХранилища,
	|	СУММА(ИзменеияСвойствОбъектовВерсий.Изменены) КАК Изменены,
	|	СУММА(ИзменеияСвойствОбъектовВерсий.Добавлены) КАК Добавлены,
	|	СУММА(ИзменеияСвойствОбъектовВерсий.Удалены) КАК Удалены
	|ПОМЕСТИТЬ ИзмененияПоВерсиям
	|ИЗ
	|	(ВЫБРАТЬ
	|		КоличествоИзмененийПоВидуИзменения.ВерсияХранилища КАК ВерсияХранилища,
	|		КоличествоИзмененийПоВидуИзменения.Количество КАК Изменены,
	|		0 КАК Добавлены,
	|		0 КАК Удалены
	|	ИЗ
	|		КоличествоИзмененийПоВидуИзменения КАК КоличествоИзмененийПоВидуИзменения
	|	ГДЕ
	|		КоличествоИзмененийПоВидуИзменения.ВидИзменения = ""Изменены""
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		КоличествоИзмененийПоВидуИзменения.ВерсияХранилища,
	|		0,
	|		КоличествоИзмененийПоВидуИзменения.Количество,
	|		0
	|	ИЗ
	|		КоличествоИзмененийПоВидуИзменения КАК КоличествоИзмененийПоВидуИзменения
	|	ГДЕ
	|		КоличествоИзмененийПоВидуИзменения.ВидИзменения = ""Добавлены""
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		КоличествоИзмененийПоВидуИзменения.ВерсияХранилища,
	|		0,
	|		0,
	|		КоличествоИзмененийПоВидуИзменения.Количество
	|	ИЗ
	|		КоличествоИзмененийПоВидуИзменения КАК КоличествоИзмененийПоВидуИзменения
	|	ГДЕ
	|		КоличествоИзмененийПоВидуИзменения.ВидИзменения = ""Удалены"") КАК ИзменеияСвойствОбъектовВерсий
	|СГРУППИРОВАТЬ ПО
	|	ИзменеияСвойствОбъектовВерсий.ВерсияХранилища
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьПолученияИзмененийОбъектовВерсийХранилищаСрезПоследних.ВерсияХранилища КАК ВерсияХранилища,
	|	ОчередьПолученияИзмененийОбъектовВерсийХранилищаСрезПоследних.Статус КАК Статус
	|ПОМЕСТИТЬ СтатусОбработкиИзменений
	|ИЗ
	|	РегистрСведений.ОчередьПолученияИзмененийОбъектовВерсийХранилища.СрезПоследних(, ВерсияХранилища В
	|		(ВЫБРАТЬ
	|			ВерсииПоЗадаче.ВерсияХранилища КАК ВерсияХранилища
	|		ИЗ
	|			ВерсииПоЗадаче КАК ВерсииПоЗадаче)) КАК ОчередьПолученияИзмененийОбъектовВерсийХранилищаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныйПериод.Период КАК Период,
	|	МаксимальныйПериод.ВерсияХранилища КАК ВерсияХранилища,
	|	МаксимальныйПериод.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная,
	|	СтатусыВерсийХранилища.Период КАК Период1,
	|	СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища1,
	|	СтатусыВерсийХранилища.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная1,
	|	СтатусыВерсийХранилища.Статус КАК Статус,
	|	СтатусыВерсийХранилища.Ответственный КАК Ответственный,
	|	СтатусыВерсийХранилища.Процесс КАК Процесс,
	|	СтатусыВерсийХранилища.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ СтатусыВерсийХранилищаСрезПоследних
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(СтатусыВерсийХранилища.Период) КАК Период,
	|		СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
	|		МАКСИМУМ(СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК ДатаЗаписиУниверсальная
	|	ИЗ
	|		РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВерсииПоЗадаче
	|			ПО СтатусыВерсийХранилища.ВерсияХранилища = ВерсииПоЗадаче.ВерсияХранилища
	|	ГДЕ
	|		ИСТИНА
	|	СГРУППИРОВАТЬ ПО
	|		СтатусыВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|		ПО МаксимальныйПериод.ВерсияХранилища = СтатусыВерсийХранилища.ВерсияХранилища
	|		И МаксимальныйПериод.Период = СтатусыВерсийХранилища.Период
	|		И МаксимальныйПериод.ДатаЗаписиУниверсальная = СтатусыВерсийХранилища.ДатаЗаписиУниверсальная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыВерсийХранилищаСрезПоследних.ВерсияХранилища КАК ВерсияХранилища,
	|	ПредварительнаяПроверка.Проверил_ПроверкаКода КАК Проверил_ПроверкаКода
	|ПОМЕСТИТЬ ПредварительнаяПроверкаОтветственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		МаксимальныйПериод.Период КАК Период,
	|		МаксимальныйПериод.ВерсияХранилища КАК ВерсияХранилища,
	|		МаксимальныйПериод.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная,
	|		СтатусыВерсийХранилища.Период КАК Период1,
	|		СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища1,
	|		СтатусыВерсийХранилища.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная1,
	|		СтатусыВерсийХранилища.Статус КАК Статус,
	|		СтатусыВерсийХранилища.Ответственный КАК Ответственный,
	|		СтатусыВерсийХранилища.Процесс КАК Процесс,
	|		СтатусыВерсийХранилища.Комментарий КАК Комментарий
	|	ИЗ
	|		(ВЫБРАТЬ
	|			МАКСИМУМ(СтатусыВерсийХранилища.Период) КАК Период,
	|			СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
	|			МАКСИМУМ(СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК ДатаЗаписиУниверсальная
	|		ИЗ
	|			РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВерсииПоЗадаче
	|				ПО СтатусыВерсийХранилища.ВерсияХранилища = ВерсииПоЗадаче.ВерсияХранилища
	|		ГДЕ
	|			СтатусыВерсийХранилища.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.СогласованиеПереноса)
	|		СГРУППИРОВАТЬ ПО
	|			СтатусыВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|			ПО МаксимальныйПериод.ВерсияХранилища = СтатусыВерсийХранилища.ВерсияХранилища
	|			И МаксимальныйПериод.Период = СтатусыВерсийХранилища.Период
	|			И МаксимальныйПериод.ДатаЗаписиУниверсальная = СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК
	|		СтатусыВерсийХранилищаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.ПредварительнаяПроверка КАК ПредварительнаяПроверка
	|		ПО СтатусыВерсийХранилищаСрезПоследних.Процесс = ПредварительнаяПроверка.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияХранилища.Ссылка КАК Коммит,
	|	ИсторияХранилища.Изменены.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ИмяОбъекта КАК ИмяОбъекта) КАК Изменены,
	|	ИсторияХранилища.Добавлены.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ИмяОбъекта КАК ИмяОбъекта) КАК Добавлены,
	|	ИсторияХранилища.Удалены.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ИмяОбъекта КАК ИмяОбъекта) КАК Удалены,
	|	ИсторияХранилища.Дата КАК Дата,
	|	ИсторияХранилища.Код КАК Номер,
	|	СтатусыВерсийХранилищаСрезПоследних.Статус КАК Статус,
	|	ЕСТЬNULL(Пользователи.Ссылка, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Разработчик,
	|	ВЫБОР
	|		КОГДА ИсторияХранилища.Владелец.БазовоеХранилище = ЗНАЧЕНИЕ(Справочник.Хранилища.ПустаяСсылка)
	|			ТОГДА ИсторияХранилища.Владелец.ПроектGit.СсылкаURL
	|		ИНАЧЕ ИсторияХранилища.Владелец.БазовоеХранилище.ПроектGit.СсылкаURL
	|	КОНЕЦ КАК URLGit,
	|	ХешиGitВерсийХранилища.Хеш КАК ХешGit,
	|	(ЕСТЬNULL(РезультатыСинтаксическойПроверки.ПровереноАПК, ЛОЖЬ)
	|	ИЛИ ЕСТЬNULL(ПоказателиВерсийХранилища.ПроверкаКодаВручную, ЛОЖЬ))
	|	И НЕ ВерсииПоЗадаче.ВерсияХранилища ЕСТЬ NULL
	|	И НЕ ХешиGitВерсийХранилища.ВерсияХранилища ЕСТЬ NULL КАК ДанныеЗагружены,
	|	ЕСТЬNULL(ПоказателиВерсийХранилища.ДанныеЗагружены_Автотесты, ЛОЖЬ) КАК ДанныеЗагружены_Автотесты,
	|	ЕСТЬNULL(РезультатыСинтаксическойПроверки.ПровереноАПК, ЛОЖЬ) КАК ДанныеЗагружены_ОшибокАПК,
	|	ЕСТЬNULL(РезультатыСинтаксическойПроверки.КоличествоОшибокАПК, 0) КАК ОшибокАПК,
	|	ЕСТЬNULL(РезультатыСинтаксическойПроверки.ПровереноBSLLS, ЛОЖЬ) КАК ПровереноBSLLS,
	|	ЕСТЬNULL(РезультатыСинтаксическойПроверки.КоличествоОшибокBSL_LS, 0) КАК КоличествоОшибокBSL_LS,
	|	ИсторияХранилища.ФайлыGit.(
	|		Файл КАК Файл,
	|		Владелец КАК Хранилище,
	|		ВЫБОР
	|			КОГДА ИсторияХранилища.Владелец.БазовоеХранилище = ЗНАЧЕНИЕ(Справочник.Хранилища.ПустаяСсылка)
	|				ТОГДА ИсторияХранилища.Владелец.ПроектGit.СсылкаURL
	|			ИНАЧЕ ИсторияХранилища.Владелец.БазовоеХранилище.ПроектGit.СсылкаURL
	|		КОНЕЦ + ""/-/blob/master/"" КАК Префикс) КАК ФайлыGit,
	|	ПредварительнаяПроверкаОтветственный.Проверил_ПроверкаКода КАК Проверил,
	|	ЕСТЬNULL(ИзмененияПоВерсиям.Изменены, 0) КАК СвойстваИзменены,
	|	ЕСТЬNULL(ИзмененияПоВерсиям.Добавлены, 0) КАК СвойстваДобавлены,
	|	ЕСТЬNULL(ИзмененияПоВерсиям.Удалены, 0) КАК СвойстваУдалены,
	|	СтатусОбработкиИзменений.Статус КАК СтатусЗагрузкиИзменений,
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(СтатусОбработкиИзменений.Статус, ""Нет в очереди"")) КАК СтатусЗагрузкиИзмененийПредставление
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВерсииПоЗадаче КАК ВерсииПоЗадаче
	|		ПО ИсторияХранилища.Ссылка = ВерсииПоЗадаче.ВерсияХранилища
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ИсторияХранилища.Автор = Пользователи.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХешиGitВерсийХранилища КАК ХешиGitВерсийХранилища
	|		ПО ИсторияХранилища.Ссылка = ХешиGitВерсийХранилища.ВерсияХранилища
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиВерсийХранилища КАК ПоказателиВерсийХранилища
	|		ПО ИсторияХранилища.Ссылка = ПоказателиВерсийХранилища.ВерсияХранилища
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыСинтаксическойПроверки КАК РезультатыСинтаксическойПроверки
	|		ПО ИсторияХранилища.Ссылка = РезультатыСинтаксическойПроверки.ОбъектПроверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыВерсийХранилищаСрезПоследних КАК СтатусыВерсийХранилищаСрезПоследних
	|		ПО ИсторияХранилища.Ссылка = СтатусыВерсийХранилищаСрезПоследних.ВерсияХранилища
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПредварительнаяПроверкаОтветственный КАК ПредварительнаяПроверкаОтветственный
	|		ПО ИсторияХранилища.Ссылка = ПредварительнаяПроверкаОтветственный.ВерсияХранилища
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененияПоВерсиям КАК ИзмененияПоВерсиям
	|		ПО ИсторияХранилища.Ссылка = ИзмененияПоВерсиям.ВерсияХранилища
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусОбработкиИзменений КАК СтатусОбработкиИзменений
	|		ПО ИсторияХранилища.Ссылка = СтатусОбработкиИзменений.ВерсияХранилища
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер УБЫВ";
	Запрос.УстановитьПараметр("Владелец", Проект.ХранилищеРазработки);
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ТолькоАктивные И Выборка.Статус = Перечисления.СтатусыИсторииХранилищ.Перенесено Тогда
			Продолжить;
		КонецЕсли;

		Если Не Выборка.Статус = Перечисления.СтатусыИсторииХранилищ.Перенесено Тогда
			ДобавитьОбъекты(Выборка, "Добавлены", Перечисления.ВидыИзменений.Добавлено, ДанныеПоЗадаче.ТаблицаОбъектов);
			ДобавитьОбъекты(Выборка, "Изменены", Перечисления.ВидыИзменений.Изменено, ДанныеПоЗадаче.ТаблицаОбъектов);
			ДобавитьОбъекты(Выборка, "Удалены", Перечисления.ВидыИзменений.Удалено, ДанныеПоЗадаче.ТаблицаОбъектов);
			ДобавитьОбъекты(Выборка, "ФайлыGit", Перечисления.ВидыИзменений.ПустаяСсылка(), ДанныеПоЗадаче.ФайлыGit);
		КонецЕсли;

		НоваяСтрока = ДанныеПоЗадаче.Версии.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ХэшGitСокр = Выборка.ХешGit;
		НоваяСтрока.URLGit = Справочники.ИсторияХранилища.URLGit(Выборка.Коммит);
		НоваяСтрока.URLAllure = Справочники.ИсторияХранилища.URLAllure(Выборка.Коммит);
		НоваяСтрока.URLJUnit = Справочники.ИсторияХранилища.URLJUnit(Выборка.Коммит);
		Если Выборка.СтатусЗагрузкиИзменений = Перечисления.СтатусыОперацийОбработкиОчереди.Обработано Тогда
			ИзмененияСвойств = СтрШаблон("%1; +%2; -%3",
				Формат(Выборка.СвойстваИзменены, "ЧН=0"),
				Формат(Выборка.СвойстваДобавлены, "ЧН=0"),
				Формат(Выборка.СвойстваУдалены, "ЧН=0"));
		Иначе
			ИзмененияСвойств = СтрШаблон("Не получено (%1)", Выборка.СтатусЗагрузкиИзмененийПредставление);
		КонецЕсли;
		НоваяСтрока.ИзмененияСвойств = ИзмененияСвойств;

	КонецЦикла;

	ДанныеПоЗадаче.ТаблицаОбъектов.Свернуть("Проект, ИмяОбъекта, ВидИзменения, Подсистемы, Ответственные");
	ОтобратьУжеДобавленные(ДанныеПоЗадаче.ТаблицаОбъектов, Проект);

	ДанныеПоЗадаче.ТаблицаОбъектов.ЗаполнитьЗначения(Проект, "Проект");
	ДанныеПоЗадаче.Версии.ЗаполнитьЗначения(Проект, "Проект");

	ДанныеПоЗадаче.ФайлыGit.Свернуть("Файл, Префикс");
	
	ЗаполнитьПодсистемыПраваИОтветственныхПоОбъектам(Проект, ДанныеПоЗадаче.ТаблицаОбъектов);

	Возврат ДанныеПоЗадаче;

КонецФункции

Функция ПустыеДанныеПоЗадаче() Экспорт

	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Проект",			Новый ОписаниеТипов("СправочникСсылка.Конфигурации"));
	ТаблицаОбъектов.Колонки.Добавить("ИмяОбъекта",		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(300)));
	ТаблицаОбъектов.Колонки.Добавить("ВидИзменения",	Новый ОписаниеТипов("ПеречислениеСсылка.ВидыИзменений"));
	ТаблицаОбъектов.Колонки.Добавить("Подсистемы",		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1024)));
	ТаблицаОбъектов.Колонки.Добавить("Ответственные",	Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1024)));
	ТаблицаОбъектов.Колонки.Добавить("ОбъектМетаданных",Новый ОписаниеТипов("СправочникСсылка.ОбъектыМетаданных"));
	ТаблицаОбъектов.Колонки.Добавить("КоличествоРолей",	Новый ОписаниеТипов("Число"));
	ТаблицаОбъектов.Колонки.Добавить("НеобходимыРоли",	Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектов.Индексы.Добавить("ИмяОбъекта");

	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Файл", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(500)));
	ТаблицаФайлов.Колонки.Добавить("Префикс", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(500)));
	ТаблицаФайлов.Колонки.Добавить("Хранилище", Новый ОписаниеТипов("СправочникСсылка.Хранилища"));
	ТаблицаФайлов.Колонки.Добавить("ВидИзменения", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыИзменений"));

	Версии = Новый ТаблицаЗначений;
	Версии.Колонки.Добавить("Проект", Новый ОписаниеТипов("СправочникСсылка.Конфигурации, СправочникСсылка.ПроектыGIT"));
	Версии.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(9, 0, ДопустимыйЗнак.Неотрицательный)));
	Версии.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	Версии.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыИсторииХранилищ"));
	Версии.Колонки.Добавить("Коммит", Новый ОписаниеТипов("СправочникСсылка.ИсторияХранилища"));
	Версии.Колонки.Добавить("Разработчик", Новый ОписаниеТипов(ОбщегоНазначения.ОписаниеТипаСтрока(20), "СправочникСсылка.Пользователи"));
	Версии.Колонки.Добавить("ХэшGitСокр", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(8)));
	Версии.Колонки.Добавить("URLGit", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(300)));
	Версии.Колонки.Добавить("ДанныеЗагружены", Новый ОписаниеТипов("Булево"));
	Версии.Колонки.Добавить("ДанныеЗагружены_ОшибокАПК", Новый ОписаниеТипов("Булево"));
	Версии.Колонки.Добавить("ДанныеЗагружены_Автотесты", Новый ОписаниеТипов("Булево"));
	Версии.Колонки.Добавить("ОшибокАПК", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	Версии.Колонки.Добавить("ОшибокАвтотесты", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	Версии.Колонки.Добавить("URLAllure", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(300)));
	Версии.Колонки.Добавить("URLJUnit", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(300)));
	Версии.Колонки.Добавить("Проверил", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Версии.Колонки.Добавить("ПровереноBSLLS", Новый ОписаниеТипов("Булево"));
	Версии.Колонки.Добавить("КоличествоОшибокBSL_LS", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	Версии.Колонки.Добавить("ИзмененияСвойств", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	
	Возврат Новый Структура("ТаблицаОбъектов, Версии, ФайлыGit", ТаблицаОбъектов, Версии, ТаблицаФайлов);

КонецФункции

#КонецОбласти

Процедура ЗаписатьЗадачуВерсииХранилища(ВерсияХранилища, ЗадачаМетеор) Экспорт
	Менеджер = РегистрыСведений.ЗадачиМетеорВерсийХранилища.СоздатьМенеджерЗаписи();
	Менеджер.ВерсияХранилища = ВерсияХранилища;
	Менеджер.ЗадачаМетеор = ЗадачаМетеор;
	Менеджер.Записать();
	ПересчитатьИЗаписатьСтатусВерсииХранилища(ВерсияХранилища);
КонецПроцедуры

Процедура ЗаписатьРезультатПроверкиАпкВерсииХранилища(ВерсияХранилища, КоличествоОшибок) Экспорт
	Набор = РегистрыСведений.РезультатыСинтаксическойПроверки.СоздатьНаборЗаписей();
	Набор.Отбор.ОбъектПроверки.Установить(ВерсияХранилища);
	Набор.Прочитать();
	Если Набор.Количество() Тогда
		Запись = Набор[0];
	Иначе
		Запись = Набор.Добавить();
	КонецЕсли;
	Запись.ОбъектПроверки = ВерсияХранилища;
	Запись.КоличествоОшибокАПК = КоличествоОшибок;
	Запись.ПровереноАПК = Истина;
	
	НачатьТранзакцию();
	Набор.Записать();
	ПересчитатьИЗаписатьСтатусВерсииХранилища(ВерсияХранилища);
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура ЗаписатьХешGitВерсииХранилища(ВерсияХранилища, ХешGit) Экспорт
	Менеджер = РегистрыСведений.ХешиGitВерсийХранилища.СоздатьМенеджерЗаписи();
	Менеджер.ВерсияХранилища = ВерсияХранилища;
	Менеджер.Хеш = ХешGit;
	Менеджер.Записать();
	ПересчитатьИЗаписатьСтатусВерсииХранилища(ВерсияХранилища);
КонецПроцедуры

Процедура ЗаписатьСтатусВерсииХранилища(ВерсияХранилища, Статус, Комментарий = "", Процесс = Неопределено) Экспорт
	Менеджер = РегистрыСведений.СтатусыВерсийХранилища.СоздатьМенеджерЗаписи();
	Менеджер.Период = ТекущаяДатаСеанса();
	Менеджер.ВерсияХранилища = ВерсияХранилища;
	Менеджер.ДатаЗаписиУниверсальная = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Менеджер.Статус = Статус;
	Менеджер.Ответственный = Пользователи.ТекущийПользователь();
	Менеджер.Процесс = Процесс;
	Менеджер.Комментарий = Комментарий;
	Менеджер.Записать(Ложь);
КонецПроцедуры

Процедура ЗаписатьПоказателиВерсииХранилища(ВерсияХранилища, ПоказателиВерсии) Экспорт
	Менеджер = РегистрыСведений.ПоказателиВерсийХранилища.СоздатьМенеджерЗаписи();
	Менеджер.ВерсияХранилища = ВерсияХранилища;
	Менеджер.Прочитать();
	Менеджер.ВерсияХранилища = ВерсияХранилища;
	ЗаполнитьЗначенияСвойств(Менеджер, ПоказателиВерсии);
	Менеджер.Записать();
	ПересчитатьИЗаписатьСтатусВерсииХранилища(ВерсияХранилища);
КонецПроцедуры

Процедура ПересчитатьИЗаписатьСтатусВерсииХранилища(ВерсияХранилища) Экспорт
	
//	Для определения статуса исходя из текущего состава загруженных данных по версии.
//  Т.е. статус изменится только если все сопутствующие данные загружены. (Ошибки АПК, Хеш, ЗадачаМетеор, ПроверкаВручную)
//	Статус проверки АПК используется только для хранилищ, у которых установлен реквизит НомерВАПК.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатусыВерсийХранилищаСрезПоследних.ВерсияХранилища КАК ВерсияХранилища,
		|	СтатусыВерсийХранилищаСрезПоследних.Статус КАК Статус
		|ПОМЕСТИТЬ ТекущийСтатус
		|ИЗ
		|	(ВЫБРАТЬ
		|		СтатусыВерсийХранилища.Период КАК Период,
		|		СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
		|		СтатусыВерсийХранилища.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная,
		|		СтатусыВерсийХранилища.Статус КАК Статус,
		|		СтатусыВерсийХранилища.Ответственный КАК Ответственный,
		|		СтатусыВерсийХранилища.Процесс КАК Процесс,
		|		СтатусыВерсийХранилища.Комментарий КАК Комментарий
		|	ИЗ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(СтатусыВерсийХранилища.Период) КАК Период,
		|			СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища
		|		ИЗ
		|			РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
		|		ГДЕ
		|			СтатусыВерсийХранилища.ВерсияХранилища = &ВерсияХранилища
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СтатусыВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
		|			ПО МаксимальныйПериод.ВерсияХранилища = СтатусыВерсийХранилища.ВерсияХранилища
		|				И МаксимальныйПериод.Период = СтатусыВерсийХранилища.Период) КАК СтатусыВерсийХранилищаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияХранилища.Ссылка КАК ВерсияХранилища,
		|	ЕСТЬNULL(ТекущийСтатус.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.ПустаяСсылка)) КАК ТекущийСтатус,
		|	ЕСТЬNULL(ПоказателиВерсийХранилища.ПроверкаКодаВручную, ЛОЖЬ) КАК ПроверкаКодаВручную,
		|	НЕ ЗадачиМетеорВерсийХранилища.ЗадачаМетеор ЕСТЬ NULL КАК ЗадачаМетеорЗагружена,
		|	ВЫБОР
		|		КОГДА ИсторияХранилища.Владелец.НомерВАПК = """"
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЕСТЬNULL(РезультатыСинтаксическойПроверки.ПровереноАПК, ЛОЖЬ)
		|	КОНЕЦ КАК ПровереноАПК,
		|	НЕ ХешиGitВерсийХранилища.ВерсияХранилища ЕСТЬ NULL КАК ХешЗагружен
		|ИЗ
		|	Справочник.ИсторияХранилища КАК ИсторияХранилища
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущийСтатус КАК ТекущийСтатус
		|		ПО ИсторияХранилища.Ссылка = ТекущийСтатус.ВерсияХранилища
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
		|		ПО ИсторияХранилища.Ссылка = ЗадачиМетеорВерсийХранилища.ВерсияХранилища
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиВерсийХранилища КАК ПоказателиВерсийХранилища
		|		ПО ИсторияХранилища.Ссылка = ПоказателиВерсийХранилища.ВерсияХранилища
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыСинтаксическойПроверки КАК РезультатыСинтаксическойПроверки
		|		ПО (РезультатыСинтаксическойПроверки.ОбъектПроверки = ИсторияХранилища.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХешиGitВерсийХранилища КАК ХешиGitВерсийХранилища
		|		ПО (ХешиGitВерсийХранилища.ВерсияХранилища = ИсторияХранилища.Ссылка)
		|ГДЕ
		|	ИсторияХранилища.Ссылка = &ВерсияХранилища";	
	Запрос.УстановитьПараметр("ВерсияХранилища", ВерсияХранилища);	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Выборка.ТекущийСтатус) Тогда
		ЗаписатьСтатусВерсииХранилища(ВерсияХранилища, Перечисления.СтатусыИсторииХранилищ.ЗагрузкаДанных);
		Возврат;
	КонецЕсли;
	Если Не (Выборка.ТекущийСтатус = Перечисления.СтатусыИсторииХранилищ.ЗагрузкаДанных
			Или Выборка.ТекущийСтатус = Перечисления.СтатусыИсторииХранилищ.Ошибка)Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗагружены = 
		(Выборка.ПровереноАПК Или Выборка.ПроверкаКодаВручную)
		И Выборка.ЗадачаМетеорЗагружена
		И Выборка.ХешЗагружен;
	
	Если Не ДанныеЗагружены Тогда
		Возврат;
	КонецЕсли;
	ЗаписатьСтатусВерсииХранилища(ВерсияХранилища, БизнесПроцессы.ПредварительнаяПроверка.ОсновнойСтатус());
	Мониторинг.ЗаписатьМониторингОперации(
		Справочники.КлючевыеОперацииМониторинга.ЗагрузкаИОбработкаВерсииИсторииХранилища,
		ВерсияХранилища,
		Перечисления.ЭтапыОперацийМониторинга.Завершение,
		,
		,
		ПолучитьДлительностьЗагрузкиИОбработки(ВерсияХранилища)
		);

КонецПроцедуры

Функция ПолучитьДлительностьЗагрузкиИОбработки(ВерсияХранилища)
	ДлительностьОперации = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЖурналМониторинга.ДатаЗаписиУниверсальная) КАК ДатаЗаписиУниверсальная
		|ИЗ
		|	РегистрСведений.ЖурналМониторинга КАК ЖурналМониторинга
		|ГДЕ
		|	ЖурналМониторинга.КлючеваяОперация = &КлючеваяОперация
		|	И ЖурналМониторинга.Идентификатор = &Идентификатор
		|	И ЖурналМониторинга.Этап = &ЭтапНачало
		|
		|ИМЕЮЩИЕ
		|	НЕ МАКСИМУМ(ЖурналМониторинга.ДатаЗаписиУниверсальная) ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Идентификатор", ВерсияХранилища);
	Запрос.УстановитьПараметр("КлючеваяОперация", Справочники.КлючевыеОперацииМониторинга.ЗагрузкаИОбработкаВерсииИсторииХранилища);
	Запрос.УстановитьПараметр("ЭтапНачало", Перечисления.ЭтапыОперацийМониторинга.Начало);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДлительностьОперации = Окр((ТекущаяУниверсальнаяДатаВМиллисекундах() - ВыборкаДетальныеЗаписи.ДатаЗаписиУниверсальная) / 1000);
	КонецЕсли;
	Возврат ДлительностьОперации;
КонецФункции

Функция СформироватьВеткуГитСравненияВерсий(Хранилище, ЗадачаМетеор) Экспорт
	
	ЗаписыватьЛог = Истина;
	
	РезультатФормирования = Новый Структура("ИмяВетки, ХешНачалаВетки, ХешОкончанияВетки, КрайняяВерсияИсторииХранилища", "", "", "", Справочники.ИсторияХранилища.ПустаяСсылка());
	ИмяВетки = СтрШаблон("%1_diff", ЗадачаМетеор.id);
	РезультатФормирования.ИмяВетки = ИмяВетки;
	ИмяПапкиХранилища = ИмяПапкиGitХранилища(Хранилище);
	КаталогРепозиторияСравнения = 
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Константы.КаталогРепозиториевСравненияИзменений.Получить()) +
		ИмяПапкиХранилища;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиМетеорВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
		|	ХешиGitВерсийХранилища.Хеш КАК Хеш,
		|	ЗадачиМетеорВерсийХранилища.ВерсияХранилища.Код КАК ВерсияХранилищаКод,
		|	ХешиGitВерсийХранилищаПредыдущие.Хеш КАК ХешПредыдущий
		|ИЗ
		|	РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ХешиGitВерсийХранилища КАК ХешиGitВерсийХранилища
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХешиGitВерсийХранилища КАК ХешиGitВерсийХранилищаПредыдущие
		|			ПО ХешиGitВерсийХранилища.ВерсияХранилища.Владелец = ХешиGitВерсийХранилищаПредыдущие.ВерсияХранилища.Владелец
		|				И (ХешиGitВерсийХранилища.ВерсияХранилища.Код - 1 = ХешиGitВерсийХранилищаПредыдущие.ВерсияХранилища.Код)
		|		ПО ЗадачиМетеорВерсийХранилища.ВерсияХранилища = ХешиGitВерсийХранилища.ВерсияХранилища
		|ГДЕ
		|	ЗадачиМетеорВерсийХранилища.ЗадачаМетеор = &ЗадачаМетеор
		|	И ЗадачиМетеорВерсийХранилища.ВерсияХранилища.Владелец = &Хранилище
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсияХранилищаКод";
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
	Запрос.УстановитьПараметр("Хранилище", Хранилище);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат РезультатФормирования;
	КонецЕсли;
	// Для создания одного коммита на все изменения
	//ШаблонСкрипта =
	//	"chcp 65001
	//	|[КомандаВключенияРежимаОтладки]
	//	|Set-Location -Path ""[КаталогРепозиторияСравнения]""
	//	|git checkout master
	//	|git pull
	//	|git branch -D ""[ИмяВетки]""
	//	|$sharev=git rev-parse [ХешПервогоКоммита]~1
	//	|if ((git branch ""[ИмяВетки]"" $sharev)) {exit 1}
	//	|git checkout ""[ИмяВетки]""
	//	|[КомандыКопированияИзменений]
	//	|git commit -m ""[ИмяВетки]""
	//	|git rev-parse HEAD > [ИмяФайлаРезультата]
	//	|git push
	//	|";
	//ШаблонКомандыКопированияИзменений = 
	//	"git cherry-pick --no-commit %1
	//	|git add .";
	
	// Для копирования отдельных коммитов.
	// Устанавливаем стратегию приоритета получаемых измеенний theirs
	ШаблонСкрипта =
		"$ErrorActionPreference = ""Stop""
		|[КомандаВключенияРежимаОтладки]
		|Set-Location -Path ""[КаталогРепозиторияСравнения]""
		|git checkout master
		|git pull
		|git branch -D ""[ИмяВетки]""
		|git branch ""[ИмяВетки]"" [ХешНачалаВетки]
		|git checkout ""[ИмяВетки]""
		|if (!(git status | Select-String -Pattern 'On branch [ИмяВетки]' -SimpleMatch -Quiet)) {Write-Error ""Не найдена ветка сравнения. Ошибка при создании ветки."" -ErrorAction:Stop}
		|[КомандыКопированияИзменений]
		|git rev-parse HEAD > [ИмяФайлаРезультата]
		|git push -u origin ""[ИмяВетки]""
		|";
	ШаблонКомандыКопированияИзменений = 
		"git cherry-pick --strategy=subtree --strategy-option=theirs --allow-empty-message --no-edit %1
		|if (git status | Select-String -Pattern 'You are currently cherry-picking commit' -SimpleMatch -Quiet) {git add . ; git -c core.editor=true cherry-pick --continue}
		|";
		// add и cherry-pick --continue - если не удалось смержить автоматически.
	
	КомандыКопированияИзменений = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() < 2 Тогда
		Возврат РезультатФормирования;
	КонецЕсли;
	Выборка.Следующий();
	РезультатФормирования.ХешНачалаВетки = Выборка.ХешПредыдущий;
	ХешПервогоКоммита = Выборка.Хеш;
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		КомандыКопированияИзменений.Добавить(СтрШаблон(ШаблонКомандыКопированияИзменений, Выборка.Хеш));
	КонецЦикла;
	РезультатФормирования.КрайняяВерсияИсторииХранилища = Выборка.ВерсияХранилища;
	
	ИмяФайлаСкрипта = ПолучитьИмяВременногоФайла("ps1");
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	
	ПараметрыСкрипта = Новый Структура();
	ПараметрыСкрипта.Вставить("КаталогРепозиторияСравнения", КаталогРепозиторияСравнения);
	ПараметрыСкрипта.Вставить("ИмяВетки", ИмяВетки);
	ПараметрыСкрипта.Вставить("ХешПервогоКоммита", ХешПервогоКоммита);
	ПараметрыСкрипта.Вставить("ХешНачалаВетки", РезультатФормирования.ХешНачалаВетки);
	ПараметрыСкрипта.Вставить("КомандыКопированияИзменений", СтрСоединить(КомандыКопированияИзменений, Символы.ПС));
	ПараметрыСкрипта.Вставить("ИмяФайлаРезультата", ИмяФайлаРезультата);
	ПараметрыСкрипта.Вставить("КомандаВключенияРежимаОтладки", ?(ЗаписыватьЛог, "Set-PSDebug -Trace 1", ""));
	ТекстСкрипта = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСкрипта, ПараметрыСкрипта);
	СохранитьТекст(ТекстСкрипта, ИмяФайлаСкрипта);

	ТипОболочки = КоманднаяОболочкаКлиентСервер.ТипShell().PowerShell;
	ПараметрыВыполненияКоманд = КоманднаяОболочкаКлиентСервер.КонструкторПараметровВыполненияСкрипта();
	ПараметрыВыполненияКоманд.ИспользоватьКонтрольВыполнения = Истина;
	ПараметрыВыполненияКоманд.Таймаут =  1800;// Операция выполняется длительно. //Константы.ТаймаутРаботаСGIT.Получить();
	ПараметрыВыполненияКоманд.ТекущийКаталог = КаталогРепозиторияСравнения;
	ПараметрыВыполненияКоманд.ИспользоватьКонтрольБезопасностиКоманд = Ложь;
	ПараметрыВыполненияКоманд.КодировкаПотоков = Константы.КодировкаПотоковРаботаСGit.Получить();
	ПараметрыВыполненияКоманд.КодировкаИсполнения = Константы.КодировкаИсполненияРаботаСGit.Получить();
	ИмяФайлаЛога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Константы.КаталогЛогов.Получить()) +
		"git1c_changes\" + ИмяПапкиХранилища + "_" + ИмяВетки + ".log";
	МассивКоманд = Новый Массив;
	МассивКоманд.Добавить("powershell -file " + ИмяФайлаСкрипта + ?(ЗаписыватьЛог, " > " + ИмяФайлаЛога, ""));
	РезультатВыполненияКоманды = КоманднаяОболочкаКлиентСервер.ВыполнитьСкрипт(МассивКоманд, ТипОболочки, ПараметрыВыполненияКоманд);
	Если РезультатВыполненияКоманды.КодВозврата <> 0 Тогда
		ТекстОшибки =
			СтрШаблон("Не удалось сформировать ветку сравнения для задачи %1 по хранилищу %2
					|Вывод: %3
					|Ошибки: %4",
					ЗадачаМетеор, Хранилище, РезультатВыполненияКоманды.ПотокВывода, РезультатВыполненияКоманды.ПотокОшибок);
		ЗаписьЖурналаРегистрации(
			"Формирование итоговых изменений по задаче",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ИсторияХранилища,
			ЗадачаМетеор,
			ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	Иначе
		РезультатФормирования.ХешОкончанияВетки = СокрЛП(ПрочитатьТекст(ИмяФайлаРезультата));
	КонецЕсли;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаСкрипта);
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаРезультата);
	
	Возврат РезультатФормирования;
	
КонецФункции

Процедура УдалитьВеткуГитСравненияВерсий(Хранилище, ЗадачаМетеор) Экспорт
	
	ЗаписыватьЛог = Истина;
	
	ИмяВетки = СтрШаблон("%1_diff", ЗадачаМетеор.id);
	ИмяПапкиХранилища = ИмяПапкиGitХранилища(Хранилище);
	КаталогРепозиторияСравнения = 
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Константы.КаталогРепозиториевСравненияИзменений.Получить()) +
		ИмяПапкиХранилища;
	
	ШаблонСкрипта =
		"chcp 65001
		|[КомандаВключенияРежимаОтладки]
		|Set-Location -Path ""[КаталогРепозиторияСравнения]""
		|git checkout master
		|git pull
		|git push origin :""[ИмяВетки]""
		|git branch -D ""[ИмяВетки]""
		|";
	
	ИмяФайлаСкрипта = ПолучитьИмяВременногоФайла("ps1");
	ПараметрыСкрипта = Новый Структура();
	ПараметрыСкрипта.Вставить("КаталогРепозиторияСравнения", КаталогРепозиторияСравнения);
	ПараметрыСкрипта.Вставить("ИмяВетки", ИмяВетки);
	ПараметрыСкрипта.Вставить("КомандаВключенияРежимаОтладки", ?(ЗаписыватьЛог, "Set-PSDebug -Trace 1", ""));
	ТекстСкрипта = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСкрипта, ПараметрыСкрипта);
	СохранитьТекст(ТекстСкрипта, ИмяФайлаСкрипта);

	ТипОболочки = КоманднаяОболочкаКлиентСервер.ТипShell().PowerShell;
	ПараметрыВыполненияКоманд = КоманднаяОболочкаКлиентСервер.КонструкторПараметровВыполненияСкрипта();
	ПараметрыВыполненияКоманд.Таймаут =  300;// Операция выполняется длительно. //Константы.ТаймаутРаботаСGIT.Получить();
	ПараметрыВыполненияКоманд.ТекущийКаталог = КаталогРепозиторияСравнения;
	ПараметрыВыполненияКоманд.ИспользоватьКонтрольБезопасностиКоманд = Ложь;
	ПараметрыВыполненияКоманд.КодировкаПотоков = Константы.КодировкаПотоковРаботаСGit.Получить();
	ПараметрыВыполненияКоманд.КодировкаИсполнения = Константы.КодировкаИсполненияРаботаСGit.Получить();
	ИмяФайлаЛога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Константы.КаталогЛогов.Получить()) +
		"git1c_changes\delete_" + ИмяПапкиХранилища + "_" + ИмяВетки + ".log";

	
	МассивКоманд = Новый Массив;
	МассивКоманд.Добавить("powershell -file " + ИмяФайлаСкрипта + ?(ЗаписыватьЛог, " > " + ИмяФайлаЛога, ""));
	РезультатВыполненияКоманды = КоманднаяОболочкаКлиентСервер.ВыполнитьСкрипт(МассивКоманд, ТипОболочки, ПараметрыВыполненияКоманд);
	Если РезультатВыполненияКоманды.КодВозврата <> 0 Тогда
		ТекстОшибки =
			СтрШаблон("Не удалось удалить ветку сравнения для задачи %1 по хранилищу %2
					|Вывод: %3
					|Ошибки: %4",
					ЗадачаМетеор, Хранилище, РезультатВыполненияКоманды.ПотокВывода, РезультатВыполненияКоманды.ПотокОшибок);
		ЗаписьЖурналаРегистрации(
			"Формирование итоговых изменений по задаче",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ИсторияХранилища,
			ЗадачаМетеор,
			ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаСкрипта);
	
КонецПроцедуры

Процедура СформироваьИтоговыеИзмененияПоЗадаче(ЗадачаМетеор) Экспорт
	
	ИмяПроцедуры = "РаботаСХранилищами.СформироваьИтоговыеИзмененияПоЗадачеИХранилищу";
	НаименованиеФоновогоЗадания = "Формирование итоговых изменений по задаче и хранилищу";
	КлючФоновогоЗадания = "ФормированиеИтоговыхИзмененийПоЗадачеИХранилищу";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиМетеорВерсийХранилища.ВерсияХранилища.Владелец КАК Хранилище,
	|	ЗадачиМетеорВерсийХранилища.ЗадачаМетеор КАК ЗадачаМетеор,
	|	ЗадачиМетеорВерсийХранилища.ВерсияХранилища.Владелец.Наименование КАК ХранилищеНаименование
	|ИЗ
	|	РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
	|ГДЕ
	|	ЗадачиМетеорВерсийХранилища.ЗадачаМетеор = &ЗадачаМетеор";
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Количество() Тогда
		ОбщегоНазначения.СообщитьПользователю("По задаче нет версий для формирования итоговых изменений.");
		Возврат;
	КонецЕсли;
	НаборПараметровПотоков = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Хранилище);
		ПараметрыМетода.Добавить(Выборка.ЗадачаМетеор);
		НаборПараметровПотоков.Вставить(
			КлючФоновогоЗадания + "_" + СтрЗаменить(Выборка.ХранилищеНаименование, " ", "_"),
			ПараметрыМетода);	
	КонецЦикла;
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
	ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = Неопределено; // ждать завершения
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуруВНесколькоПотоков(
		ИмяПроцедуры,
		ПараметрыВыполнения,
		НаборПараметровПотоков);
	
КонецПроцедуры

Процедура СформироваьИтоговыеИзмененияПоЗадачеИХранилищу(Хранилище, ЗадачаМетеор) Экспорт
	
	РезультатФормирования = СформироватьВеткуГитСравненияВерсий(Хранилище, ЗадачаМетеор);
	Если РезультатФормирования.ХешОкончанияВетки = "" Тогда
		Возврат;
	КонецЕсли;
	
	Мз = РегистрыСведений.ХешиГитСравненияИзменений.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Мз, РезультатФормирования);
	Мз.ЗадачаМетеор = ЗадачаМетеор;
	Мз.Хранилище = Хранилище;
	Мз.ДатаСоздания = ТекущаяДатаСеанса();
	Мз.Записать();
	
КонецПроцедуры

Процедура ЗаписатьЗахваченныеОбъекты(Хранилище) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗахваченныеОбъектыХранилищСрезПоследних.Период КАК Период,
		|	ЗахваченныеОбъектыХранилищСрезПоследних.Хранилище КАК Хранилище,
		|	ЗахваченныеОбъектыХранилищСрезПоследних.ОбъектИД КАК ОбъектИД,
		|	ЗахваченныеОбъектыХранилищСрезПоследних.ДатаОкончания КАК ДатаОкончания,
		|	ЗахваченныеОбъектыХранилищСрезПоследних.ОбъектИмя КАК ОбъектИмя,
		|	ЗахваченныеОбъектыХранилищСрезПоследних.ОбъектТип КАК ОбъектТип,
		|	ЗахваченныеОбъектыХранилищСрезПоследних.ОбъектМетаданных КАК ОбъектМетаданных,
		|	ЗахваченныеОбъектыХранилищСрезПоследних.Пользователь КАК Пользователь,
		|	ЗахваченныеОбъектыХранилищСрезПоследних.НомерВерсии КАК НомерВерсии,
		|	ЗахваченныеОбъектыХранилищСрезПоследних.НомерКоммита КАК НомерКоммита,
		|	ЗахваченныеОбъектыХранилищСрезПоследних.ДатаОбновления КАК ДатаОбновления
		|ИЗ
		|	РегистрСведений.ЗахваченныеОбъектыХранилищ.СрезПоследних(, Хранилище = &Хранилище) КАК ЗахваченныеОбъектыХранилищСрезПоследних
		|ГДЕ
		|	ЗахваченныеОбъектыХранилищСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)";
	Запрос.УстановитьПараметр("Хранилище", Хранилище);
	СостояниеРепос = Запрос.Выполнить().Выгрузить();
	ИндексОбъектов = РаботаСХранилищамиСлужебный.ПолучитьДеревоОтбъектоХранилища(Хранилище);
	ЗахваченныеОбъекты = РаботаСХранилищамиСлужебный.ПолучитьЗахваченныеОбъекты(Хранилище, ИндексОбъектов);
	ОсвободившиесяОбъекты = РаботаСХранилищамиСлужебный.ПолучитьОсободившиесяОбъекты(ИндексОбъектов, СостояниеРепос.ВыгрузитьКолонку("ОбъектИД"), ЗахваченныеОбъекты);
	
	Запрос.УстановитьПараметр("ЗахваченныеОбъекты", ЗахваченныеОбъекты);
	Запрос.УстановитьПараметр("ОсвободившиесяОбъекты", ОсвободившиесяОбъекты);
	Запрос.УстановитьПараметр("СостояниеРепос", СостояниеРепос);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Конфигурация", Хранилище.Владелец);
	
	ЗаписатьЗахваченныеОбъектыСохранитьновыеДанные(Запрос);
	ЗаписатьЗахваченныеОбъектыДобавлениеФактическихПомещенийОбъектов(Запрос);
	ЗаписатьЗахваченныеОбъектыЗаполнениеНезавершенныхКоммитов(Запрос);
	
КонецПроцедуры

Процедура ЗаписатьЗахваченныеОбъектыСохранитьновыеДанные(Запрос)
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗахваченныеОбъекты.ДатаЗахвата КАК Период,
		|	ЗахваченныеОбъекты.ОбъектИД КАК ОбъектИД,
		|	ЗахваченныеОбъекты.ОбъектИмя КАК ОбъектИмя,
		|	ЗахваченныеОбъекты.ОбъектТип КАК ОбъектТип,
		|	ЗахваченныеОбъекты.РодительскийИД КАК РодительскийИД,
		|	ЗахваченныеОбъекты.НомерВерсии КАК НомерВерсии,
		|	ЗахваченныеОбъекты.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ ЗахваченныеОбъекты
		|ИЗ
		|	&ЗахваченныеОбъекты КАК ЗахваченныеОбъекты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсвободившиесяОбъекты.ОбъектИД КАК ОбъектИД,
		|	ОсвободившиесяОбъекты.ОбъектИмя КАК ОбъектИмя,
		|	ОсвободившиесяОбъекты.НомерВерсии КАК НомерВерсии
		|ПОМЕСТИТЬ ОсвободившиесяОбъекты
		|ИЗ
		|	&ОсвободившиесяОбъекты КАК ОсвободившиесяОбъекты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостояниеРепос.Период КАК Период,
		|	СостояниеРепос.ОбъектИД КАК ОбъектИД,
		|	СостояниеРепос.ОбъектИмя КАК ОбъектИмя,
		|	СостояниеРепос.ОбъектТип КАК ОбъектТип,
		|	СостояниеРепос.ОбъектМетаданных КАК ОбъектМетаданных,
		|	СостояниеРепос.НомерВерсии КАК НомерВерсии,
		|	СостояниеРепос.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ СостояниеРепос
		|ИЗ
		|	&СостояниеРепос КАК СостояниеРепос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗахваченныеОбъекты.Период КАК Период,
		|	&Хранилище КАК Хранилище,
		|	ЗахваченныеОбъекты.ОбъектИД КАК ОбъектИД,
		|	NULL КАК ДатаОкончания,
		|	ЗахваченныеОбъекты.ОбъектИмя КАК ОбъектИмя,
		|	ЗахваченныеОбъекты.ОбъектТип КАК ОбъектТип,
		|	ОбъектыМетаданных.Ссылка КАК ОбъектМетаданных,
		|	ЗахваченныеОбъекты.Пользователь КАК Пользователь,
		|	ЗахваченныеОбъекты.НомерВерсии КАК НомерВерсии,
		|	NULL КАК НомерКоммита
		|ИЗ
		|	ЗахваченныеОбъекты КАК ЗахваченныеОбъекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ СостояниеРепос КАК СостояниеРепос
		|		ПО ЗахваченныеОбъекты.Период = СостояниеРепос.Период
		|			И ЗахваченныеОбъекты.ОбъектИД = СостояниеРепос.ОбъектИД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|		ПО ЗахваченныеОбъекты.РодительскийИД = ОбъектыМетаданных.УИД
		|			И (ОбъектыМетаданных.Владелец = &Конфигурация)
		|ГДЕ
		|	(СостояниеРепос.ОбъектИмя ЕСТЬ NULL
		|			ИЛИ ЗахваченныеОбъекты.ОбъектИмя <> СостояниеРепос.ОбъектИмя)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеРепос.Период,
		|	&Хранилище,
		|	СостояниеРепос.ОбъектИД,
		|	&ТекущаяДата,
		|	СостояниеРепос.ОбъектИмя,
		|	СостояниеРепос.ОбъектТип,
		|	СостояниеРепос.ОбъектМетаданных,
		|	СостояниеРепос.Пользователь,
		|	СостояниеРепос.НомерВерсии,
		|	ОсвободившиесяОбъекты.НомерВерсии
		|ИЗ
		|	СостояниеРепос КАК СостояниеРепос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОсвободившиесяОбъекты КАК ОсвободившиесяОбъекты
		|		ПО СостояниеРепос.ОбъектИД = ОсвободившиесяОбъекты.ОбъектИД";
	
	ДляЗаписи = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из ДляЗаписи Цикл
		Запись = РегистрыСведений.ЗахваченныеОбъектыХранилищ.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Стр);
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЗахваченныеОбъектыДобавлениеФактическихПомещенийОбъектов(Запрос)
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗахваченныеОбъектыХранилищ.Период КАК Период,
		|	ЗахваченныеОбъектыХранилищ.Хранилище КАК Хранилище,
		|	ЗахваченныеОбъектыХранилищ.ОбъектИД КАК ОбъектИД,
		|	ЗахваченныеОбъектыХранилищ.ДатаОкончания КАК ДатаОкончания,
		|	ЗахваченныеОбъектыХранилищ.ОбъектИмя КАК ОбъектИмя,
		|	ЗахваченныеОбъектыХранилищ.Пользователь КАК Пользователь,
		|	ЗахваченныеОбъектыХранилищ.НомерВерсии КАК НомерВерсии,
		|	ЗахваченныеОбъектыХранилищ.НомерКоммита КАК НомерКоммита,
		|	ЗахваченныеОбъектыХранилищ.ДатаОбновления КАК ДатаОбновления,
		|	ЗахваченныеОбъектыХранилищ.ОбъектТип КАК ОбъектТип,
		|	ЗахваченныеОбъектыХранилищ.ОбъектМетаданных КАК ОбъектМетаданных
		|ПОМЕСТИТЬ История
		|ИЗ
		|	РегистрСведений.ЗахваченныеОбъектыХранилищ КАК ЗахваченныеОбъектыХранилищ
		|ГДЕ
		|	ЗахваченныеОбъектыХранилищ.Хранилище.ЗагружатьЗахваченныеОбъектыХранилищ
		|	И ЗахваченныеОбъектыХранилищ.Период > &Дата
		|	И ЗахваченныеОбъектыХранилищ.Хранилище = &Хранилище
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияХранилищаИзменены.Ссылка.Дата КАК Период,
		|	ИсторияХранилищаИзменены.Ссылка.Владелец КАК Хранилище,
		|	ИсторияХранилищаИзменены.ИмяОбъекта КАК ОбъектИмя,
		|	ИсторияХранилищаИзменены.Ссылка.Автор КАК Автор,
		|	ИсторияХранилищаИзменены.Ссылка.Код КАК НомерКоммита
		|ПОМЕСТИТЬ Коммиты
		|ИЗ
		|	Справочник.ИсторияХранилища.Изменены КАК ИсторияХранилищаИзменены
		|		ЛЕВОЕ СОЕДИНЕНИЕ История КАК История
		|		ПО ИсторияХранилищаИзменены.Ссылка.Владелец = История.Хранилище
		|			И ИсторияХранилищаИзменены.ИмяОбъекта = История.ОбъектИмя
		|			И (ИсторияХранилищаИзменены.Ссылка.Дата = История.Период
		|				ИЛИ ИсторияХранилищаИзменены.Ссылка.Дата МЕЖДУ История.Период И История.ДатаОкончания)
		|ГДЕ
		|	ИсторияХранилищаИзменены.Ссылка.Владелец.ЗагружатьЗахваченныеОбъектыХранилищ
		|	И ИсторияХранилищаИзменены.Ссылка.Владелец = &Хранилище
		|	И ИсторияХранилищаИзменены.Ссылка.Дата > &Дата
		|	И История.ОбъектМетаданных ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗахваченныеОбъектыХранилищ.Период КАК Период,
		|	ЗахваченныеОбъектыХранилищ.Хранилище КАК Хранилище,
		|	ЗахваченныеОбъектыХранилищ.ОбъектИмя КАК ОбъектИмя,
		|	ЗахваченныеОбъектыХранилищ.ОбъектИД КАК ОбъектИД,
		|	ЗахваченныеОбъектыХранилищ.ОбъектТип КАК ОбъектТип,
		|	ЗахваченныеОбъектыХранилищ.ОбъектМетаданных КАК ОбъектМетаданных
		|ПОМЕСТИТЬ СоотвествиеОбъектов
		|ИЗ
		|	РегистрСведений.ЗахваченныеОбъектыХранилищ.СрезПоследних(
		|			,
		|			(Хранилище, ОбъектИмя) В
		|					(ВЫБРАТЬ
		|						Коммиты.Хранилище,
		|						Коммиты.ОбъектИмя
		|					ИЗ
		|						Коммиты)
		|				И ОбъектМетаданных <> ЗНАЧЕНИЕ(Справочник.ОбъектыМетаданных.ПустаяСсылка)) КАК ЗахваченныеОбъектыХранилищ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Коммиты.Период КАК Период,
		|	Коммиты.Хранилище КАК Хранилище,
		|	СоотвествиеОбъектов.ОбъектИД КАК ОбъектИД,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	СоотвествиеОбъектов.ОбъектИмя КАК ОбъектИмя,
		|	Коммиты.Автор КАК Пользователь,
		|	Коммиты.НомерКоммита КАК НомерВерсии,
		|	Коммиты.НомерКоммита КАК НомерКоммита,
		|	&ТекущаяДата КАК ДатаОбновления,
		|	СоотвествиеОбъектов.ОбъектТип КАК ОбъектТип,
		|	СоотвествиеОбъектов.ОбъектМетаданных КАК ОбъектМетаданных
		|ПОМЕСТИТЬ ДобавляемыеЗаписи
		|ИЗ
		|	Коммиты КАК Коммиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоотвествиеОбъектов КАК СоотвествиеОбъектов
		|		ПО Коммиты.Хранилище = СоотвествиеОбъектов.Хранилище
		|			И Коммиты.ОбъектИмя = СоотвествиеОбъектов.ОбъектИмя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДобавляемыеЗаписи.Период КАК Период,
		|	ДобавляемыеЗаписи.Хранилище КАК Хранилище,
		|	ДобавляемыеЗаписи.ОбъектИД КАК ОбъектИД,
		|	ДобавляемыеЗаписи.ДатаОкончания КАК ДатаОкончания,
		|	ДобавляемыеЗаписи.ОбъектИмя КАК ОбъектИмя,
		|	ДобавляемыеЗаписи.Пользователь КАК Пользователь,
		|	ДобавляемыеЗаписи.НомерВерсии КАК НомерВерсии,
		|	ДобавляемыеЗаписи.НомерКоммита КАК НомерКоммита,
		|	ДобавляемыеЗаписи.ДатаОбновления КАК ДатаОбновления,
		|	ДобавляемыеЗаписи.ОбъектТип КАК ОбъектТип,
		|	ДобавляемыеЗаписи.ОбъектМетаданных КАК ОбъектМетаданных
		|ИЗ
		|	ДобавляемыеЗаписи КАК ДобавляемыеЗаписи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗахваченныеОбъектыХранилищ.Период,
		|	ЗахваченныеОбъектыХранилищ.Хранилище,
		|	ЗахваченныеОбъектыХранилищ.ОбъектИД,
		|	NULL,
		|	ЗахваченныеОбъектыХранилищ.ОбъектИмя,
		|	ЗахваченныеОбъектыХранилищ.Пользователь,
		|	ЗахваченныеОбъектыХранилищ.НомерВерсии,
		|	ЗахваченныеОбъектыХранилищ.НомерКоммита,
		|	ЗахваченныеОбъектыХранилищ.ДатаОбновления,
		|	ЗахваченныеОбъектыХранилищ.ОбъектТип,
		|	ЗахваченныеОбъектыХранилищ.ОбъектМетаданных
		|ИЗ
		|	РегистрСведений.ЗахваченныеОбъектыХранилищ КАК ЗахваченныеОбъектыХранилищ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДобавляемыеЗаписи КАК ДобавляемыеЗаписи
		|		ПО ЗахваченныеОбъектыХранилищ.Хранилище = ДобавляемыеЗаписи.Хранилище
		|			И ЗахваченныеОбъектыХранилищ.ОбъектИД = ДобавляемыеЗаписи.ОбъектИД
		|			И (ДобавляемыеЗаписи.Период МЕЖДУ ЗахваченныеОбъектыХранилищ.Период И ЗахваченныеОбъектыХранилищ.ДатаОкончания)";
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса() - 3600);
	
	ВыборкаЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗаписи.Следующий() Цикл
		Запись = РегистрыСведений.ЗахваченныеОбъектыХранилищ.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаЗаписи);
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЗахваченныеОбъектыЗаполнениеНезавершенныхКоммитов(Запрос)
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗахваченныеОбъектыХранилищ.Хранилище КАК Хранилище,
		|	ЗахваченныеОбъектыХранилищ.ОбъектИД КАК ОбъектИД
		|ПОМЕСТИТЬ НезавершенныеКоммиты
		|ИЗ
		|	РегистрСведений.ЗахваченныеОбъектыХранилищ КАК ЗахваченныеОбъектыХранилищ
		|ГДЕ
		|	ЗахваченныеОбъектыХранилищ.Хранилище = &Хранилище
		|	И ЗахваченныеОбъектыХранилищ.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗахваченныеОбъектыХранилищ.ОбъектИД,
		|	ЗахваченныеОбъектыХранилищ.Хранилище
		|
		|ИМЕЮЩИЕ
		|	СУММА(1) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗахваченныеОбъектыХранилищ.Период КАК Период,
		|	ЗахваченныеОбъектыХранилищ.Хранилище КАК Хранилище,
		|	ЗахваченныеОбъектыХранилищ.ОбъектИД КАК ОбъектИД,
		|	ЗахваченныеОбъектыХранилищ.ДатаОкончания КАК ДатаОкончания,
		|	ЗахваченныеОбъектыХранилищ.ОбъектИмя КАК ОбъектИмя,
		|	ЗахваченныеОбъектыХранилищ.Пользователь КАК Пользователь,
		|	ЗахваченныеОбъектыХранилищ.НомерВерсии КАК НомерВерсии,
		|	ЗахваченныеОбъектыХранилищ.НомерКоммита КАК НомерКоммита,
		|	ЗахваченныеОбъектыХранилищ.ДатаОбновления КАК ДатаОбновления,
		|	ЗахваченныеОбъектыХранилищ.ОбъектМетаданных КАК ОбъектМетаданных,
		|	ЗахваченныеОбъектыХранилищ.ОбъектТип КАК ОбъектТип
		|ИЗ
		|	НезавершенныеКоммиты КАК НезавершенныеКоммиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗахваченныеОбъектыХранилищ КАК ЗахваченныеОбъектыХранилищ
		|		ПО НезавершенныеКоммиты.Хранилище = ЗахваченныеОбъектыХранилищ.Хранилище
		|			И НезавершенныеКоммиты.ОбъектИД = ЗахваченныеОбъектыХранилищ.ОбъектИД
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|ИТОГИ ПО
		|	ОбъектИД";
	ВыборкаОбъекты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъекты.Следующий() Цикл
		ВыборкаЗаписи = ВыборкаОбъекты.Выбрать();
		ВыборкаЗаписи.Следующий();
		ДатаОкончания = ВыборкаЗаписи.Период - 1;
		Пока ВыборкаЗаписи.Следующий() Цикл
			Записывать = Не ЗначениеЗаполнено(ВыборкаЗаписи.ДатаОкончания);
			Если Записывать Тогда
				Запись = РегистрыСведений.ЗахваченныеОбъектыХранилищ.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаЗаписи);
				Запись.ДатаОкончания = ДатаОкончания;
				Запись.Записать();
			КонецЕсли;
			ДатаОкончания = ВыборкаЗаписи.Период - 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ФормированиеУведомленийПоЗахваченнымОбъектамХранилищОбработчикЗадания() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Регистр.Хранилище КАК Хранилище,
		|	Регистр.ОбъектИД КАК ОбъектИД,
		|	Регистр.ОбъектИмя КАК ОбъектИмя,
		|	Регистр.ОбъектМетаданных КАК ОбъектМетаданных,
		|	Регистр.Период КАК ПериодЗахвата,
		|	РАЗНОСТЬДАТ(Регистр.Период, &ТекущаяДата, ЧАС) КАК Часов,
		|	РАЗНОСТЬДАТ(ПоследниеОтправленныеУведомления.Период, &ТекущаяДата, ЧАС) КАК ЧасовСУведомления,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА Регистр.ОбъектМетаданных.МаксимальноеВремяЗахватаЧасов <> 0
		|				ТОГДА Регистр.ОбъектМетаданных.МаксимальноеВремяЗахватаЧасов
		|			ИНАЧЕ Регистр.Хранилище.Владелец.МаксимальноеВремяЗахватаПоУмолчаниюЧасов
		|		КОНЕЦ, 0) КАК Предел,
		|	Регистр.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ ЗахваченныеОбъекты
		|ИЗ
		|	РегистрСведений.ЗахваченныеОбъектыХранилищ.СрезПоследних КАК Регистр
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗахваченныеОбъектыХранилищОтправленныеУведомления.СрезПоследних КАК ПоследниеОтправленныеУведомления
		|		ПО Регистр.ОбъектИмя = ПоследниеОтправленныеУведомления.ОбъектИмя
		|			И Регистр.Хранилище = ПоследниеОтправленныеУведомления.Хранилище
		|ГДЕ
		|	Регистр.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.email КАК email,
		|	Пользователи.Код КАК Код,
		|	ЗахваченныеОбъекты.Хранилище КАК Хранилище,
		|	ЗахваченныеОбъекты.ПериодЗахвата КАК ПериодЗахвата,
		|	ЗахваченныеОбъекты.ОбъектМетаданных КАК ОбъектМетаданных,
		|	ЗахваченныеОбъекты.ОбъектИмя КАК ОбъектИмя,
		|	ЗахваченныеОбъекты.Часов КАК Часов,
		|	ЗахваченныеОбъекты.Предел КАК Предел
		|ИЗ
		|	ЗахваченныеОбъекты КАК ЗахваченныеОбъекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (Пользователи.Код = ЗахваченныеОбъекты.Пользователь)
		|ГДЕ
		|	ЗахваченныеОбъекты.Предел <> 0
		|	И ЗахваченныеОбъекты.Часов > ЗахваченныеОбъекты.Предел
		|	И (ЗахваченныеОбъекты.ЧасовСУведомления ЕСТЬ NULL
		|			ИЛИ ЗахваченныеОбъекты.ЧасовСУведомления > 12)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбъектИмя
		|ИТОГИ
		|	МАКСИМУМ(email),
		|	МАКСИМУМ(Код)
		|ПО
		|	Пользователь";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ВыборкаПользователи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПользователи.Следующий() Цикл
		
		ДанныеПисьма = Новый Структура("Получатели, Тема, Тело");
		ДанныеПисьма.Тема = СтрШаблон("Длительный захват объектов (%1)", ВыборкаПользователи.Код);
		ДанныеПисьма.Получатели = ВыборкаПользователи.email;
		Если Не ЗначениеЗаполнено(ДанныеПисьма.Получатели) Тогда
			ДанныеПисьма.Получатели = "dors@automacon.ru";
		КонецЕсли;
		
		Сообщение = Новый ТекстовыйДокумент;
		Сообщение.ДобавитьСтроку("<html><body>");
		Сообщение.ДобавитьСтроку(СтрШаблон("<p>Объекты конфигурации, захваченные пользователем %1 дольше допустимого времени:", ВыборкаПользователи.Код));
		Сообщение.ДобавитьСтроку("<table border=1><tr>");
		Сообщение.ДобавитьСтроку(СтрШаблон("<td><b>%1</b></td>", "Хранилище"));
		Сообщение.ДобавитьСтроку(СтрШаблон("<td align=center><b>%1</b></td>", "Метаданные"));
		Сообщение.ДобавитьСтроку(СтрШаблон("<td><b>%1</b></td>", "Время захвата"));
		Сообщение.ДобавитьСтроку(СтрШаблон("<td><b>%1</b></td>", "Длительность"));
		Сообщение.ДобавитьСтроку(СтрШаблон("<td><b>%1</b></td>", "Нормативное время"));
		Сообщение.ДобавитьСтроку("</tr>");
		
		Выборка = ВыборкаПользователи.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.ЗахваченныеОбъектыХранилищОтправленныеУведомления.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Период = ТекущаяДатаСеанса();
			Запись.ТекстУведомления = "Отпусти отбъект %1, который удерживаешь более %2 ч. (при нормативе %3 ч.)";
			Запись.ТекстУведомления = СтрШаблон(Запись.ТекстУведомления, Выборка.ОбъектИмя, Выборка.Часов, Выборка.Предел);
			Запись.Записать();
			
			Сообщение.ДобавитьСтроку("<tr>");
			Сообщение.ДобавитьСтроку(СтрШаблон("<td>%1</td>", Выборка.Хранилище));
			Сообщение.ДобавитьСтроку(СтрШаблон("<td>%1</td>", Выборка.ОбъектИмя));
			Сообщение.ДобавитьСтроку(СтрШаблон("<td>%1</td>", Выборка.ПериодЗахвата));
			Сообщение.ДобавитьСтроку(СтрШаблон("<td align=right>%1 ч.</td>", Выборка.Часов));
			Сообщение.ДобавитьСтроку(СтрШаблон("<td align=right>%1 ч.</td>", Выборка.Предел));
			Сообщение.ДобавитьСтроку("</tr>");
			
		КонецЦикла;
		
		Сообщение.ДобавитьСтроку("</table>");
		Сообщение.ДобавитьСтроку(СтрШаблон("<p>Ссылка на регалмент: <a href=%1>%1</a>",
			"https://bookstack.int.vkusvill.ru/books/pravila-razrabotki-na-proekte-vv/page/zaxvat-kornya-i-klyucevyx-obektov"));
		Сообщение.ДобавитьСтроку("</body></html>");
		ДанныеПисьма.Тело = Сообщение.ПолучитьТекст();
		Документы.ЭлектронноеПисьмо.СоздатьПисьмо(ДанныеПисьма);
		Сообщить(СтрШаблон("%1 %2", ВыборкаПользователи.Код, Выборка.Количество()));
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоличествоКонфликтовИзмененийОбъектов(ЗадачаМетеор, Коммит = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаКонфликтыИзмененийОбъектов();
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
	Запрос.УстановитьПараметр("Коммит", Коммит);
	Возврат Запрос.Выполнить().Выбрать().Количество();
КонецФункции

Функция ТекстЗапросаКонфликтыИзмененийОбъектов() Экспорт
	Возврат "ВЫБРАТЬ
	        |	ЗадачиМетеорВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища
	        |ПОМЕСТИТЬ ВерсииПоЗадаче
	        |ИЗ
	        |	РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
	        |ГДЕ
	        |	ЗадачиМетеорВерсийХранилища.ЗадачаМетеор = &ЗадачаМетеор
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |	Объекты.Хранилище КАК Хранилище,
	        |	Объекты.ИмяОбъекта КАК ИмяОбъекта
	        |ПОМЕСТИТЬ ИзмененныеОбъекты
	        |ИЗ
	        |	(ВЫБРАТЬ ПЕРВЫЕ 100
	        |		ИсторияХранилища.Ссылка.Владелец КАК Хранилище,
	        |		ИсторияХранилища.ИмяОбъекта КАК ИмяОбъекта
	        |	ИЗ
	        |		Справочник.ИсторияХранилища.Изменены КАК ИсторияХранилища
	        |	ГДЕ
	        |		ИсторияХранилища.Ссылка В
	        |				(ВЫБРАТЬ
	        |					ВерсииПоЗадаче.ВерсияХранилища
	        |				ИЗ
	        |					ВерсииПоЗадаче)
	        |		И &Коммит В (ИсторияХранилища.Ссылка, НЕОПРЕДЕЛЕНО)
	        |	
	        |	ОБЪЕДИНИТЬ ВСЕ
	        |	
	        |	ВЫБРАТЬ ПЕРВЫЕ 100
	        |		ИсторияХранилища.Ссылка.Владелец,
	        |		ИсторияХранилища.ИмяОбъекта
	        |	ИЗ
	        |		Справочник.ИсторияХранилища.Добавлены КАК ИсторияХранилища
	        |	ГДЕ
	        |		ИсторияХранилища.Ссылка В
	        |				(ВЫБРАТЬ
	        |					ВерсииПоЗадаче.ВерсияХранилища
	        |				ИЗ
	        |					ВерсииПоЗадаче)
	        |		И &Коммит В (ИсторияХранилища.Ссылка, НЕОПРЕДЕЛЕНО)
	        |	
	        |	ОБЪЕДИНИТЬ ВСЕ
	        |	
	        |	ВЫБРАТЬ ПЕРВЫЕ 100
	        |		ИсторияХранилища.Ссылка.Владелец,
	        |		ИсторияХранилища.ИмяОбъекта
	        |	ИЗ
	        |		Справочник.ИсторияХранилища.Удалены КАК ИсторияХранилища
	        |	ГДЕ
	        |		ИсторияХранилища.Ссылка В
	        |				(ВЫБРАТЬ
	        |					ВерсииПоЗадаче.ВерсияХранилища
	        |				ИЗ
	        |					ВерсииПоЗадаче)
	        |		И &Коммит В (ИсторияХранилища.Ссылка, НЕОПРЕДЕЛЕНО)) КАК Объекты
	        |ГДЕ
	        |	&ЗадачаМетеор <> ЗНАЧЕНИЕ(Справочник.ЗадачиМетеор.ПустаяСсылка)
	        |	И Объекты.ИмяОбъекта ПОДОБНО ""%.%""
	        |	И Объекты.Хранилище.ХранилищеРазработки
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ИсторияХранилищаПоОбъектам.Хранилище КАК Хранилище,
	        |	ИсторияХранилищаПоОбъектам.ИмяОбъекта КАК ИмяОбъекта,
	        |	ИсторияХранилищаПоОбъектам.ИсторияХранилища КАК ИсторияХранилища,
	        |	ИсторияХранилищаПоОбъектам.Дата КАК Дата,
	        |	ЕСТЬNULL(ЗадачиМетеорВерсийХранилища.ЗадачаМетеор, ЗНАЧЕНИЕ(Справочник.ЗадачиМетеор.ПустаяСсылка)) КАК ЗадачаМетеор
	        |ПОМЕСТИТЬ ВсеИзменения
	        |ИЗ
	        |	(ВЫБРАТЬ
	        |		ИзмененныеОбъекты.Хранилище КАК Хранилище,
	        |		ИзмененныеОбъекты.ИмяОбъекта КАК ИмяОбъекта,
	        |		ИсторияХранилища.Ссылка КАК ИсторияХранилища,
	        |		ИсторияХранилища.Ссылка.Дата КАК Дата
	        |	ИЗ
	        |		Справочник.ИсторияХранилища.Изменены КАК ИсторияХранилища
	        |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеОбъекты КАК ИзмененныеОбъекты
	        |			ПО ИсторияХранилища.ИмяОбъекта = ИзмененныеОбъекты.ИмяОбъекта
	        |				И ИсторияХранилища.Ссылка.Владелец = ИзмененныеОбъекты.Хранилище
	        |	
	        |	ОБЪЕДИНИТЬ ВСЕ
	        |	
	        |	ВЫБРАТЬ
	        |		ИзмененныеОбъекты.Хранилище,
	        |		ИзмененныеОбъекты.ИмяОбъекта,
	        |		ИсторияХранилища.Ссылка,
	        |		ИсторияХранилища.Ссылка.Дата
	        |	ИЗ
	        |		Справочник.ИсторияХранилища.Добавлены КАК ИсторияХранилища
	        |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеОбъекты КАК ИзмененныеОбъекты
	        |			ПО ИсторияХранилища.ИмяОбъекта = ИзмененныеОбъекты.ИмяОбъекта
	        |				И ИсторияХранилища.Ссылка.Владелец = ИзмененныеОбъекты.Хранилище
	        |	
	        |	ОБЪЕДИНИТЬ ВСЕ
	        |	
	        |	ВЫБРАТЬ
	        |		ИзмененныеОбъекты.Хранилище,
	        |		ИзмененныеОбъекты.ИмяОбъекта,
	        |		ИсторияХранилища.Ссылка,
	        |		ИсторияХранилища.Ссылка.Дата
	        |	ИЗ
	        |		Справочник.ИсторияХранилища.Удалены КАК ИсторияХранилища
	        |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеОбъекты КАК ИзмененныеОбъекты
	        |			ПО ИсторияХранилища.ИмяОбъекта = ИзмененныеОбъекты.ИмяОбъекта
	        |				И ИсторияХранилища.Ссылка.Владелец = ИзмененныеОбъекты.Хранилище) КАК ИсторияХранилищаПоОбъектам
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
	        |		ПО ИсторияХранилищаПоОбъектам.ИсторияХранилища = ЗадачиМетеорВерсийХранилища.ВерсияХранилища
	        |ГДЕ
	        |	НЕ ИсторияХранилищаПоОбъектам.ИсторияХранилища В
	        |				(ВЫБРАТЬ
	        |					ВерсииПоЗадаче.ВерсияХранилища
	        |				ИЗ
	        |					ВерсииПоЗадаче)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВсеИзменения.Хранилище КАК Хранилище,
	        |	ВсеИзменения.ИмяОбъекта КАК ИмяОбъекта,
	        |	МАКСИМУМ(ВсеИзменения.Дата) КАК Дата
	        |ПОМЕСТИТЬ СрезИзменений
	        |ИЗ
	        |	ВсеИзменения КАК ВсеИзменения
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВсеИзменения.Хранилище,
	        |	ВсеИзменения.ИмяОбъекта
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВсеИзменения.Хранилище КАК Хранилище,
	        |	ВсеИзменения.ИмяОбъекта КАК ИмяОбъекта,
	        |	ВсеИзменения.ИсторияХранилища КАК Коммит,
	        |	ВсеИзменения.ИсторияХранилища.Метка КАК Метка,
	        |	ВсеИзменения.Дата КАК Дата,
	        |	ВсеИзменения.ИсторияХранилища.Автор КАК Автор,
	        |	ВсеИзменения.ЗадачаМетеор КАК ЗадачаМетеор,
	        |	ВЫРАЗИТЬ(ВсеИзменения.ЗадачаМетеор.НаименованиеЗадачи КАК СТРОКА(200)) КАК НаименованиеЗадачи,
	        |	Пользователи.Наименование КАК ФИО,
	        |	ТекущийЭтапЗадачиМетеор.Этап КАК Этап
	        |ИЗ
	        |	ВсеИзменения КАК ВсеИзменения
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СрезИзменений КАК СрезИзменений
	        |		ПО ВсеИзменения.ИмяОбъекта = СрезИзменений.ИмяОбъекта
	        |			И ВсеИзменения.Хранилище = СрезИзменений.Хранилище
	        |			И ВсеИзменения.Дата = СрезИзменений.Дата
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	        |		ПО ВсеИзменения.ИсторияХранилища.Автор = Пользователи.Код
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущийЭтапЗадачиМетеор КАК ТекущийЭтапЗадачиМетеор
	        |		ПО ВсеИзменения.ЗадачаМетеор = ТекущийЭтапЗадачиМетеор.ЗадачаМетеор
	        |ГДЕ
	        |	ВсеИзменения.ИсторияХранилища.Метка = """"
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Хранилище,
	        |	ИмяОбъекта";
КонецФункции

#Область ОбъектыХранилища

Функция ОбъектыХранилища(ВерсииХранилища) Экспорт

	ОбъектыХранилища = Новый Структура;
	ОбъектыХранилища.Вставить("Изменены", Новый Массив);
	ОбъектыХранилища.Вставить("Добавлены", Новый Массив);
	ОбъектыХранилища.Вставить("Удалены", Новый Массив);

	МассивТЧ = СтрРазделить("Изменены,Добавлены,Удалены", ",");
	Для Каждого ТЧ Из МассивТЧ Цикл
		Для Каждого Версия Из ВерсииХранилища Цикл
			Для Каждого Строка Из Версия[ТЧ] Цикл
				ОбъектыХранилища[ТЧ].Добавить(Строка.ИмяОбъекта);
			КонецЦикла;
		КонецЦикла;
		ОбъектыХранилища[ТЧ] = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыХранилища[ТЧ]);
	КонецЦикла;

	Возврат ОбъектыХранилища;

КонецФункции

Функция ЭтоКонфигурация(ИмяОбъекта)

	Возврат СтрНайти(ИмяОбъекта, ".") = 0;

КонецФункции

Функция КомментарийХранилища(ВерсииХранилища)

	МассивСтрок = Новый Массив;
	Для Каждого Версия Из ВерсииХранилища Цикл
		КомментарийВерсии = СокрЛП(Версия.Комментарий);
		Если ЗначениеЗаполнено(КомментарийВерсии) И МассивСтрок.Найти(КомментарийВерсии) = Неопределено Тогда
			МассивСтрок.Добавить(КомментарийВерсии);
		КонецЕсли;
	КонецЦикла;

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

Процедура ЗаполнитьПодсистемыПраваИОтветственныхПоОбъектам(Конфигурация, ТаблицаОбъектов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Проект КАК Проект,
		|	Т.ИмяОбъекта КАК ИмяОбъекта,
		|	Т.ВидИзменения КАК ВидИзменения,
		|	Т.Подсистемы КАК Подсистемы,
		|	Т.Ответственные КАК Ответственные
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыМетаданных.Ссылка КАК ОбъектМетаданных,
		|	ТаблицаОбъектов.Проект КАК Проект,
		|	ТаблицаОбъектов.ИмяОбъекта КАК ИмяОбъекта,
		|	ТаблицаОбъектов.ВидИзменения КАК ВидИзменения,
		|	ТаблицаОбъектов.Подсистемы КАК Подсистемы,
		|	ТаблицаОбъектов.Ответственные КАК Ответственные
		|ПОМЕСТИТЬ Объекты
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|		ПО (ТаблицаОбъектов.ИмяОбъекта = ОбъектыМетаданных.Наименование
		|		ИЛИ ТаблицаОбъектов.ИмяОбъекта ПОДОБНО ОбъектыМетаданных.Наименование + "".%"")
		|		И ТаблицаОбъектов.Проект = ОбъектыМетаданных.Владелец
		|		И (НЕ ОбъектыМетаданных.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Объекты.ОбъектМетаданных,
		|	Количество(различные ОбъектыМетаданныхПрава.Роль) КоличествоРолей
		|ПОМЕСТИТЬ ПраваНаОбъектыМетаданных
		|ИЗ
		|	Объекты КАК Объекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыМетаданныхПрава КАК ОбъектыМетаданныхПрава
		|		ПО Объекты.ОбъектМетаданных = ОбъектыМетаданныхПрава.ОбъектМетаданных
		|Сгруппировать по
		|	Объекты.ОбъектМетаданных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Объекты.Проект КАК Проект,
		|	Объекты.ИмяОбъекта КАК ИмяОбъекта,
		|	Объекты.ВидИзменения КАК ВидИзменения,
		|	Объекты.ОбъектМетаданных КАК ОбъектМетаданных,
		|	ПРЕДСТАВЛЕНИЕ(СоставЛогическихПодсистем.ЛогическаяПодсистема) КАК Подсистемы,
		|	ЕСТЬNULL(ОтветственныеЛогическихПодсистемСрезПоследних.Ответственный, """") КАК Ответственные,
		|	ЕСТЬNULL(КоличествоРолей, 0) КоличествоРолей,
		|	ЕСТЬNULL(НЕ Объекты.ОбъектМетаданных.Наименование Подобно ""Роль.%"", Ложь) КАК НеобходимыРоли
		|ИЗ
		|	Объекты КАК Объекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставЛогическихПодсистем КАК СоставЛогическихПодсистем
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛогическихПодсистем.СрезПоследних КАК
		|				ОтветственныеЛогическихПодсистемСрезПоследних
		|			ПО СоставЛогическихПодсистем.ЛогическаяПодсистема = ОтветственныеЛогическихПодсистемСрезПоследних.ЛогическаяПодсистема
		|		ПО Объекты.ОбъектМетаданных = СоставЛогическихПодсистем.ОбъектМетаданных
		|		левое соединение ПраваНаОбъектыМетаданных
		|		по Объекты.ОбъектМетаданных = ПраваНаОбъектыМетаданных.ОбъектМетаданных";
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Запрос.УстановитьПараметр("МассивИменОбъектов", ТаблицаОбъектов.ВыгрузитьКолонку("ИмяОбъекта"));
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти

#Область Git

Функция КомандаПереходаВКаталогGit1С(Хранилище)

	Текст =
	"%ДискКаталогаGit1С%:
	|cd %КаталогGit1С%\%ИмяПапкиGit%";
	Текст = СтрЗаменить(Текст, "%ДискКаталогаGit1С%", ДискКаталогаGit1С());
	Текст = СтрЗаменить(Текст, "%КаталогGit1С%", КаталогGit1С());
	Текст = СтрЗаменить(Текст, "%ИмяПапкиGit%", ИмяПапкиGitХранилища(Хранилище));
	Возврат Текст;

КонецФункции

Функция ДискКаталогаGit1С()

	КаталогGit1С = КаталогGit1С();
	Возврат Лев(КаталогGit1С, СтрНайти(КаталогGit1С, ":") - 1);

КонецФункции

Функция КаталогGit1С() Экспорт

	Возврат "D:\repos\git1c";

КонецФункции

Функция КаталогЛоговСкриптов_GitSync() Экспорт

	Возврат "D:\logs\script-log\gitSync";

КонецФункции

#КонецОбласти

Функция ЗапуститьПриложениеPS(ИмяФайла)

	КодВозврата = 0;
	ЗапуститьПриложение("powershell -file " + ИмяФайла, , Истина, КодВозврата);
	Возврат КодВозврата;

КонецФункции

Процедура СохранитьТекст(Текст, ИмяФайла) Экспорт
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
	ЗаписьТекста.Записать(Текст);
	ЗаписьТекста.Закрыть();

КонецПроцедуры

Функция ПрочитатьТекст(ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		Возврат "";
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	Возврат Текст;

КонецФункции

// TODO: Откорректировать имена
Функция АктивныеПроектыЗадачи(ЗадачаМетеор, ТолькоАктивные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияХранилища.Ссылка.Владелец КАК Хранилище
	|ПОМЕСТИТЬ АктивныеХранилищаЗадачи
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
	|		ПО (ЗадачиМетеорВерсийХранилища.ВерсияХранилища = ИсторияХранилища.Ссылка)
	|			И (ЗадачиМетеорВерсийХранилища.ЗадачаМетеор В (&ЗадачаМетеор))
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МаксимальныйПериод.Период КАК Период,
	|			МаксимальныйПериод.ВерсияХранилища КАК ВерсияХранилища,
	|			МаксимальныйПериод.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная,
	|			СтатусыВерсийХранилища.Период КАК Период1,
	|			СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища1,
	|			СтатусыВерсийХранилища.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная1,
	|			СтатусыВерсийХранилища.Статус КАК Статус,
	|			СтатусыВерсийХранилища.Ответственный КАК Ответственный,
	|			СтатусыВерсийХранилища.Процесс КАК Процесс,
	|			СтатусыВерсийХранилища.Комментарий КАК Комментарий
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(СтатусыВерсийХранилища.Период) КАК Период,
	|				СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
	|				МАКСИМУМ(СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК ДатаЗаписиУниверсальная
	|			ИЗ
	|				РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|			ГДЕ
	|				ИСТИНА
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СтатусыВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|				ПО МаксимальныйПериод.ВерсияХранилища = СтатусыВерсийХранилища.ВерсияХранилища
	|					И МаксимальныйПериод.Период = СтатусыВерсийХранилища.Период
	|					И МаксимальныйПериод.ДатаЗаписиУниверсальная = СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК СтатусыВерсийХранилищаСрезПоследних
	|		ПО (СтатусыВерсийХранилищаСрезПоследних.ВерсияХранилища = ИсторияХранилища.Ссылка)
	|ГДЕ
	|	(&ОтключитьОтборТолькоАктивные
	|			ИЛИ НЕ ЕСТЬNULL(СтатусыВерсийХранилищаСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.ЗагрузкаДанных)) = ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.Перенесено))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Конфигурации.Ссылка КАК Проект
	|ИЗ
	|	Справочник.Конфигурации КАК Конфигурации
	|ГДЕ
	|	Конфигурации.ХранилищеРазработки В
	|			(ВЫБРАТЬ
	|				АктивныеХранилищаЗадачи.Хранилище
	|			ИЗ
	|				АктивныеХранилищаЗадачи)";
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
	Запрос.УстановитьПараметр("ОтключитьОтборТолькоАктивные", Не ТолькоАктивные);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

#Область РаботаС_ВанСкрипт

Функция ВыполнитьСкрипт(ИмяСкрипта, ПараметрыСкрипта)

	ФайлОшибки = ИмяВременногоФайла();
	ФайлПараметров = ФайлПараметров(ПараметрыСкрипта, ФайлОшибки);

	КомандаСкрипта = КомандаСкрипта(ИмяСкрипта, ФайлПараметров);
	КодВозврата = 0;
	ЗапуститьПриложение(КомандаСкрипта, , Истина, КодВозврата);

	ВыполненУспешно = КодВозврата = 0;
	Если Не ВыполненУспешно Тогда
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ПрочитатьТекст(ФайлОшибки));
		Попытка
			ВызватьИсключение "";
		Исключение
			ТекстИсключения = СтрШаблон(
				"При выполнении скрипта ""%1"" возникли ошибки.
				|Код возврата: %2
				|Стек: %3
				|Ошибки:
				|%4",			
				ИмяСкрипта,
				КодВозврата,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстОшибки);
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖР_GIT("ВыполнитьСкрипт"),
				УровеньЖурналаРегистрации.Информация,
				,
				,
				ТекстИсключения);
		КонецПопытки;
	КонецЕсли;

	УдалитьФайлы(ФайлОшибки);
	УдалитьФайлы(ФайлПараметров);

	Возврат ВыполненУспешно;

КонецФункции

// К удалению
Функция ФайлПараметров(ПараметрыСкрипта, ФайлОшибки)

	ПараметрыСкрипта.Вставить("ФайлОшибки", ФайлОшибки);

	ФайлПараметров = ИмяВременногоФайла();
	Текст = СтроковыеФункцииУККлиентСервер.ЗаписатьЗначениеJSON(ПараметрыСкрипта);
	СохранитьТекст(Текст, ФайлПараметров);



	Возврат ФайлПараметров;

КонецФункции

Функция КомандаСкрипта(ИмяСкрипта, ФайлПараметров = "")

	ИмяКонстантыПутьСкрипта = "ПутьСкрипта_" + ИмяСкрипта;
	КомандаСкрипта = Константы.Путь_oscript.Получить() + " " + Константы[ИмяКонстантыПутьСкрипта].Получить();

	Если ЗначениеЗаполнено(ФайлПараметров) Тогда
		КомандаСкрипта = КомандаСкрипта + " " + ФайлПараметров;
	КонецЕсли;

	Возврат КомандаСкрипта;

КонецФункции

Функция ПутьКПлатформе1С(Хранилище) Экспорт

	Результат = КаталогПрограммы() + "\1cv8.exe";//FIXME: КаталогПрограммы()
	Версия1С = Версия1С("");
	Если Версия1С <> Хранилище.ВерсияПлатформы И ЗначениеЗаполнено(Хранилище.ВерсияПлатформы) Тогда
		Результат = СтрЗаменить(Результат, Версия1С, Хранилище.ВерсияПлатформы);
	КонецЕсли;
	Возврат Результат;

КонецФункции

Функция Версия1С(ВерсияПлатформы)

	Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
		Возврат ВерсияПлатформы;
	Иначе
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Возврат СистемнаяИнформация.ВерсияПриложения;
	КонецЕсли;

КонецФункции

Функция СтрокаСоединения_v8(СтрокаСоединения)

	Если СтрНайти(СтрокаСоединения, "File=") = 1 Тогда
		СтрокаСоединения_v8 = СтрокаСоединения;
	Иначе
		СтрокаСоединения_v8 = СтрЗаменить(СтрокаСоединения, """", "");
	КонецЕсли;
	СтрокаСоединения_v8 = "/IBConnectionString " + СтрокаСоединения_v8;

	Возврат СтрокаСоединения_v8;

КонецФункции

Функция ИмяВременногоКаталога()

	Каталог = Константы.КаталогВременныхФайлов.Получить() + "\" + Строка(Новый УникальныйИдентификатор);
	СоздатьКаталог(Каталог);
	Возврат Каталог;

КонецФункции

Функция МеткаПоНомерам(Знач Номера) Экспорт

	Если Номера.Количество() = 0 Тогда
		Возврат "<нет изменений>";
	КонецЕсли;

	Возврат СтрСоединить(Номера, ", ");

КонецФункции

//+++
Функция ИмяВременногоФайла(Расширение = "", Префикс = "")

	// Формат имени временного файла: <Каталог временных файлов>/<Имя файла (Префикс_УИД.Расширение)>
	Возврат 
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Константы.КаталогВременныхФайлов.Получить()) +
		?(ПустаяСтрока(Префикс), "", Префикс + "_") +
		Строка(Новый УникальныйИдентификатор()) +
		?(ПустаяСтрока(Расширение), "", "." + Расширение);
		
КонецФункции

Функция ПоследняяВерсияХранилища(Хранилище)
	
	Результат = Справочники.ИсторияХранилища.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Хранилище", Хранилище);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсторияХранилища.Ссылка
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|ГДЕ
	|	ИсторияХранилища.Владелец = &Хранилище
	|УПОРЯДОЧИТЬ ПО
	|	ИсторияХранилища.Код УБЫВ";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
