
#Область Логирование_Операций_SQL
// Подробная информация https://bookstack.vkusvill.ru/books/informatsionnye-sistemy/chapter/is-sql-connect

// Функция - Прокси выполнить запрос 1С
// Выполняет запрос и возвращает результат в виде таблицы значений. Является обязательной для использования в текущей базе Финансы.
// https://bookstack.vkusvill.ru/books/informatsionnye-sistemy/page/osobennosti-raboty-operacii-proksivypolnitzapros1s
//
// Параметры:
//  ТекстЗапроса			- Строка, Тест запроса в терминах 1С принимающей базы, например: "ВЫБРАТЬ ПЕРВЫЕ 1 Наименованиие ИЗ Справочник.ФизическиеЛица ГДЕ Код=&Код"
//  ПараметрыЗапроса		- Структура, Содержит все параметры запроса. Ключ: имя параметра, значение: значение параметра.
//  ИмяБазы1С				- Строка, Имя базы 1С, например "CRM" или "FIN"
//  ТочкаВхода				- Строка, Контекст (имя модуля), откуда вызывается функция, для удобной отладки возможных проблем, 
//  ДополнительныеПараметры	- Структура, произвольная структура дополнительных параметров. Не обязательный параметр.
//			Расширенные возможности типизации результата, выполнения пакета запросов за один раз и т.д.
// 
// Возвращаемое значение:
//  Таблица значений с результатом запроса
//
// ДополнительныеПараметры.ПоляЗамены - Необязательный параметр, пример структуры:
//	ПоляЗамены = Новый Структура("СлужбаДоставки, СпособДоставкиЗаказов", "Справочник.СлужбыКурьерскойДоставки", "Перечисление.СпособыДоставкиЗаказов");
Функция ПроксиВыполнитьЗапрос1С(ТекстЗапроса, ПараметрыЗапроса, ИмяБазы1С, ТочкаВхода, ДополнительныеПараметры=Неопределено) Экспорт
	ПоляЗамены = ?(ТипЗнч(ДополнительныеПараметры)=Тип("Структура") и ДополнительныеПараметры.Свойство("ПоляЗамены"), ДополнительныеПараметры.ПоляЗамены, Новый Структура);
	ПоляЗаменыСтр = Новый Массив;
	Для Каждого Эл Из ПоляЗамены Цикл
		ПоляЗаменыСтр.Добавить(Эл.Ключ);
	КонецЦикла;
	ПоляЗаменыСтр = СтрСоединить(ПоляЗаменыСтр, ",");
	Если ЗначениеЗаполнено(ПоляЗаменыСтр) Тогда
		ПараметрыЗапроса.Вставить("КолонкиСсылки", ПоляЗаменыСтр);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОперации", "Запрос1С");
	СтруктураПараметров.Вставить("ТекстЗапроса", ТекстЗапроса);
	СтруктураПараметров.Вставить("СтруктураПараметровХП", ЗначениеВСтрокуВнутр(ПараметрыЗапроса));
	СтруктураПараметров.Вставить("СерверSQL", "1С");
	СтруктураПараметров.Вставить("БазаSQL", ИмяБазы1С);
	СтруктураПараметров.Вставить("ТочкаВхода", ТочкаВхода);
	Если ТипЗнч(ДополнительныеПараметры)=Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнительныеПараметры, Истина);
	КонецЕсли;
	ТЗ = ВыполнитьОперациюSQLПрокси(СтруктураПараметров);
	
	Для Каждого Эл Из ПоляЗамены Цикл
		ТЗ.Колонки.Удалить(Эл.Ключ);
		ТЗ.Колонки.Добавить(Эл.Ключ);
	КонецЦикла;
	Для Каждого Стр Из ТЗ Цикл
		Для Каждого Эл Из ПоляЗамены Цикл
			Части = СтрРазделить(Эл.Значение, ".");
			Знч = Стр[Эл.Ключ+"GUID"];
			Если ЗначениеЗаполнено(Знч) Тогда
				Если Части[0]="Справочник" Тогда
					Стр[Эл.Ключ] = Справочники[Части[1]].ПолучитьСсылку(Новый УникальныйИдентификатор(Знч));
				ИначеЕсли Части[0]="Документ" Тогда
					Стр[Эл.Ключ] = Документы[Части[1]].ПолучитьСсылку(Новый УникальныйИдентификатор(Знч));
				ИначеЕсли Части[0]="ПланВидаХарактеристик" Тогда
					Стр[Эл.Ключ] = ПланыВидовХарактеристик[Части[1]].ПолучитьСсылку(Новый УникальныйИдентификатор(Знч));
				ИначеЕсли Части[0]="ВнешнийИсточникДанных" Тогда
					Стр[Эл.Ключ] = ВнешниеИсточникиДанных[Части[1]].Таблицы[Части[2]].ПолучитьСсылку(Знч);
				ИначеЕсли Части[0]="Перечисление" Тогда
					Стр[Эл.Ключ] = Перечисления[Части[1]][Знч];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗ;
КонецФункции

// Функция - Прокси выполнить СКД
// Позволяет получить готовый табличный документ отчета на СКД по указанным настройкам
// Так же можно получить данные расшифроки, таблицу значений или дерево значений (передать свойство "ТаблицаЗначений" или "ДеревоЗначений")
// Еще можно передать "ВнешниеНаборы" и "ВозможностьИспользованияВнешнихФункций"
//
// Параметры:
//  СхемаМакет				- Схема КД или готовый макет компановки
//  НастройкиКД				- Настройки КД (можно оставить Неопределено)
//  ИмяБазы1С				- Строка, Имя базы 1С, например "CRM" или "FIN"
//  ТочкаВхода				- Строка, Контекст (имя модуля), откуда вызывается функция, для удобной отладки возможных проблем, 
//  ДополнительныеПараметры	- Структура, произвольная структура дополнительных параметров. Не обязательный параметр.
//			Расширенные возможности типизации результата, выполнения пакета запросов за один раз и т.д.
// 
// Возвращаемое значение:
//	Структура в зависимости от входных параметров
//	При ошибке будут заполнены свойства Ошибка, ОписаниеОшибки и ТипРезультата = "Ошибка"
//
// ДополнительныеПараметры.ПоляЗамены - Необязательный параметр, пример структуры:
//	ПоляЗамены = Новый Структура("СлужбаДоставки, СпособДоставкиЗаказов", "Справочник.СлужбыКурьерскойДоставки", "Перечисление.СпособыДоставкиЗаказов");
// +++АК DORS 2022.04.12
Функция ПроксиВыполнитьСКД(СхемаМакет, НастройкиКД, ИмяБазы1С, ТочкаВхода, ДополнительныеПараметры=Неопределено) Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОперации", "ЗапросСКД");
	СтруктураПараметров.Вставить("СхемаКД", ЗначениеВСтрокуВнутр(СхемаМакет));
	Если НастройкиКД <> Неопределено Тогда
		НастройкиКДКопия = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(НастройкиКД));
		НастройкиКДКопия.ДополнительныеСвойства.Очистить();
		СтруктураПараметров.Вставить("НастройкиКД", ЗначениеВСтрокуВнутр(НастройкиКДКопия));
	Иначе
		СтруктураПараметров.Вставить("НастройкиКД", Неопределено);
	КонецЕсли;
	СтруктураПараметров.Вставить("СерверSQL", "1С");
	СтруктураПараметров.Вставить("БазаSQL", ИмяБазы1С);
	СтруктураПараметров.Вставить("ТочкаВхода", ТочкаВхода);
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнительныеПараметры, Истина);
	КонецЕсли;
	Результат = ВыполнитьОперациюSQLПрокси(СтруктураПараметров);
	
	Возврат Результат;
КонецФункции

// Функция - Прокси выполнить запрос
// Выполняет запрос и возвращает результат в виде таблицы значений. Является обязательной для использования в текущей базе Финансы.
// Подробная информация https://bookstack.vkusvill.ru/books/informatsionnye-sistemy/chapter/is-sql-connect
//
// Параметры:
//  ТекстЗапроса			- Строка, текст запроса в терминах SQL
//  ИмяСервераБазы			- Строка, Имя сервера SQL, например "srv-sql01" или "srv-sql01/Loyality"
//  ТочкаВхода				- Строка, Контекст (имя модуля), откуда вызывается функция, для удобной отладки возможных проблем, 
//  ДополнительныеПараметры	- Структура, произвольная структура дополнительных параметров. Не обязательный параметр.
//			Расширенные возможности типизации результата, выполнения пакета запросов за один раз и т.д. Подробности в вики
// 
// Возвращаемое значение:
//  Таблица значений с результатом запроса
//
//+++АК DORS 2021.05.12
Функция ПроксиВыполнитьЗапрос(ТекстЗапроса, ИмяСервераБазы, ТочкаВхода, ДополнительныеПараметры=Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОперации", "Запрос");
	СтруктураПараметров.Вставить("ТекстЗапроса", ТекстЗапроса);
	СтруктураПараметров.Вставить("СерверSQL", ИмяСервераБазы);
	СтруктураПараметров.Вставить("ТочкаВхода", ТочкаВхода);
	Если ТипЗнч(ДополнительныеПараметры)=Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнительныеПараметры, Истина);
	КонецЕсли;
	Возврат ВыполнитьОперациюSQLПрокси(СтруктураПараметров);
	
КонецФункции

// Процедура - Прокси выполнить запрос без ТЗ
// Выполняет запрос и не возвращает результат (INSERT, UPDATE, DELETE и др.) Является обязательной для использования в текущей базе Финансы.
// Подробная информация https://bookstack.vkusvill.ru/books/informatsionnye-sistemy/chapter/is-sql-connect
//
// Параметры:
//  ТекстЗапроса			- Строка, Название хранимой процедуры, например "Loyalty.dbo.FOR1C_change_b2b_user_FIO"
//  ИмяСервераБазы			- Строка, Имя сервера SQL, например "srv-sql01"
//  ТочкаВхода				- Строка, Контекст (имя модуля), откуда вызывается функция, для удобной отладки возможных проблем, 
//  ДополнительныеПараметры	- Структура, произвольная структура дополнительных параметров. Не обязательный параметр.
//			Расширенные возможности типизации результата, выполнения пакета запросов за один раз и т.д. Подробности в вики
// 
//+++АК DORS 2021.05.12
Процедура ПроксиВыполнитьЗапросБезТЗ(ТекстЗапроса, ИмяСервераБазы, ТочкаВхода, ДополнительныеПараметры=Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры)=Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнительныеПараметры);
	КонецЕсли;
	СтруктураПараметров.Вставить("ВидОперации", "ЗапросБезТЗ");
	ПроксиВыполнитьЗапрос(ТекстЗапроса, ИмяСервераБазы, ТочкаВхода, СтруктураПараметров);
	
КонецПроцедуры

// Функция - Прокси выполнить запрос с параметрами
// Выполняет запрос и возвращает результат в виде таблицы значений. Является обязательной для использования в текущей базе Финансы.
// Подробная информация https://bookstack.vkusvill.ru/books/informatsionnye-sistemy/chapter/is-sql-connect
//
// Параметры:
//  ТекстЗапроса			- Строка, текст запроса в терминах SQL
//  МассивПараметров		- Массив, содержащий все параметры по порядку
//  ИмяСервераБазы			- Строка, Имя сервера SQL, например "srv-sql01" или "srv-sql01/Loyality"
//  ТочкаВхода				- Строка, Контекст (имя модуля), откуда вызывается функция, для удобной отладки возможных проблем, 
//  ДополнительныеПараметры	- Структура, произвольная структура дополнительных параметров. Не обязательный параметр.
//			Расширенные возможности типизации результата, выполнения пакета запросов за один раз и т.д. Подробности в вики
// 
// Возвращаемое значение:
//  Таблица значений с результатом запроса
//
//+++АК DORS 2021.11.29
Функция ПроксиВыполнитьЗапросПараметры(ТекстЗапроса, МассивПараметров, ИмяСервераБазы, ТочкаВхода, ДополнительныеПараметры=Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОперации", "ЗапросПараметры");
	СтруктураПараметров.Вставить("ТекстЗапроса", ТекстЗапроса);
	СтруктураПараметров.Вставить("ПараметрыЗапроса", МассивПараметров);
	СтруктураПараметров.Вставить("СерверSQL", ИмяСервераБазы);
	СтруктураПараметров.Вставить("ТочкаВхода", ТочкаВхода);
	Если ТипЗнч(ДополнительныеПараметры)=Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнительныеПараметры, Истина);
	КонецЕсли;
	Возврат ВыполнитьОперациюSQLПрокси(СтруктураПараметров);
	
КонецФункции

// Процедура - Прокси выполнить запрос с параметрами без ТЗ
// Выполняет запрос и не возвращает результат (INSERT, UPDATE, DELETE и др.) Является обязательной для использования в текущей базе Финансы.
// Подробная информация https://bookstack.vkusvill.ru/books/informatsionnye-sistemy/chapter/is-sql-connect
//
// Параметры:
//  ТекстЗапроса			- Строка, Название хранимой процедуры, например "Loyalty.dbo.FOR1C_change_b2b_user_FIO"
//  МассивПараметров		- Массив, содержащий все параметры по порядку
//  ИмяСервераБазы			- Строка, Имя сервера SQL, например "srv-sql01"
//  ТочкаВхода				- Строка, Контекст (имя модуля), откуда вызывается функция, для удобной отладки возможных проблем, 
//  ДополнительныеПараметры	- Структура, произвольная структура дополнительных параметров. Не обязательный параметр.
//			Расширенные возможности типизации результата, выполнения пакета запросов за один раз и т.д. Подробности в вики
// 
//+++АК DORS 2021.11.29
Процедура ПроксиВыполнитьЗапросПараметрыБезТЗ(ТекстЗапроса, МассивПараметров, ИмяСервераБазы, ТочкаВхода, ДополнительныеПараметры=Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры)=Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнительныеПараметры);
	КонецЕсли;
	СтруктураПараметров.Вставить("ВидОперации", "ЗапросПараметрыБезТЗ");
	ПроксиВыполнитьЗапросПараметры(ТекстЗапроса, МассивПараметров, ИмяСервераБазы, ТочкаВхода, СтруктураПараметров);
	
КонецПроцедуры

// Функция - Прокси выполнить хранимую процедуру
// Выполняет вызов хранимой процедуры. Является обязательной для использования в текущей базе Финансы.
// Если процедура содержит параметры, то их можно передать в СтруктураПараметровХП
// Подробная информация https://bookstack.vkusvill.ru/books/informatsionnye-sistemy/chapter/is-sql-connect
//
// Параметры:
//  ХранимаяПроцедура		- Строка, Название хранимой процедуры, например "Loyalty.dbo.FOR1C_change_b2b_user_FIO"
//  СтруктураПараметровХП	- Структура, Содержит параметры хранимой процедуры. Ключ: имя параметра, значение: значение параметра.
//  ИмяСервераБазы			- Строка, Имя сервера SQL, например "srv-sql01"
//  ТочкаВхода				- Строка, Контекст (имя модуля), откуда вызывается функция, для удобной отладки возможных проблем, 
//		например "Справочник.АК_КонтрагентыИзМобильногоПриложения.МодульМенеджера"
//  ДополнительныеПараметры	- Структура, произвольная структура дополнительных параметров. Не обязательный параметр.
//			Расширенные возможности типизации результата, выполнения пакета запросов за один раз и т.д. Подробности в вики
// 
// Возвращаемое значение:
//  Массив - Возвращает массив ТЗ результатов вместо одной ТЗ
//
//+++АК DORS 2021.05.12
Функция ПроксиВыполнитьХранимуюПроцедуру(ХранимаяПроцедура, СтруктураПараметровХП, ИмяСервераБазы, ТочкаВхода, ДополнительныеПараметры=Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры)=Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнительныеПараметры);
	КонецЕсли;
	СтруктураПараметров.Вставить("ВидОперации", "ХранимаяПроцедура");
	СтруктураПараметров.Вставить("СтруктураПараметровХП", СтруктураПараметровХП);
	Возврат ПроксиВыполнитьЗапрос(ХранимаяПроцедура, ИмяСервераБазы, ТочкаВхода, СтруктураПараметров);
	
КонецФункции

// Процедура - Прокси выполнить хранимую процедуру без ТЗ
// Выполняет вызов хранимой процедуры, которая не возвращает результат. Является обязательной для использования в текущей базе Финансы.
// Если процедура содержит возвращаемые параметры, они будут добавлены в входной параметр СтруктураПараметровХП и могут быть после прочитаны
// Подробная информация https://bookstack.vkusvill.ru/books/informatsionnye-sistemy/chapter/is-sql-connect
//
// Параметры:
//  ХранимаяПроцедура		- Строка, Название хранимой процедуры, например "Loyalty.dbo.FOR1C_change_b2b_user_FIO"
//  СтруктураПараметровХП	- Структура, Содержит параметры хранимой процедуры. Ключ: имя параметра, значение: значение параметра.
//  ИмяСервераБазы			- Строка, Имя сервера SQL, например "srv-sql01"
//  ТочкаВхода				- Строка, Контекст (имя модуля), откуда вызывается функция, для удобной отладки возможных проблем, 
//		например "Справочник.АК_КонтрагентыИзМобильногоПриложения.МодульМенеджера"
//  ДополнительныеПараметры	- Структура, произвольная структура дополнительных параметров. Не обязательный параметр.
//			Расширенные возможности типизации результата, выполнения пакета запросов за один раз и т.д. Подробности в вики
// 
//+++АК DORS 2021.05.12
Процедура ПроксиВыполнитьХранимуюПроцедуруБезТЗ(ХранимаяПроцедура, СтруктураПараметровХП=Неопределено, ИмяСервераБазы, ТочкаВхода, ДополнительныеПараметры=Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры)=Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнительныеПараметры);
	КонецЕсли;
	СтруктураПараметров.Вставить("ВидОперации", "ХранимаяПроцедураБезТЗ");
	СтруктураПараметров.Вставить("СтруктураПараметровХП", СтруктураПараметровХП);
	ПроксиВыполнитьЗапрос(ХранимаяПроцедура, ИмяСервераБазы, ТочкаВхода, СтруктураПараметров);
	
КонецПроцедуры

// Функция - Прокси выполнить хранимую процедуру возвратные параметры
// Выполняет вызов хранимой процедуры в SQL базах. Является обязательной для использования в текущей базе Финансы.
// Если процедура содержит возвращаемые параметры, они будут добавлены в входной параметр СтруктураПараметровХП и могут быть после прочитаны
// Подробная информация https://bookstack.vkusvill.ru/books/informatsionnye-sistemy/chapter/is-sql-connect
//
// Параметры:
//  ХранимаяПроцедура		- Строка, Название хранимой процедуры, например "Loyalty.dbo.FOR1C_change_b2b_user_FIO"
//  СтруктураПараметровХП	- Структура, Содержит параметры хранимой процедуры. Ключ: имя параметра, значение: значение параметра.
//  ИмяСервераБазы			- Строка, Имя сервера SQL, например "srv-sql01"
//  ТочкаВхода				- Строка, Контекст (имя модуля), откуда вызывается функция, для удобной отладки возможных проблем, 
//		например "Справочник.АК_КонтрагентыИзМобильногоПриложения.МодульМенеджера"
//  ДополнительныеПараметры	- Структура, структура дополнительных параметров. Например, если передать Новый Структура("Result"), 
//		в входной параметр СтруктураПараметровХП добавится элемент "Result" с значением числа Return, который возвращает хранимая процедура.
// 
// Возвращаемое значение:
//  Массив - Возвращает массив ТЗ результатов вместо одной ТЗ
//
//+++АК DORS 2021.05.12
Функция ПроксиВыполнитьХранимуюПроцедуруВозвратныеПараметры(ХранимаяПроцедура, СтруктураПараметровХП, ИмяСервераБазы, ТочкаВхода, ДополнительныеПараметры=Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры)=Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнительныеПараметры);
	КонецЕсли;
	СтруктураПараметров.Вставить("ВидОперации", "ХранимаяПроцедураOutput"+?(СтруктураПараметров.Свойство("Result"), "Result", ""));
	СтруктураПараметров.Вставить("СтруктураПараметровХП", СтруктураПараметровХП);
	СтруктураПараметров.Вставить("НесколькоРезультатов", Истина);
	МассивРезультатов = ПроксиВыполнитьЗапрос(ХранимаяПроцедура, ИмяСервераБазы, ТочкаВхода, СтруктураПараметров);
	
	// Заполним возвратные параметры в СтруктураПараметровХП
	Если МассивРезультатов.Количество()>0 Тогда
		ТЗПараметры = МассивРезультатов[МассивРезультатов.ВГраница()];
		Если ТЗПараметры.Количество()=1 Тогда
			Стр = ТЗПараметры[0];
			Для Каждого Кол Из ТЗПараметры.Колонки Цикл
				СтруктураПараметровХП.Вставить(Кол.Имя, Стр[Кол.Имя]);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивРезультатов;
	
КонецФункции

// Функция - Прокси выполнить хранимую процедуру и вернуть результат как число
// Выполняет вызов хранимой процедуры в SQL базах. Является обязательной для использования в текущей базе Финансы.
// Если процедура содержит возвращаемые параметры, они будут добавлены в входной параметр СтруктураПараметровХП и могут быть после прочитаны
// Подробная информация https://bookstack.vkusvill.ru/books/informatsionnye-sistemy/chapter/is-sql-connect
//
// Параметры:
//  ХранимаяПроцедура		- Строка, Название хранимой процедуры, например "Loyalty.dbo.FOR1C_change_b2b_user_FIO"
//  СтруктураПараметровХП	- Структура, Содержит параметры хранимой процедуры. Ключ: имя параметра, значение: значение параметра.
//  ИмяСервераБазы			- Строка, Имя сервера SQL, например "srv-sql01"
//  ТочкаВхода				- Строка, Контекст (имя модуля), откуда вызывается функция, для удобной отладки возможных проблем, 
//		например "Справочник.АК_КонтрагентыИзМобильногоПриложения.МодульМенеджера"
//  ДополнительныеПараметры	- Структура, структура дополнительных параметров. Например, если передать Новый Структура("Result"), 
//		в входной параметр СтруктураПараметровХП добавится элемент "Result" с значением числа Return, который возвращает хранимая процедура.
// 
// Возвращаемое значение:
//  Число - результат работы хранимой процедуры
//
//+++АК DORS 2021.05.19
Функция ПроксиВыполнитьХранимуюПроцедуруВернутьРезультатЧисло(ХранимаяПроцедура, СтруктураПараметровХП, ИмяСервераБазы, ТочкаВхода, ДополнительныеПараметры=Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры)=Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнительныеПараметры);
	КонецЕсли;
	СтруктураПараметров.Вставить("Result", Истина);
	ПроксиВыполнитьХранимуюПроцедуруВозвратныеПараметры(ХранимаяПроцедура, СтруктураПараметровХП, ИмяСервераБазы, ТочкаВхода, СтруктураПараметров);
	Возврат СтруктураПараметровХП.Result;
	
КонецФункции

// Функция - Прокси получить текст хранимой процедуры
// Возвращает исходный текст указанной хранимой процедуры. 
//
// Параметры:
//  ХранимаяПроцедура		- Строка, Название хранимой процедуры, например "Loyalty.dbo.FOR1C_change_b2b_user_FIO"
//  ИмяСервераБазы			- Строка, Имя сервера SQL, например "srv-sql01" или "srv-sql01/Loyalty"
//  ТочкаВхода				- Строка, Контекст (имя модуля), откуда вызывается функция, для удобной отладки возможных проблем, 
//  ДополнительныеПараметры	- Структура, структура дополнительных параметров (аналогично другим функциям)
// 
// Возвращаемое значение:
//  Строка - Исходный текст хранимой процедуры
//
//+++АК DORS 2021.05.12
Функция ПроксиПолучитьТекстХранимойПроцедуры(ХранимаяПроцедура, ИмяСервераБазы, ТочкаВхода, ДополнительныеПараметры=Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры)=Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнительныеПараметры);
	КонецЕсли;
	СтруктураПараметров.Вставить("ВидОперации", "ТекстХранимойПроцедуры");
	ТЗ = ПроксиВыполнитьЗапрос(ХранимаяПроцедура, ИмяСервераБазы, ТочкаВхода, СтруктураПараметров);
	Возврат СтрСоединить(ТЗ.ВыгрузитьКолонку("Text"), "");
	
КонецФункции

// Функция - Прокси получить параметры хранимой процедуры
// Возвращает таблицу значений с описанием параметров указанной хранимой процедуры
//
// Параметры:
//  ХранимаяПроцедура		- Строка, Название хранимой процедуры, например "Loyalty.dbo.FOR1C_change_b2b_user_FIO"
//  ИмяСервераБазы			- Строка, Имя сервера SQL, например "srv-sql01" или "srv-sql01/Loyalty"
//  ТочкаВхода				- Строка, Контекст (имя модуля), откуда вызывается функция, для удобной отладки возможных проблем, 
//  ДополнительныеПараметры	- Структура, структура дополнительных параметров (аналогично другим функциям)
// 
// Возвращаемое значение:
//  Таблица значений. Колонки: ИмяПараметра, Направление, Тип, Длина
//
//+++АК DORS 2021.05.12
Функция ПроксиПолучитьПараметрыХранимойПроцедуры(ХранимаяПроцедура, ИмяСервераБазы, ТочкаВхода, ДополнительныеПараметры=Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры)=Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнительныеПараметры);
	КонецЕсли;
	СтруктураПараметров.Вставить("ВидОперации", "ПараметрыХранимойПроцедуры");
	Возврат ПроксиВыполнитьЗапрос(ХранимаяПроцедура, ИмяСервераБазы, ТочкаВхода, СтруктураПараметров);
	
КонецФункции

// Функция - Прокси получить параметры соединения
// Возвращает структуру с параметрами подключения к служебному веб сервису
//
// Параметры:
//  ИмяБазы1С				- Строка	- Синоним базы 1С, например "CRM" или "IzbenkaFin"
//  ТочкаВхода				- Строка	- Контекст (имя модуля), откуда вызывается функция, для удобной отладки возможных проблем, 
//  ДополнительныеПараметры	- Структура	- Структура дополнительных параметров (аналогично другим функциям)
// 
// Возвращаемое значение:
//  - Структура (Местоположение, ПространствоИмен, ИмяСервиса, Пользователь, Пароль)
//
Функция ПроксиПолучитьПараметрыСоединения(ИмяБазы1С, ТочкаВхода, ДополнительныеПараметры=Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры)=Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнительныеПараметры);
	КонецЕсли;
	СтруктураПараметров.Вставить("ВидОперации", "ПолучитьПараметрыСоединения");
	СтруктураПараметров.Вставить("БазаSQL", ИмяБазы1С);
	СтруктураПараметров.Вставить("ТочкаВхода", ТочкаВхода);
	Возврат ВыполнитьОперациюSQLПрокси(СтруктураПараметров);
	
КонецФункции

// Функция - НормализоватьДатуВДиапазонеDATETIME 
// Заменяет год в дате, если преобразование в тип данных datetime привело к выходу значения за пределы диапазона.
// от DATETIME 01-01-1753 00:00:00 до 31-12-9999
Функция НормализоватьДатуВДиапазонеDATETIME(Дата, УстанавливатьТекущийГод=Ложь) Экспорт
	Если ТипЗнч(Дата)<>Тип("Дата") Тогда
		Возврат Дата;
	КонецЕсли;
	МинимальнаяДата = '17530101';
	Если Дата<МинимальнаяДата Тогда
		Если УстанавливатьТекущийГод Тогда
			Возврат Дата(Год(ТекущаяДатаСеанса()), Месяц(Дата), День(Дата), Час(Дата), Минута(Дата), Секунда(Дата));
		Иначе
			Возврат МинимальнаяДата;
		КонецЕсли;
	КонецЕсли;
	Возврат Дата;
КонецФункции

// Функция - ПроксиПолучитьКаталогОбмена
// Получает адрес сетевой папки временного каталога обмена
//
// Параметры:
//	Нет
// 
// Возвращаемое значение:
//  Строка, значение константы КаталогДляОбмена
//
//+++АК DORS 2022.01.13
Функция ПроксиПолучитьКаталогОбмена() Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресРесурсаСуффикс", "GetExchangeCatalog");
	Возврат ВыполнитьОперациюSQLПрокси(СтруктураПараметров);
КонецФункции

// Функция - Прокси выполнить запрос ClickHouse
// Выполняет запрос в ClickHouse и возвращает результат в виде таблицы значений.
//
// Параметры:
//  ТекстЗапроса			- Строка, Тест запроса в терминах ClickHouse принимающей базы, например: "select * from development.v_func_mp_order_create limit 10"
//  ИмяСервера				- Строка, Имя сервера или IP адрес службы ClickHouse, например "10.0.15.238" или "dwh-clickhouse01"
//  ТочкаВхода				- Строка, Контекст (имя модуля), откуда вызывается функция, для удобной отладки возможных проблем, 
//  ДополнительныеПараметры	- Структура, произвольная структура дополнительных параметров. Не обязательный параметр.
//			Можно указать Порт, если он не стандартный (8123), а так же другой Логин или Пароль
// 
// Возвращаемое значение:
//  Таблица значений с результатом запроса
Функция ПроксиВыполнитьЗапросClickHouse(ТекстЗапроса, ИмяСервера, ТочкаВхода, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОперации", "ЗапросClickHouse");
	СтруктураПараметров.Вставить("ТекстЗапроса", ТекстЗапроса);
	СтруктураПараметров.Вставить("СерверSQL", ИмяСервера);
	СтруктураПараметров.Вставить("ТочкаВхода", ТочкаВхода);
	Если ТипЗнч(ДополнительныеПараметры)=Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнительныеПараметры, Истина);
	КонецЕсли;
	Возврат ВыполнитьОперациюSQLПрокси(СтруктураПараметров);
	
КонецФункции

// Функция - Выполнить операцию SQL Прокси
// Служебная функция для вызова веб сервиса и распаковки результата
// Подробная информация https://bookstack.vkusvill.ru/books/informatsionnye-sistemy/chapter/is-sql-connect
//+++АК DORS 2021.05.12
Функция ВыполнитьОперациюSQLПрокси(СтруктураПараметров)

	ИмяПользователя = ОбщегоНазначенияПовтИспУК.ЗначенияРеквизитовОбъекта(Пользователи.ТекущийПользователь(), Новый Структура("Наименование")).Наименование;
	
	СтруктураПараметров.Вставить("БазаИнициатор", СтрокаСоединенияИнформационнойБазы());	
	СтруктураПараметров.Вставить("Пользователь", ИмяПользователя);	
	СтруктураПараметров.Вставить("ИмяКомпьютера", ИмяКомпьютера());
	СтруктураПараметров.Вставить("НомерСеанса", НомерСеансаИнформационнойБазы());
	
	Если СтруктураПараметров.Свойство("СоответствиеПолейТипам") И ТипЗнч(СтруктураПараметров.СоответствиеПолейТипам)<>Тип("Строка") Тогда
		// ОписаниеТипов не сериализуется в JSON
		СтруктураПараметров.СоответствиеПолейТипам = ЗначениеВСтрокуВнутр(СтруктураПараметров.СоответствиеПолейТипам);
	КонецЕсли;
	
	ПараметрыПодключения = ВнешниеДанныеВызовСервераПовтИсп.ПолучитьПараметрыПодключенияSqlConnect();
	
	РезультатSQLКоннект = Неопределено;
	ТекстОшибки = "";
	Для Каждого СтрокаПараметры Из ПараметрыПодключения Цикл
		Попытка
			ЧастиПараметры = СтрРазделить(СтрокаПараметры, ":");
			ИмяВебСервера = ЧастиПараметры[0];
			АдресРесурса = ЧастиПараметры[1];
			РезультатSQLКоннект = ВыполнитьОперациюSQLПроксиТранспорт(ИмяВебСервера, АдресРесурса, СтруктураПараметров);
			Если РезультатSQLКоннект.КодСостояния <> 200 Тогда
				ТекстОшибки = РезультатSQLКоннект.ПолучитьТелоКакСтроку();
				Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
					ТекстОшибки = СтрШаблон("SQL Connect Код состояния: %1", РезультатSQLКоннект.КодСостояния);
				КонецЕсли;
				Продолжить;
			Иначе
				ТекстОшибки = "";
			КонецЕсли;
			Прервать;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Детали = Новый Массив;
		Детали.Добавить(ТекстОшибки);
		Если СтрНайти(ТекстОшибки, "Не могу установить соединение") или СтрНайти(ТекстОшибки, "Couldn't resolve host name") Тогда
			Детали.Добавить("http://"+СтрЗаменить(ПараметрыПодключения[0], ":", "/"));
		Иначе
			Если СтруктураПараметров.Свойство("СерверSQL") Тогда
				Детали.Добавить(СтрШаблон("СерверSQL: %1", СтруктураПараметров.СерверSQL));
			КонецЕсли;
			Если СтруктураПараметров.Свойство("ТекстЗапроса") Тогда
				ТекстЗапросаСокр = Лев(СтруктураПараметров.ТекстЗапроса, 60);
				Если ТекстЗапросаСокр <> СтруктураПараметров.ТекстЗапроса Тогда
					ТекстЗапросаСокр = ТекстЗапросаСокр + "...";
				КонецЕсли;
				Детали.Добавить(СтрШаблон("ТекстЗапроса: %1", ТекстЗапросаСокр));
			КонецЕсли;
			Если СтруктураПараметров.Свойство("ТочкаВхода") Тогда
				Детали.Добавить(СтрШаблон("ТочкаВхода: %1", СтруктураПараметров.ТочкаВхода));
			КонецЕсли;
		КонецЕсли;
		ТекстОшибки = СтрСоединить(Детали, Символы.ПС);
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	Если РезультатSQLКоннект = Неопределено Тогда
		ВызватьИсключение "Не получен результат SQL Коннект";
	КонецЕсли;
	
	ОтветТекст = РезультатSQLКоннект.ПолучитьТелоКакСтроку();
	Если ОтветТекст="" Тогда
		Возврат "";
	ИначеЕсли Лев(ОтветТекст, "2")="\\" Тогда // если результат большого размера, то он возвращается в виде ссылки на файл
		ЗначениеИзФайла = ЗначениеИзФайла(ОтветТекст);
		Возврат ЗначениеИзФайла;
	ИначеЕсли Лев(ОтветТекст, "1")="{" Тогда
		Возврат ЗначениеИзСтрокиВнутр(ОтветТекст);
	Иначе 
		Возврат XMLЗначение(Тип("ХранилищеЗначения"), ОтветТекст).Получить();
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьОперациюSQLПроксиТранспорт(ИмяВебСервера, Знач АдресРесурса, СтруктураПараметров);
	Если СтруктураПараметров.Свойство("АдресРесурсаСуффикс") Тогда
		АдресРесурса = АдресРесурса + СтруктураПараметров.АдресРесурсаСуффикс;
	КонецЕсли;
	Соединение = Новый HTTPСоединение(ИмяВебСервера, 80);
	Запрос 	   = Новый HTTPЗапрос(АдресРесурса);
	Запрос.УстановитьТелоИзСтроки(ЗначениеВСтрокуВнутр(СтруктураПараметров));
	РезультатSQLКоннект  = Соединение.ОтправитьДляОбработки(Запрос);
	Возврат РезультатSQLКоннект;
КонецФункции

// Функция - ЗаписатьФайлНаСервере
// Служебное продолжение функции ПолныеПраваЗаписатьФайлНаСервере
//
// Параметры:
//	ИмяФайла	- Полное наименование записываемого файла
//	Данные 		- Строка, Хранилище значения, Текстовый документ или Табличный документ
// 
// Возвращаемое значение:
//  Нет
// +++АК DORS 2022.03.21
Функция ЗаписатьФайлНаСервере(ИмяФайла, Данные) Экспорт
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(Данные);
		ТекстовыйДокумент.Записать(ИмяФайла);
	Иначе
		Данные.Записать(ИмяФайла);
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ВыполнитьЗапросИПолучитьТЗПрокси(ТекстЗапроса, ИмяСервера, ИмяБазы, ТочкаВхода)  Экспорт

	СтруктураПараметров = Новый Структура(
		"ВидОперации,
		|ТочкаВхода,
		|ТекстЗапроса,
		|ИмяКомпьютера,
		|БазаИнициатор,
	    |Пользователь,
	    |СерверSQL,
	    |БазаSQL,
		|ДрайверSQL",
		"Запрос",
		ТочкаВхода,
		ТекстЗапроса,
		ИмяКомпьютера(),
		,
		,
	    ИмяСервера,
	    ИмяБазы,
		"SQLOLEDB.1");
				
	Возврат ВыполнитьОперациюSQLПрокси(СтруктураПараметров);	

КонецФункции // ВыполнитьЗапросИПолучитьТЗПрокси()

Функция ФорматПоля(Поле, ФорматДатыБезВремени = Ложь) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Дата") Тогда
		Если ФорматДатыБезВремени Тогда
			Возврат "'" + Формат(Поле, "ДФ=yyyy-MM-dd") + "'";
		Иначе	
			Возврат "'" + Формат(Поле, "ДФ=yyyy-MM-ddTHH:mm:ss") + "'";
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Поле) = Тип("Строка") Тогда
		Возврат "'" + СтрЗаменить(Поле,"'","''") + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("Число") Тогда
		Возврат Формат(Поле, "ЧРД=.; ЧН=; ЧГ=0");
	ИначеЕсли ТипЗнч(Поле) = Тип("Булево") Тогда
		Возврат ?(Поле = Истина, 1, 0);
	ИначеЕсли Поле = NULL Тогда
		Возврат "NULL";
	ИначеЕсли ТипЗнч(Поле) = Тип("Массив") Тогда
		мРез = Новый Массив;
		Для Каждого Эл Из Поле Цикл
			мРез.Добавить(ФорматПоля(Эл, ФорматДатыБезВремени));
		КонецЦикла;
		Возврат СтрСоединить(мРез, ", ");
	КонецЕсли;
	
КонецФункции

// Функция - Получить результат запроса
//
// Параметры:
//  ТекстЗапроса		 - Строка	 - Текст запроса
//  СтруктураПараметров	 - Структура	 - Параметры
// 
// Возвращаемое значение:
//   - Таблица значений
//
Функция ПолучитьРезультатЗапроса(ТекстЗапроса, СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Параметры = СтруктураПараметров;
	
	Если ТипЗнч(Параметры) = Тип("Строка") Тогда
		Параметры = ЗначениеИзСтрокиВнутр(Параметры);
	КонецЕсли;
	// Временное решение, пока не обновлю итилиум
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ХранилищеДляРБ", "ХранилищеОбновления");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Проекты1С", "Конфигурации");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Спр.Хранилище.Наименование", "Спр.Владелец.ХранилищеОбновления.Наименование");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого Параметр Из Параметры Цикл                                  
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	ТипОбхода = ОбходРезультатаЗапроса.Прямой;
	Если Параметры.Свойство("ТипОбходаСИерархией") Тогда
		ТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
	ИначеЕсли Параметры.Свойство("Дерево") Тогда
		ТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкам;
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить(ТипОбхода);
	
	Если Параметры.Свойство("КолонкиСсылки") Тогда
		мКолонки = СтрРазделить(Параметры.КолонкиСсылки, ",");
		Для Каждого ИмяКолонки Из мКолонки Цикл
			Результат.Колонки.Добавить(СокрЛП(ИмяКолонки)+"GUID");
			Для Каждого Стр Из Результат Цикл
				Стр[СокрЛП(ИмяКолонки)+"GUID"] = XMLСтрока(Стр[СокрЛП(ИмяКолонки)]);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтправитьСообщеие(Текст, ВремяПовторнойОтправки, ОтправтьВТелеграм = Ложь, Знач ПользователиДляУпоминанияВТелеграм = Неопределено) Экспорт
	
	Если ПользователиДляУпоминанияВТелеграм = Неопределено Тогда
		ПользователиДляУпоминанияВТелеграм = Новый Массив;
	ИначеЕсли Не ТипЗнч(ПользователиДляУпоминанияВТелеграм) = Тип("Массив") Тогда
		Массив = Новый Массив;
		Массив.Добавить(ПользователиДляУпоминанияВТелеграм);
		ПользователиДляУпоминанияВТелеграм = Массив;
	КонецЕсли;
	
	ПоследняяДатаОтправки = РегистрыСведений.ОтправленныеУведомления.ПоследняяДатаОтправки(Текст);
	Если ПоследняяДатаОтправки + ВремяПовторнойОтправки < ТекущаяДатаСеанса() Тогда
		
		Если ОтправтьВТелеграм Тогда
			ТекстТелеграм = Текст;
			ТелеграмIDПользователей = Справочники.Пользователи.ТелеграмIDПользователей(ПользователиДляУпоминанияВТелеграм);
			ТелеграмIDПользователейСтрокой = СтрСоединить(ТелеграмIDПользователей, " ");
			Если ЗначениеЗаполнено(ТелеграмIDПользователейСтрокой) Тогда
				ТекстТелеграм = ТелеграмIDПользователейСтрокой + Символы.ПС + ТекстТелеграм;
			КонецЕсли;
			ВнешниеДанные.ОтправитьВТелеграм(ТекстТелеграм);
		КонецЕсли;
		РегистрыСведений.ОтправленныеУведомления.Отразить(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьВТелеграм(Текст, Знач Канал = "") Экспорт
	
	Если БлокировкаРаботыСВнешнимиРесурсамиУКПовтИсп.ЭтоКопияБазы() Тогда
		Сообщить("В копии заблокированна отправка в Телеграмм");
		Сообщить(Текст);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Канал) Тогда
		Канал = ТелеграмКаналRepos();
	КонецЕсли;
	
	ИмяХП = "Send_Notification_Bot_Group";
	СерверБазаХП = "srv-sql01/Com";
	ПараметрыХП = Новый Структура("name, msg", Канал, Текст);
	ТочкаВхода = "ОтправитьВТелеграм";
	ДополнительныеПараметры = Новый Структура("ОтключитьЛогирование", Ложь);
	
	ВнешниеДанные.ПроксиВыполнитьХранимуюПроцедуруБезТЗ(ИмяХП, ПараметрыХП, СерверБазаХП, ТочкаВхода, ДополнительныеПараметры);
	
КонецПроцедуры

Функция ТелеграмКаналRepos()
	
	Возврат "Repos";
	
КонецФункции

Функция ПолучитьСервисРаботыСБазами(Таймаут = Неопределено) Экспорт
	СтрокаПодключения = РегистрыСведений.ЗначенияНастроекПрограммы.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПрограммы.АдресСервисаРаботыСБазами);
	WSОпределение = Новый WSОпределения(СтрокаПодключения, , , , Таймаут);
	Сервис = Новый WSПрокси(WSОпределение, "SQLConnect", "Exchange", "ExchangeSoap", , Таймаут);
	Возврат Сервис;
КонецФункции

#Область ЦКК

Процедура ОткрытьИнцидент_ЗависаниеИсторииХранилища(Текст) Экспорт
	
	Если Константы.ИнцидентОткрыт_ЗависаниеИсторииХранилища.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнцидентВЦКК(ТипЦКК_ЗависаниеИсторииХранилища(), КодЦКК_ЗависаниеИсторииХранилища(), Текст);
	
	Константы.ИнцидентОткрыт_ЗависаниеИсторииХранилища.Установить(Истина);
	
КонецПроцедуры

Процедура ЗакрытьИндидент_ЗависаниеИсторииХранилища() Экспорт
	
	Если Не Константы.ИнцидентОткрыт_ЗависаниеИсторииХранилища.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьИнцдиентВЦКК(ТипЦКК_ЗависаниеИсторииХранилища(), КодЦКК_ЗависаниеИсторииХранилища());
	
	Константы.ИнцидентОткрыт_ЗависаниеИсторииХранилища.Установить(Ложь);
	
КонецПроцедуры

Функция ТипЦКК_ЗависаниеИсторииХранилища()
	
	Возврат "ЗависаниеИсторииХранилища";
	
КонецФункции

Функция КодЦКК_ЗависаниеИсторииХранилища()
	
	Возврат "ЗависаниеИсторииХранилища";
	
КонецФункции


Процедура ОткрытьИнцидентВЦКК(Знач ТипИнцидента, Знач КодИнцидента, Знач ТекстСообщения)
	
	АдресЦКК = СтрШаблон("http://%1/ckk/hs/inputincidenttickets/", Константы.АдресСервераЦКК.Получить());
	
	Если ПустаяСтрока(ТипИнцидента) Тогда	
		ВызватьИсключение НСтр("ru = 'Не указан тип инцидента'"); 
    КонецЕсли;
    
	Если ПустаяСтрока(КодИнцидента) Тогда	
		ВызватьИсключение НСтр("ru = 'Не указан код инцидента'"); 
    КонецЕсли;
    
	Если ПустаяСтрока(ТекстСообщения) Тогда	
		ВызватьИсключение НСтр("ru = 'Не указано сообщение инцидента'"); 
	КонецЕсли;
	
	Инцидент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Incidents/1_0_1_1", "Incident"));
	Инцидент.Type		= ТипИнцидента;
	Инцидент.Id 		= КодИнцидента;
	Инцидент.Message	= ТекстСообщения;
	Инцидент.Count		= 1;
	Инцидент.Infobase	= "";
	Инцидент.Cluster	= АдресЦКК;
	
	КодСостояния = ВыполнитьЗапросЦКК("Open", Инцидент, АдресЦКК);
	
	Если КодСостояния = 200 Тогда
		Сообщить("Тип инцидента """ + ТипИнцидента + """, код инцидента """ + КодИнцидента + """ - открыт успешно.");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьИнцдиентВЦКК(Знач ТипИнцидента, Знач КодИнцидента)
	
	АдресЦКК = СтрШаблон("http://%1/ckk/hs/inputincidenttickets/", Константы.АдресСервераЦКК.Получить());
    Если ПустаяСтрока(ТипИнцидента) Тогда	
		ВызватьИсключение НСтр("ru = 'Не указан тип инцидента'"); 
    КонецЕсли;
    
	Если ПустаяСтрока(КодИнцидента) Тогда	
		ВызватьИсключение НСтр("ru = 'Не указан код инцидента'"); 
	КонецЕсли;
    
    Инцидент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Incidents/1_0_1_1", "IncidentClose"));
	Инцидент.Type		= ТипИнцидента;
	Инцидент.Id 		= КодИнцидента;
    
    КодСостояния = ВыполнитьЗапросЦКК("Close", Инцидент, АдресЦКК);
	
	Если КодСостояния = 200 Тогда
		Сообщить("Тип инцидента """ + ТипИнцидента + """, код инцидента """ + КодИнцидента + """ - закрыт успешно.");
	КонецЕсли;
    
КонецПроцедуры

Функция ВыполнитьЗапросЦКК(КомандаЗапроса, Данные, АдресЦКК)
	
	СтруктурированныйАдрес = СтруктураURIЦКК(АдресЦКК);
	Запрос = Новый HTTPЗапрос();
	Запрос.АдресРесурса = СтруктурированныйАдрес.ПутьНаСервере + КомандаЗапроса;
	
	Запрос.Заголовки["Accept-Charset"] = "utf-8";
	Запрос.Заголовки["Accept"] = "application/xml";
	Запрос.Заголовки["Content-Type"] = "application/xml;charset=utf-8";
	Если ТипЗнч(Данные)=Тип("ОбъектXDTO") Тогда
		Поток = Новый ЗаписьXML(); 
		Поток.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(Поток, Данные);
		ДанныеКакСтрока = Поток.Закрыть();
		Запрос.УстановитьТелоИзСтроки(ДанныеКакСтрока);
	Иначе
		Запрос.УстановитьТелоИзСтроки(Данные);
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(
		СтруктурированныйАдрес.Хост, 
		СтруктурированныйАдрес.Порт, 
		,
		
	);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ОтветСтрока = "Код состояния=" + Ответ.КодСостояния +", " + Ответ.ПолучитьТелоКакСтроку();
		Сообщить(ОтветСтрока);
	КонецЕсли;
	
	Возврат Ответ.КодСостояния;
	
КонецФункции

Функция СтруктураURIЦКК(Знач СтрокаURI, Знач ПарамЛогин = "", Знач ПарамПароль = "") Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Если ПарамЛогин = "" И ПарамПароль = "" Тогда
		Позиция = СтрНайти(СтрокаАвторизации, ":");
		Если Позиция > 0 Тогда
			Логин = Лев(СтрокаАвторизации, Позиция - 1);
			Пароль = Сред(СтрокаАвторизации, Позиция + 1);
		КонецЕсли;
	Иначе
		Логин = ПарамЛогин;
		Пароль = ПарамПароль;
	КонецЕсли;

		
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
