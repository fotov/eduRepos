#Область ПрограммныйИнтерфейс

Функция ПроверитьРазрешениеЗапускаРегламентныхЗаданий() Экспорт
	ЭтоКопияБазы = БлокировкаРаботыСВнешнимиРесурсамиУКПовтИсп.ЭтоКопияБазы();
	Если ЭтоКопияБазы Тогда
		ВызватьИсключение "Регламентные задания в копии базы запрещены";
	КонецЕсли;
	Возврат Истина;
КонецФункции

Процедура АвтозавершениеЗадач() Экспорт

	ПроверитьРазрешениеЗапускаРегламентныхЗаданий();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	|	ЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
	|	ЗадачаИсполнителя.Дата КАК Дата
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.Выполнена
	|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И НЕ ЗадачаИсполнителя.БизнесПроцесс.ПометкаУдаления
	|	И НЕ ЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.Робот)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Попытка
			ТипБизнесПроцесса = Выборка.БизнесПроцесс.Метаданные();
			Если БизнесПроцессы[ТипБизнесПроцесса.Имя].МожноАвтозавершитьЗадачу(Выборка.Задача, Выборка.ТочкаМаршрута) Тогда
				БизнесПроцессы[ТипБизнесПроцесса.Имя].ПриАвтозавершении(Выборка.Задача, Выборка.ТочкаМаршрута);
				об = Выборка.Задача.ПолучитьОбъект();
				об.ВыполнитьЗадачу();
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации(
				"АвтозавершениеЗадач",
				УровеньЖурналаРегистрации.Предупреждение,
				,
				Выборка.Задача,
				СтрШаблон("Не удалось автозавершить задачу %1 по причине: %2", Выборка.Задача, ОписаниеОшибки()));
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнениеЗадачРоботом() Экспорт

	ПроверитьРазрешениеЗапускаРегламентныхЗаданий();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТИПЗНАЧЕНИЯ(ЗадачаИсполнителя.БизнесПроцесс) КАК ТипБизнесПроцесса,
	|	ЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.Выполнена
	|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И НЕ ЗадачаИсполнителя.БизнесПроцесс.ПометкаУдаления
	|	И ЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.Робот)";
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Ключ = Строка(Выборка.ТипБизнесПроцесса) + "." + Выборка.ТочкаМаршрута.Имя;

		ИмяМетода = "РегЗадания.ВыполнениеЗадачРоботомПоТочкеМаршрута";
		Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Ключ, Состояние", ИмяМетода, Ключ, СостояниеФоновогоЗадания.Активно));
		Если Не Задания.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(Выборка.ТочкаМаршрута);
		Наименование = НСтр("ru = 'Выполнения задач %1'");
		Наименование = СтрШаблон(Наименование, Выборка.ТочкаМаршрута);
		ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыЗадания, Ключ, Наименование);

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнениеЗадачРоботомПоТочкеМаршрута(ТочкаМаршрута) Экспорт

	Если ТочкаМаршрута = БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПеренестиИзменения Тогда
		ПеренестиСогласованныеИзмененияГруппой();
	Иначе
		ВыполнениеЗадачРоботомПоТочкеМаршрутаПродолжение(ТочкаМаршрута);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчисткаКаталогаВременныхФайлов() Экспорт

	ПроверитьРазрешениеЗапускаРегламентныхЗаданий();

	ДатаУдаления = ТекущаяДатаСеанса() - 2 * 60 * 60;

	Для Каждого Файл Из НайтиФайлы(Константы.КаталогВременныхФайлов.Получить(), "*") Цикл
		Если Файл.ПолучитьВремяИзменения() < ДатаУдаления Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура МониторингСистемы() Экспорт

	ПроверитьРазрешениеЗапускаРегламентныхЗаданий();

	МониторингСистемы_ЗависаниеПолученияИсторииХранилища();
	МониторингСистемы_НеизвестныйПользовательВерсииХранилища();
	МониторингСистемы_ОшибкиКоммитов();
	МониторингСистемы_ЗависаниеОбработкиЭтаповЗадачМетеор();
	
	МониторингСлужебный.МониторингПроверкиАПК_ОбработчикЗадания();
	МониторингСлужебный.СинхронизацияХранилищаС_GIT_ОбработчикЗадания();
	МониторингСлужебный.МониторингОбработкиЗадач_ОбработчикЗадания();
	
КонецПроцедуры

Процедура ОчисткаДанных() Экспорт

	ПроверитьРазрешениеЗапускаРегламентныхЗаданий();

	ЗакрытьКоммиты();
	ОчиститьРегистрСодержащийДату("ОтправленныеУведомления");
	ОчиститьРегистрСодержащийДату("СобытияМетеор",, "День");
	ОчиститьРегистрСодержащийДату("ИсторияЗаписиРабочихДанных", 60, "День");
	РаботаСХранилищамиСлужебный.ОчисткаУстаревшихВетокИтоговыхИзмененийОбработчикЗадания();

КонецПроцедуры

Процедура РассылкаПисем() Экспорт

	ПроверитьРазрешениеЗапускаРегламентныхЗаданий();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронноеПисьмо.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	|ГДЕ
	|	ЭлектронноеПисьмо.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ ЭлектронноеПисьмо.ПометкаУдаления";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Письмо = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если Не ПустаяСтрока(Письмо.Получатели) Тогда
			Письмо.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура - Перезапуск подготовки тестовых баз
// Выполняется утром после восстановления ночных баз. После этой операции лучше обновить наши клоны предпрод
Процедура ПерезапускПодготовкиТестовыхБаз() Экспорт
	БизнесПроцессы.КонвейерОбработки.ПерезапускПодготовкиТестовыхБаз();
КонецПроцедуры

// Процедура - Запуск интеграционных тестов
// Проверяет надо ли запустить БП подгтоовки тестовых сред, если надо, то запускает
Процедура ЗапускИнтеграционныхТестов() Экспорт

	БизнесПроцессы.ПодготовкаСредыДляИнтеграционныхТестов.РегламентЗапускИнтеграционныхТестов();

КонецПроцедуры

// Процедура - Отправить оповещения обновлений в метеор
// ИП-00039868. В чат Метеора формировать запись о переносе в прод изменений по заданию.
Процедура ОтправитьОповещенияОбновленийВМетеор() Экспорт
	
	ПроверитьРазрешениеЗапускаРегламентныхЗаданий();
	РегистрыСведений.ИсторияПримененияКонфигураций.ОтправитьОповещенияОбновленийВМетеор();
	
КонецПроцедуры

Процедура ОтправкаОповещенийТелеграмОбработчикЗадания() Экспорт

КонецПроцедуры

Процедура ЗагрузкаПроизводственногоКалендаряОбработчикЗадания() Экспорт
	
	// Регистр ПроизводственныйКалендарь
	Год = Год(ТекущаяДатаСеанса()) + 1;
	Соединение = Новый HTTPСоединение("isdayoff.ru", , , , , , Новый ЗащищенноеСоединениеOpenSSL);
	Запрос = Новый HTTPЗапрос(СтрШаблон("api/getdata?year=%1&delimeter=%2", Формат(Год, "ЧГ="), "%0A"));
	Ответ = Соединение.Получить(Запрос);
	
	Если Ответ.КодСостояния < 300 Тогда
		День = Дата(Год, 1, 1);
		ТипыДня = СтрРазделить(Ответ.ПолучитьТелоКакСтроку(), Символы.ПС);
		Для каждого ТипДня Из ТипыДня Цикл
			Запись = РегистрыСведений.ПроизводственныйКалендарь.СоздатьМенеджерЗаписи();
			Запись.День = День;
			Запись.Выходной = ТипДня = "1";
			Запись.Записать();
			День = День + 86400;
		КонецЦикла; 
	Иначе
		ТекстОшибки = СтрШаблон(
			"При загрузке производственного календаря возникли ошибки:
			|%1",
			Ответ.ПолучитьТелоКакСтроку());
		ВызватьИсключение ТекстОшибки
	КонецЕсли; 

КонецПроцедуры

Процедура ОбработкаЭтаповЗадачМетеорОбработчикЗадания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияЭтаповЗадачиМетеор.ЗадачаМетеор КАК ЗадачаМетеор,
		|	ИсторияЭтаповЗадачиМетеор.Этап КАК Этап,
		|	ИсторияЭтаповЗадачиМетеор.Дата КАК Дата,
		|	ИсторияЭтаповЗадачиМетеор.ЗадачаМетеор.id КАК ЗадачаМетеорИД,
		|	ИсторияЭтаповЗадачиМетеор.Исполнитель КАК Исполнитель,
		|	ИсторияЭтаповЗадачиМетеор.Тип КАК Тип
		|ИЗ
		|	РегистрСведений.ИсторияЭтаповЗадачиМетеор КАК ИсторияЭтаповЗадачиМетеор
		|ГДЕ
		|	НЕ ИсторияЭтаповЗадачиМетеор.Обработано
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсторияЭтаповЗадачиМетеор.Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Если Не ИнтеграцияСМетеор.ЭтоСтек1С(Выборка.ЗадачаМетеор)
					И Не (Выборка.Этап = Справочники.ЭтапыЗадачиМетеор.ПроверкаДокументации)
					И Не (Выборка.Этап = Справочники.ЭтапыЗадачиМетеор.ПодключениеРасширения)
					И Не (Выборка.Этап = Справочники.ЭтапыЗадачиМетеор.ОтключениеРасширения)
					Тогда
				УстановитьОбработанЗаписиИсторииЭтапов(Выборка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если Не Выборка.Этап = Справочники.ЭтапыЗадачиМетеор.СогласоватьАрхитектуру Тогда
				ЗавершитьСогласованиеАрхитектуры(Выборка);
			КонецЕсли;
			
			Если Выборка.Этап = Справочники.ЭтапыЗадачиМетеор.ПроверкаКода
				Или Выборка.Этап = Справочники.ЭтапыЗадачиМетеор.ПроверкаКодаПодключениеРасширения Тогда
				ЗапуститьПроцесс("ПредварительнаяПроверка", Выборка);
			ИначеЕсли Выборка.Этап = Справочники.ЭтапыЗадачиМетеор.СозданиеЗаявкиНаПереносВПродуктив Тогда
				ЗапуститьПроцесс("СогласованиеПереноса", Выборка);
			ИначеЕсли Выборка.Этап = Справочники.ЭтапыЗадачиМетеор.ПроверкаДокументации Тогда
				ЗапуститьПроверкуДокументации("ПроверкаДокументации", Выборка);
			ИначеЕсли Выборка.Этап = Справочники.ЭтапыЗадачиМетеор.СогласоватьАрхитектуру Тогда
				ЗапуститьСогласованиеАрхитектуры("СогласованиеАрхитектуры", Выборка);
			ИначеЕсли Выборка.Этап = Справочники.ЭтапыЗадачиМетеор.ПодключениеРасширения Тогда
				ЗапуститьПроцесс("ПодключениеРасширения", Выборка);
			ИначеЕсли Выборка.Этап = Справочники.ЭтапыЗадачиМетеор.ОтключениеРасширения Тогда
				ЗапуститьПроцесс("ОтключениеРасширения", Выборка);
			ИначеЕсли Выборка.Этап = Справочники.ЭтапыЗадачиМетеор.ВыполнитьОсновнуюРаботуПоЗаданию Тогда
				МЗ = РегистрыСведений.ОчередьСозданияВетокГитПоЗадаче.СоздатьМенеджерЗаписи();
				МЗ.Период = ТекущаяДатаСеанса();
				МЗ.ЗадачаМетеор = Выборка.ЗадачаМетеор;
				МЗ.Статус = Перечисления.СтатусыОперацийОбработкиОчереди.ОжидаетОбработки;
				МЗ.Записать();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ЗадачаМетеор) Тогда
				Справочники.ЗадачиМетеор.ОбновитьДанныеИзМетеора(Выборка.ЗадачаМетеор);
			КонецЕсли;
			
			УстановитьОбработанЗаписиИсторииЭтапов(Выборка);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				"Обработка этапов задач метеор",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.ИсторияЭтаповЗадачиМетеор,
				Выборка.ЗадачаМетеор,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТекстHTML(ТабДок)
	П = ПолучитьИмяВременногоФайла();
	ТабДок.Записать(П, ТипФайлаТабличногоДокумента.HTML);
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(П);
	Текст = ТекстДок.ПолучитьТекст();
	ТекстДок = Неопределено;
	УдалитьФайлы(П);
	Возврат Текст;
КонецФункции

Процедура МониторингСистемы_ЗависаниеПолученияИсторииХранилища()

	ДатаОбновления = РегистрыСведений.ИсторияОбновленияХранилища.ПоследняяДатаОбновленияХранилищ();
	МаксимальныйПорогОбновления = 30 * 60;
	Если ДатаОбновления + МаксимальныйПорогОбновления > ТекущаяДатаСеанса() Тогда
		ВнешниеДанные.ЗакрытьИндидент_ЗависаниеИсторииХранилища();
		Возврат;
	КонецЕсли;

	Текст = СтрШаблон("Сбой обновления хранилищ. Последняя дата обновления %1", ДатаОбновления);
	ВремяПовторнойОтправки = 30 * 60;
	ОповещаемыеПользователи = Мониторинг.ПользователиПоВидуМониторинга(Справочники.ВидыМониторинга.ЗависаниеПолученияИсторииХранилища);
	ВнешниеДанные.ОтправитьСообщеие(Текст, ВремяПовторнойОтправки, Истина, ОповещаемыеПользователи);

	ВнешниеДанные.ОткрытьИнцидент_ЗависаниеИсторииХранилища(Текст);

КонецПроцедуры

Процедура МониторингСистемы_ЗависаниеОбработкиЭтаповЗадачМетеор()

	МаксимальнаяЗадержкаОбработки = 5*60; // 5 минут
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсторияЭтаповЗадачиМетеор.ВремяЗагрузки КАК Дата
		|ИЗ
		|	РегистрСведений.ИсторияЭтаповЗадачиМетеор КАК ИсторияЭтаповЗадачиМетеор
		|ГДЕ
		|	НЕ ИсторияЭтаповЗадачиМетеор.Обработано
		|	И ИсторияЭтаповЗадачиМетеор.ВремяЗагрузки <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсторияЭтаповЗадачиМетеор.ВремяЗагрузки";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ДатаПервойНеобработаннойЗаписи = Выборка.Дата;
	
	ЗадержкаВремени = ТекущаяДатаСеанса() - ДатаПервойНеобработаннойЗаписи;
	Если ЗадержкаВремени < МаксимальнаяЗадержкаОбработки Тогда
		Возврат;
	КонецЕсли;

	Текст = СтрШаблон("Сбой обработки этапов задач Метеор. Первая необработанная запись в: %1. Задержка: %2 больше ограничения %3",
		ДатаПервойНеобработаннойЗаписи,
		СтроковыеФункцииУККлиентСервер.ПредставлениеВремени(ЗадержкаВремени),
		СтроковыеФункцииУККлиентСервер.ПредставлениеВремени(МаксимальнаяЗадержкаОбработки));
	ВремяПовторнойОтправки = 3 * 60;
	ОповещаемыеПользователи = Мониторинг.ПользователиПоВидуМониторинга(Справочники.ВидыМониторинга.ЗависаниеПолученияИсторииХранилища);
	ВнешниеДанные.ОтправитьСообщеие(Текст, ВремяПовторнойОтправки, Истина, ОповещаемыеПользователи);

КонецПроцедуры

Процедура МониторингСистемы_ОшибкаВыгрузкиДополнений()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьВыгрузкиДополнений.Период КАК Период,
		|	ОчередьВыгрузкиДополнений.ВерсияДополнения КАК ВерсияДополнения
		|ИЗ
		|	РегистрСведений.ОчередьВыгрузкиДополнений КАК ОчередьВыгрузкиДополнений
		|ГДЕ
		|	ОчередьВыгрузкиДополнений.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиДополнений.Ошибка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьВыгрузкиДополнений.Период УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Текст = СтрШаблон("При выгрузке дополнений возникли ошибки. %1, %2", Выборка.Период, Выборка.ВерсияДополнения);
	ВремяПовторнойОтправки = 15 * 60;
	ОповещаемыеПользователи = Мониторинг.ПользователиПоВидуМониторинга(Справочники.ВидыМониторинга.БлокировкаЗадачКонвеера);
	ВнешниеДанные.ОтправитьСообщеие(Текст, ВремяПовторнойОтправки, Истина, ОповещаемыеПользователи);
	
КонецПроцедуры

Процедура МониторингСистемы_НеизвестныйПользовательВерсииХранилища()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияХранилища.Ссылка КАК Ссылка,
		|	ИсторияХранилища.Код КАК Код,
		|	ИсторияХранилища.Автор КАК Автор,
		|	ПРЕДСТАВЛЕНИЕ(ЗадачиМетеорВерсийХранилища.ЗадачаМетеор) КАК ЗадачаМетеор,
		|	ПРЕДСТАВЛЕНИЕ(ИсторияХранилища.Владелец) КАК Хранилище
		|ИЗ
		|	Справочник.ИсторияХранилища КАК ИсторияХранилища
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
		|		ПО (ЗадачиМетеорВерсийХранилища.ВерсияХранилища = ИсторияХранилища.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МаксимальныйПериод.Период КАК Период,
		|			МаксимальныйПериод.ВерсияХранилища КАК ВерсияХранилища,
		|			МаксимальныйПериод.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная,
		|			СтатусыВерсийХранилища.Период КАК Период1,
		|			СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища1,
		|			СтатусыВерсийХранилища.ДатаЗаписиУниверсальная КАК ДатаЗаписиУниверсальная1,
		|			СтатусыВерсийХранилища.Статус КАК Статус,
		|			СтатусыВерсийХранилища.Ответственный КАК Ответственный,
		|			СтатусыВерсийХранилища.Процесс КАК Процесс,
		|			СтатусыВерсийХранилища.Комментарий КАК Комментарий
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(СтатусыВерсийХранилища.Период) КАК Период,
		|				СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
		|				МАКСИМУМ(СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК ДатаЗаписиУниверсальная
		|			ИЗ
		|				РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
		|			ГДЕ
		|				СтатусыВерсийХранилища.ВерсияХранилища.Владелец В
		|						(ВЫБРАТЬ
		|							Конфигурации.ХранилищеРазработки КАК ХранилищеРазработки
		|						ИЗ
		|							Справочник.Конфигурации КАК Конфигурации)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СтатусыВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
		|				ПО МаксимальныйПериод.ВерсияХранилища = СтатусыВерсийХранилища.ВерсияХранилища
		|					И МаксимальныйПериод.Период = СтатусыВерсийХранилища.Период
		|					И МаксимальныйПериод.ДатаЗаписиУниверсальная = СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК СтатусыВерсийХранилищаСрезПоследних
		|		ПО (СтатусыВерсийХранилищаСрезПоследних.ВерсияХранилища = ИсторияХранилища.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ИсторияХранилища.Автор = Пользователи.Код
		|ГДЕ
		|	СтатусыВерсийХранилищаСрезПоследних.Статус <> &СтатусПеренесено
		|	И Пользователи.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("СтатусПеренесено", Перечисления.СтатусыИсторииХранилищ.Перенесено);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Текст = СтрШаблон("Не удалось определить пользователя версии хранилища: %1 %2, автор: %3. (Задача: %4). Возможна блокировка работы конвеера обработки хранилищ.",
			Выборка.Код,
			Выборка.Хранилище,
			Выборка.Автор,
			Выборка.ЗадачаМетеор);
		ВремяПовторнойОтправки = 3 * 60;
		ОповещаемыеПользователи = Мониторинг.ПользователиПоВидуМониторинга(Справочники.ВидыМониторинга.БлокировкаЗадачКонвеера);
		ВнешниеДанные.ОтправитьСообщеие(Текст, ВремяПовторнойОтправки, Истина, ОповещаемыеПользователи);
	КонецЦикла;
	
КонецПроцедуры

Процедура МониторингСистемы_ОшибкиКоммитов()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыВерсийХранилища.ВерсияХранилища КАК Версия,
	|	СтатусыВерсийХранилища.Комментарий КАК Комментарий,
	|	ЕСТЬNULL(Пользователи.Ссылка, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Пользователь
	|ИЗ
	|	РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО СтатусыВерсийХранилища.ВерсияХранилища.Автор = Пользователи.Код
	|ГДЕ
	|	СтатусыВерсийХранилища.Период > &Дата
	|	И СтатусыВерсийХранилища.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.Ошибка)";
		СрокАкиуаотерсиОшибки = 10 * 60;
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса() - СрокАкиуаотерсиОшибки);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		ВремяПовторнойОтправки = 30 * 60;
		ВнешниеДанные.ОтправитьСообщеие(Выборка.Комментарий, ВремяПовторнойОтправки, Истина, Выборка.Пользователь);

	КонецЦикла;

КонецПроцедуры

Процедура ЗакрытьКоммиты()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияХранилища.Ссылка КАК Коммт
	|ПОМЕСТИТЬ Перенесено_И
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Конфигурации КАК Конфигурации
	|		ПО НЕ Конфигурации.ПометкаУдаления
	|		И ИсторияХранилища.Владелец = Конфигурации.ХранилищеРазработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсторияХранилища.Изменены КАК ИзмененыХО
	|		ПО ИсторияХранилища.Ссылка = ИзмененыХО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсторияХранилища.Изменены КАК ИзмененыХР
	|		ПО Конфигурации.ХранилищеОбновления = ИзмененыХР.Ссылка.Владелец
	|		И ИзмененыХО.ИмяОбъекта = ИзмененыХР.ИмяОбъекта
	|		И ИзмененыХО.Ссылка.Дата < ИзмененыХР.Ссылка.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			*
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(СтатусыВерсийХранилища.Период) КАК Период,
	|				СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
	|				МАКСИМУМ(СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК ДатаЗаписиУниверсальная
	|			ИЗ
	|				РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|			ГДЕ
	|				Истина
	|			СГРУППИРОВАТЬ ПО
	|				СтатусыВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|				ПО МаксимальныйПериод.ВерсияХранилища = СтатусыВерсийХранилища.ВерсияХранилища
	|				И МаксимальныйПериод.Период = СтатусыВерсийХранилища.Период
	|				И МаксимальныйПериод.ДатаЗаписиУниверсальная = СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК
	|			СтатусыВерсийХранилищаСрезПоследних
	|		ПО СтатусыВерсийХранилищаСрезПоследних.ВерсияХранилища = ИсторияХранилища.Ссылка
	|ГДЕ
	|	СтатусыВерсийХранилищаСрезПоследних.Статус ЕСТЬ NULL
	|	ИЛИ НЕ СтатусыВерсийХранилищаСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.Перенесено)
	|СГРУППИРОВАТЬ ПО
	|	ИсторияХранилища.Ссылка
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ВЫБОР
	|		КОГДА НЕ ИзмененыХО.ИмяОбъекта ЕСТЬ NULL
	|		И ИзмененыХР.ИмяОбъекта ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Перенесено_И.Коммт КАК Коммт
	|ПОМЕСТИТЬ Перенесено_ИД
	|ИЗ
	|	Перенесено_И КАК Перенесено_И
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Конфигурации КАК Конфигурации
	|		ПО (НЕ Конфигурации.ПометкаУдаления)
	|		И Перенесено_И.Коммт.Владелец = Конфигурации.ХранилищеРазработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсторияХранилища.Добавлены КАК ДобавленыХО
	|		ПО Перенесено_И.Коммт = ДобавленыХО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсторияХранилища.Добавлены КАК ДобавленыХР
	|		ПО (Конфигурации.ХранилищеОбновления = ДобавленыХР.Ссылка.Владелец)
	|		И (ДобавленыХО.ИмяОбъекта = ДобавленыХР.ИмяОбъекта)
	|		И (ДобавленыХО.Ссылка.Дата < ДобавленыХР.Ссылка.Дата)
	|СГРУППИРОВАТЬ ПО
	|	Перенесено_И.Коммт
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ВЫБОР
	|		КОГДА НЕ ДобавленыХО.ИмяОбъекта ЕСТЬ NULL
	|		И ДобавленыХР.ИмяОбъекта ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Перенесено_ИД.Коммт КАК Коммт
	|ПОМЕСТИТЬ Перенесено_ИДУ
	|ИЗ
	|	Перенесено_ИД КАК Перенесено_ИД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Конфигурации КАК Конфигурации
	|		ПО (НЕ Конфигурации.ПометкаУдаления)
	|		И Перенесено_ИД.Коммт.Владелец = Конфигурации.ХранилищеРазработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсторияХранилища.Удалены КАК УдаленыХО
	|		ПО Перенесено_ИД.Коммт = УдаленыХО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсторияХранилища.Удалены КАК УдаленыХР
	|		ПО (Конфигурации.ХранилищеОбновления = УдаленыХР.Ссылка.Владелец)
	|		И (УдаленыХО.ИмяОбъекта = УдаленыХР.ИмяОбъекта)
	|		И (УдаленыХО.Ссылка.Дата < УдаленыХР.Ссылка.Дата)
	|СГРУППИРОВАТЬ ПО
	|	Перенесено_ИД.Коммт
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ВЫБОР
	|		КОГДА НЕ УдаленыХО.ИмяОбъекта ЕСТЬ NULL
	|		И УдаленыХР.ИмяОбъекта ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Перенесено_ИДУ.Коммт КАК Коммт
	|ИЗ
	|	Перенесено_ИДУ КАК Перенесено_ИДУ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РаботаСХранилищами.ЗаписатьСтатусВерсииХранилища(Выборка.Коммт, Перечисления.СтатусыИсторииХранилищ.Перенесено);
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьРегистрСодержащийДату(ИмяРегистра, КоличествоДней = 30, ИмяДаты = "Дата")

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.%ИмяДаты% КАК Дата
	|ИЗ
	|	РегистрСведений.%ИмяРегистра% КАК Таблица
	|ГДЕ
	|	Таблица.%ИмяДаты% < &Дата";
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса() - КоличествоДней * 86400);

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра%", ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяДаты%", ИмяДаты);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		нз = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		нз.Отбор[ИмяДаты].Установить(Выборка.Дата);
		нз.Записать();

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнениеЗадачРоботомПоТочкеМаршрутаПродолжение(ТочкаМаршрута)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Задача,
		|	ЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.ДатаПоследнейПопытки КАК ДатаПоследнейПопытки
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	НЕ ЗадачаИсполнителя.Выполнена
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И НЕ ЗадачаИсполнителя.Заблокирована
		|	И НЕ ЗадачаИсполнителя.БизнесПроцесс.ПометкаУдаления
		|	И ЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.Робот)
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.БизнесПроцесс.ЗадачаМетеор.Срочная УБЫВ,
		|	ЗадачаИсполнителя.Дата";
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Между попытками выполнения задачи не менее 30 секунд
		Если ТекущаяДатаСеанса() - Выборка.ДатаПоследнейПопытки < 60 Тогда
			Продолжить;
		КонецЕсли;
		Задача = Выборка.Задача;
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		Попытка
			ЗадачаОбъект.Заблокировать();
		Исключение
			ЗаписьЖурналаРегистрации(
				"ВыполнениеЗадачРоботом",
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СтрШаблон("Не удалось заблокировать задачу %1 по причине: %2", Задача, ОписаниеОшибки()));
			Продолжить;
		КонецПопытки;

		ЗадачаОбъект.КоличествоПопыток = ЗадачаОбъект.КоличествоПопыток + 1;
		ЗадачаОбъект.ДатаПоследнейПопытки = ТекущаяДатаСеанса();
		Если ЗадачаОбъект.КоличествоПопыток >= 99 И ЗадачаОбъект.ТочкаМаршрута <> БизнесПроцессы.ПредварительнаяПроверка.ТочкиМаршрута.ОжиданиеЗагрузкиКоммитов
			И ЗадачаОбъект.ТочкаМаршрута <> БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ОжиданиеЗагрузкиКоммитов И ЗадачаОбъект.ТочкаМаршрута
			<> БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ОжиданиеНепроверенныхКоммитов И ЗадачаОбъект.ТочкаМаршрута
			<> БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ОжиданиеЗавершенияПайплайна И ЗадачаОбъект.ТочкаМаршрута
			<> БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.СинтаксическийКонтроль И ЗадачаОбъект.ТочкаМаршрута
			<> БизнесПроцессы.ПодготовкаТестовойБазы.ТочкиМаршрута.ОжиданиеПодготовкиКлона И ЗадачаОбъект.ТочкаМаршрута
			<> БизнесПроцессы.ПодготовкаСредыДляИнтеграционныхТестов.ТочкиМаршрута.ОжиданиеЗавершенияПайплайна Тогда
			ЗадачаОбъект.Заблокирована = Истина;
		КонецЕсли;

		ЗадачаОбъект.Записать();
		Если ЗадачаОбъект.Заблокирована Тогда
			ЗадачаОбъект.Разблокировать();
			Продолжить;
		КонецЕсли;
		Попытка
			ТипБизнесПроцесса = Выборка.БизнесПроцесс.Метаданные();
			Если БизнесПроцессы[ТипБизнесПроцесса.Имя].ЗадачаВыполнима(Выборка.Задача, Выборка.ТочкаМаршрута) Тогда
				об = Выборка.Задача.ПолучитьОбъект();
				об.ВыполнитьЗадачу();
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации(
				"ВыполнениеЗадачРоботом",
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СтрШаблон("Не удалось выполнить задачу %1 по причине: %2", Выборка.Задача, ОписаниеОшибки()));
		КонецПопытки;

		ЗадачаОбъект.Разблокировать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиСогласованныеИзмененияГруппой()
	
	ИмяСобытияЖР = "Перенос изменений";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Задача,
		|	ЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.ДатаПоследнейПопытки КАК ДатаПоследнейПопытки,
		|	ВЫРАЗИТЬ(ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс.СогласованиеПереноса).ЗадачаМетеор КАК ЗадачаМетеор
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	НЕ ЗадачаИсполнителя.Выполнена
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И НЕ ЗадачаИсполнителя.Заблокирована
		|	И НЕ ЗадачаИсполнителя.БизнесПроцесс.ПометкаУдаления
		|	И ЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.Робот)
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.БизнесПроцесс.ЗадачаМетеор.Срочная УБЫВ,
		|	ЗадачаИсполнителя.Дата";
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ПеренестиИзменения);
	ЗадачиВОчереди = Запрос.Выполнить().Выгрузить();
	ЗадачиКОбработке = ЗадачиВОчереди.СкопироватьКолонки("Задача,ЗадачаМетеор,БизнесПроцесс");
	Для Каждого Выборка Из ЗадачиВОчереди Цикл
		// Между попытками выполнения задачи не менее 60 секунд
		Если ТекущаяДатаСеанса() - Выборка.ДатаПоследнейПопытки < 60 Тогда
			Продолжить;
		КонецЕсли;
		Задача = Выборка.Задача;
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		Попытка
			ЗадачаОбъект.Заблокировать();
		Исключение
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖР,
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СтрШаблон("Не удалось заблокировать задачу %1 по причине: %2", Задача, ОписаниеОшибки()));
			Продолжить;
		КонецПопытки;

		ЗадачаОбъект.КоличествоПопыток = ЗадачаОбъект.КоличествоПопыток + 1;
		ЗадачаОбъект.ДатаПоследнейПопытки = ТекущаяДатаСеанса();
		Если ЗадачаОбъект.КоличествоПопыток >= 99 И ЗадачаОбъект.ТочкаМаршрута <> БизнесПроцессы.ПредварительнаяПроверка.ТочкиМаршрута.ОжиданиеЗагрузкиКоммитов
			И ЗадачаОбъект.ТочкаМаршрута <> БизнесПроцессы.СогласованиеПереноса.ТочкиМаршрута.ОжиданиеЗагрузкиКоммитов И ЗадачаОбъект.ТочкаМаршрута
			<> БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ОжиданиеНепроверенныхКоммитов И ЗадачаОбъект.ТочкаМаршрута
			<> БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.ОжиданиеЗавершенияПайплайна И ЗадачаОбъект.ТочкаМаршрута
			<> БизнесПроцессы.КонвейерОбработки.ТочкиМаршрута.СинтаксическийКонтроль И ЗадачаОбъект.ТочкаМаршрута
			<> БизнесПроцессы.ПодготовкаТестовойБазы.ТочкиМаршрута.ОжиданиеПодготовкиКлона И ЗадачаОбъект.ТочкаМаршрута
			<> БизнесПроцессы.ПодготовкаСредыДляИнтеграционныхТестов.ТочкиМаршрута.ОжиданиеЗавершенияПайплайна Тогда
			ЗадачаОбъект.Заблокирована = Истина;
		КонецЕсли;

		ЗадачаОбъект.Записать();
		Если ЗадачаОбъект.Заблокирована Тогда
			ЗадачаОбъект.Разблокировать();
			Продолжить;
		КонецЕсли;
		ТипБизнесПроцесса = Выборка.БизнесПроцесс.Метаданные();
		Если БизнесПроцессы[ТипБизнесПроцесса.Имя].ЗадачаВыполнима(Выборка.Задача, Выборка.ТочкаМаршрута) Тогда
			ЗаполнитьЗначенияСвойств(ЗадачиКОбработке.Добавить(), Выборка);
		КонецЕсли;
	КонецЦикла;
	
	// Подбор и перенос задач
	Если Не ЗадачиКОбработке.Количество() Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиКОбработке.Задача КАК Задача,
	|	ЗадачиКОбработке.БизнесПроцесс КАК БизнесПроцесс,
	|	ЗадачиКОбработке.ЗадачаМетеор КАК ЗадачаМетеор
	|ПОМЕСТИТЬ ЗадачиКОбработке
	|ИЗ
	|	&ЗадачиКОбработке КАК ЗадачиКОбработке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияХранилища.Владелец КАК Хранилище,
	|	ИсторияХранилища.Ссылка КАК ВерсияХранилища,
	|	ИсторияХранилища.Владелец.Владелец КАК Конфигурация,
	|	ИсторияХранилища.Код КАК НомерВерсии,
	|	ЗадачиМетеорВерсийХранилища.ЗадачаМетеор КАК ЗадачаМетеор
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИсторияХранилища КАК ИсторияХранилища
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
	|		ПО (ЗадачиМетеорВерсийХранилища.ВерсияХранилища = ИсторияХранилища.Ссылка)
	|			И (ЗадачиМетеорВерсийХранилища.ЗадачаМетеор В
	|				(ВЫБРАТЬ
	|					ЗадачиКОбработке.ЗадачаМетеор
	|				ИЗ
	|					ЗадачиКОбработке КАК ЗадачиКОбработке))
	|ГДЕ
	|	ИсторияХранилища.Владелец В
	|			(ВЫБРАТЬ
	|				Конфигурации.ХранилищеРазработки КАК ХранилищеРазработки
	|			ИЗ
	|				Справочник.Конфигурации КАК Конфигурации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыВерсийХранилищаСрезПоследних.ВерсияХранилища КАК ВерсияХранилища
	|ПОМЕСТИТЬ ВерсииКПереносу
	|ИЗ
	|	(ВЫБРАТЬ
	|		МаксимальныйПериод.ВерсияХранилища КАК ВерсияХранилища,
	|		СтатусыВерсийХранилища.Статус КАК Статус
	|	ИЗ
	|		(ВЫБРАТЬ
	|			МАКСИМУМ(СтатусыВерсийХранилища.Период) КАК Период,
	|			СтатусыВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища,
	|			МАКСИМУМ(СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК ДатаЗаписиУниверсальная
	|		ИЗ
	|			РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|		ГДЕ
	|			СтатусыВерсийХранилища.ВерсияХранилища В
	|					(ВЫБРАТЬ
	|						Версии.ВерсияХранилища
	|					ИЗ
	|						Версии КАК Версии)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтатусыВерсийХранилища.ВерсияХранилища) КАК МаксимальныйПериод
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВерсийХранилища КАК СтатусыВерсийХранилища
	|			ПО МаксимальныйПериод.ВерсияХранилища = СтатусыВерсийХранилища.ВерсияХранилища
	|				И МаксимальныйПериод.Период = СтатусыВерсийХранилища.Период
	|				И МаксимальныйПериод.ДатаЗаписиУниверсальная = СтатусыВерсийХранилища.ДатаЗаписиУниверсальная) КАК СтатусыВерсийХранилищаСрезПоследних
	|ГДЕ
	|	НЕ СтатусыВерсийХранилищаСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИсторииХранилищ.Перенесено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Версии.Хранилище КАК Хранилище,
	|	Версии.ВерсияХранилища КАК ВерсияХранилища,
	|	Версии.Конфигурация КАК Конфигурация,
	|	Версии.НомерВерсии КАК НомерВерсии,
	|	Версии.ЗадачаМетеор КАК ЗадачаМетеор
	|ПОМЕСТИТЬ РезультатПодготовка
	|ИЗ
	|	Версии КАК Версии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВерсииКПереносу КАК ВерсииКПереносу
	|		ПО Версии.ВерсияХранилища = ВерсииКПереносу.ВерсияХранилища
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияХранилищаИзменены.ИмяОбъекта КАК ИмяОбъекта,
	|	РезультатПодготовка.Конфигурация КАК Конфигурация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИзменений.Изменено) КАК ВидИзменения
	|ИЗ
	|	Справочник.ИсторияХранилища.Изменены КАК ИсторияХранилищаИзменены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РезультатПодготовка КАК РезультатПодготовка
	|		ПО ИсторияХранилищаИзменены.Ссылка = РезультатПодготовка.ВерсияХранилища
	|ГДЕ
	|	ИсторияХранилищаИзменены.Ссылка В
	|			(ВЫБРАТЬ
	|				РезультатПодготовка.ВерсияХранилища КАК ВерсияХранилища
	|			ИЗ
	|				РезультатПодготовка КАК РезультатПодготовка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияХранилищаДобавлены.ИмяОбъекта,
	|	РезультатПодготовка.Конфигурация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИзменений.Добавлено)
	|ИЗ
	|	Справочник.ИсторияХранилища.Добавлены КАК ИсторияХранилищаДобавлены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РезультатПодготовка КАК РезультатПодготовка
	|		ПО ИсторияХранилищаДобавлены.Ссылка = РезультатПодготовка.ВерсияХранилища
	|ГДЕ
	|	ИсторияХранилищаДобавлены.Ссылка В
	|			(ВЫБРАТЬ
	|				РезультатПодготовка.ВерсияХранилища КАК ВерсияХранилища
	|			ИЗ
	|				РезультатПодготовка КАК РезультатПодготовка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияХранилищаУдалены.ИмяОбъекта,
	|	РезультатПодготовка.Конфигурация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИзменений.Удалено)
	|ИЗ
	|	Справочник.ИсторияХранилища.Удалены КАК ИсторияХранилищаУдалены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РезультатПодготовка КАК РезультатПодготовка
	|		ПО ИсторияХранилищаУдалены.Ссылка = РезультатПодготовка.ВерсияХранилища
	|ГДЕ
	|	ИсторияХранилищаУдалены.Ссылка В
	|			(ВЫБРАТЬ
	|				РезультатПодготовка.ВерсияХранилища КАК ВерсияХранилища
	|			ИЗ
	|				РезультатПодготовка КАК РезультатПодготовка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатПодготовка.Хранилище КАК ХранилищеРазработки,
	|	РезультатПодготовка.ВерсияХранилища КАК ВерсияХранилища,
	|	РезультатПодготовка.Конфигурация КАК Конфигурация,
	|	РезультатПодготовка.НомерВерсии КАК НомерВерсии,
	|	РезультатПодготовка.Конфигурация.ХранилищеОбновления КАК ХранилищеОбновления,
	|	РезультатПодготовка.ЗадачаМетеор КАК ЗадачаМетеор
	|ИЗ
	|	РезультатПодготовка КАК РезультатПодготовка
	|ИТОГИ
	|	МИНИМУМ(ХранилищеРазработки),
	|	МИНИМУМ(ХранилищеОбновления)
	|ПО
	|	Конфигурация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатПодготовка.ВерсияХранилища КАК ВерсияХранилища,
	|	РезультатПодготовка.Конфигурация КАК Конфигурация,
	|	РезультатПодготовка.ЗадачаМетеор КАК ЗадачаМетеор,
	|	ЗадачиКОбработке.Задача КАК Задача,
	|	ЗадачиКОбработке.БизнесПроцесс КАК БизнесПроцесс
	|ИЗ
	|	РезультатПодготовка КАК РезультатПодготовка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗадачиКОбработке КАК ЗадачиКОбработке
	|		ПО РезультатПодготовка.ЗадачаМетеор = ЗадачиКОбработке.ЗадачаМетеор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Конфигурация,
	|	БизнесПроцесс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКОбработке.Задача КАК Задача
	|ИЗ
	|	ЗадачиКОбработке КАК ЗадачиКОбработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезультатПодготовка КАК РезультатПодготовка
	|		ПО ЗадачиКОбработке.ЗадачаМетеор = РезультатПодготовка.ЗадачаМетеор
	|ГДЕ
	|	РезультатПодготовка.ЗадачаМетеор ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ЗадачиКОбработке", ЗадачиКОбработке);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	НомерРезультатаОбъекты = 4;
	НомерРезультатаВерсии = 5;
	НомерРезультатаЗадачи = 6;
	НомерРезультатаЗадачиБезВерсий = 7;
	ВыборкаКонфиграция = РезультатыЗапроса[НомерРезультатаВерсии].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ОбъектыПоКонфигурациям = РезультатыЗапроса[НомерРезультатаОбъекты].Выгрузить();
	ОбъектыПоКонфигурациям.Индексы.Добавить("Конфигурация");
	ПроцессыПоЗадачам = РезультатыЗапроса[НомерРезультатаЗадачи].Выгрузить();
	ОтборКонфигурация = Новый Структура("Конфигурация");
	Отказ = Ложь;
	
	Пока ВыборкаКонфиграция.Следующий() Цикл
		ВыборкаВерсииКПереносу = ВыборкаКонфиграция.Выбрать();
		НомераВерсийХР = Новый Массив;
		ВерсииХР = Новый Массив;
		ЗадачиМетеор = Новый Массив;
		Пока ВыборкаВерсииКПереносу.Следующий() Цикл
			НомераВерсийХР.Добавить(ВыборкаВерсииКПереносу.НомерВерсии);
			ВерсииХР.Добавить(ВыборкаВерсииКПереносу.ВерсияХранилища);
			ЗадачиМетеор.Добавить(ВыборкаВерсииКПереносу.ЗадачаМетеор);
		КонецЦикла;
		ЗадачиМетеор = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗадачиМетеор);
		Конфигурация = ВыборкаКонфиграция.Конфигурация;
		ОтборКонфигурация.Конфигурация = Конфигурация;
		ОбъектыКонфигурации = ОбъектыПоКонфигурациям.НайтиСтроки(ОтборКонфигурация);
		
		Если Не ОбъектыКонфигурации.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектыХранилища = ОбъектыХранилища(ОбъектыКонфигурации);
		МассивОбъектов = РаботаСХранилищами.МассивОбъектовКЗахвату(ОбъектыХранилища);
		МассивОбъектовКОбъединению = РаботаСХранилищами.МассивОбъектовКОбъединению(ОбъектыХранилища);
		МассивОбъектовИсключаемыхИзОбъединения = РаботаСХранилищами.МассивОбъектовИсключаемыхИзОбъединения(Конфигурация, ОбъектыХранилища);
		НомерВерсииХО = "";
		Попытка
			НомерВерсииХО = РаботаСХранилищами.ПеренестиНаработкиИзРазработкиВРБ(
				Конфигурация,
				МассивОбъектов,
				МассивОбъектовКОбъединению,
				МассивОбъектовИсключаемыхИзОбъединения,
				СтрСоединить(НомераВерсийХР, ","));
		Исключение
			Отказ = Истина;
			ТекстОшибки = СтрШаблон("При переносе изменений конфигурации %1 возникли ошибки:" + Символы.ПС + "%2", Конфигурация, ОписаниеОшибки());
			//Для Каждого ВерсияХР Из ВерсииХР Цикл
			//	РаботаСХранилищами.ЗаписатьСтатусВерсииХранилища(ВерсияХР, Перечисления.СтатусыИсторииХранилищ.Ошибка, ТекстОшибки);
			//КонецЦикла;
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			Продолжить;
		КонецПопытки;
		НомераВерсийХО = Новый Массив;
		Если ЗначениеЗаполнено(НомерВерсииХО) Тогда
			НомераВерсийХО.Добавить(НомерВерсииХО);
		КонецЕсли;
		
		МеткаХО = РаботаСХранилищами.МеткаПоНомерам(НомераВерсийХР);
		МеткаХР = РаботаСХранилищами.МеткаПоНомерам(НомераВерсийХО);
		
		Если Не РаботаСХранилищами.ПометитьНомераХранилищ(ВыборкаКонфиграция.ХранилищеРазработки, НомераВерсийХР, МеткаХР) Тогда
			ТекстОшибки = СтрШаблон("Не удалось пометить перенесенные версии ХР. МеткаХО: %1 Меткой, МеткаХР: %2", МеткаХО, МеткаХР); 
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецЕсли;
		РаботаСХранилищами.ПометитьВерсииХранилища(ВерсииХР, МеткаХР);
		Если Не РаботаСХранилищами.ПометитьНомераХранилищ(ВыборкаКонфиграция.ХранилищеОбновления, НомераВерсийХО, МеткаХО) Тогда
			ТекстОшибки = СтрШаблон("Не удалось пометить перенесенные версии ХО. МеткаХО: %1 Меткой, МеткаХР: %2", МеткаХО, МеткаХР); 
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецЕсли;
		
		ВерсииХО = Новый Массив;
		Попытка
			Для Каждого НомерХО Из НомераВерсийХО Цикл
				ПоискКоммитаХО = Справочники.ИсторияХранилища.НайтиПоКоду(НомерХО, Истина,, ВыборкаКонфиграция.ХранилищеОбновления);
				Если ЗначениеЗаполнено(ПоискКоммитаХО) Тогда
					ВерсииХО.Добавить(ПоискКоммитаХО);
				Иначе
					ОбъектИсторияХранилищаРБ = Справочники.ИсторияХранилища.СоздатьЭлемент();
					ОбъектИсторияХранилищаРБ.Код = НомерХО;
					ОбъектИсторияХранилищаРБ.Владелец = ВыборкаКонфиграция.ХранилищеОбновления;
					ОбъектИсторияХранилищаРБ.Записать();
					ВерсииХО.Добавить(ОбъектИсторияХранилищаРБ.Ссылка);
				КонецЕсли;
			КонецЦикла;
			РаботаСХранилищами.ПометитьВерсииХранилища(ВерсииХО, МеткаХО);
		Исключение
			ТекстОшибки = СтрШаблон(
				"При переносе изменений возникли ошибки.
				|Задача Метеор: %1
				|Конфигурация: %2
				|Версии ХР: %3
				|Ошибки:
				|%4",
				СтрСоединить(ЗадачиМетеор, ", "),
				Конфигурация,
				СтрСоединить(НомераВерсийХР, ", "),
				ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		КонецПопытки;
		
		// Пометка в бизнес процессах.
		ПроцессыКонфигурации = ПроцессыПоЗадачам.Скопировать(ПроцессыПоЗадачам.НайтиСтроки(ОтборКонфигурация));
		БизнесПроцессыКонфигурации = ПроцессыКонфигурации.ВыгрузитьКолонку("БизнесПроцесс");
		БизнесПроцессыКонфигурации = ОбщегоНазначенияКлиентСервер.СвернутьМассив(БизнесПроцессыКонфигурации);
		Для Каждого БизнесПроцесс Из БизнесПроцессыКонфигурации Цикл
			БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
			ВерсииХранилищаПоПроцессу = ПроцессыКонфигурации.НайтиСтроки(Новый Структура("БизнесПроцесс", БизнесПроцесс));
			Для Каждого СтрокаВерсииПроцессы Из ВерсииХранилищаПоПроцессу Цикл
				Для Каждого ВерсияХО Из ВерсииХО Цикл
					НоваяСтрока = БизнесПроцессОбъект.Коммиты.Добавить();
					НоваяСтрока.Коммит = СтрокаВерсииПроцессы.ВерсияХранилища;
					НоваяСтрока.КоммитХО = ВерсияХО;
				КонецЦикла;
			КонецЦикла;
			Попытка
				БизнесПроцессОбъект.Записать();
			Исключение
				ТекстОшибки = СтрШаблон(
					"При запись версий в бизнес процесс возникли ошибки:
					|Задача Метеор: %1
					|Конфигурация: %2
					|Версии ХР: %3
					|Ошибки:
					|%4",
					СтрСоединить(ЗадачиМетеор, ", "),
					Конфигурация,
					СтрСоединить(НомераВерсийХР, ", "),
					ОписаниеОшибки());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			КонецПопытки;
		КонецЦикла;
		Для Каждого ВерсияХР Из ВерсииХР Цикл
			РаботаСХранилищами.ЗаписатьСтатусВерсииХранилища(ВерсияХР, Перечисления.СтатусыИсторииХранилищ.Перенесено);
		КонецЦикла;
	КонецЦикла;
	
	//Выполнять все задачи, только если по всем проектам переносы выполнились без ошибок.
	Если Не Отказ Тогда
		ОбработанныеЗадачи = ПроцессыПоЗадачам.Скопировать(, "Задача");
		ОбработанныеЗадачи.Свернуть("Задача");
		ЗадачиКЗавершению = ОбработанныеЗадачи.ВыгрузитьКолонку("Задача");
		Для Каждого Задача Из ЗадачиКЗавершению Цикл
			Попытка
				ЗадачаОбъект = Задача.ПолучитьОбъект();
				ЗадачаОбъект.ВыполнитьЗадачу();
				ЗадачаОбъект.Разблокировать();
			Исключение 
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖР,
					УровеньЖурналаРегистрации.Предупреждение,
					,
					,
					СтрШаблон("Не удалось выполнить перенесённую задачу по причине: %1", ОписаниеОшибки()));
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	ВыборкаЗадачиБезВерсий = РезультатыЗапроса[НомерРезультатаЗадачиБезВерсий].Выбрать();
	Пока ВыборкаЗадачиБезВерсий.Следующий() Цикл
		Попытка
			ЗадачаОбъект = ВыборкаЗадачиБезВерсий.Задача.ПолучитьОбъект();
			ЗадачаОбъект.ВыполнитьЗадачу();
			ЗадачаОбъект.Разблокировать();
		Исключение 
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖР,
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СтрШаблон("Не удалось выполнить задачу по причине: %1", ОписаниеОшибки()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ОбъектыХранилища(ТаблицаОбъектов)
	
	ОбъектыХранилища = Новый Структура("Изменены, Добавлены, Удалены", новый Массив, Новый Массив, Новый Массив);
	
	Для Каждого СтрокаПереноса из ТаблицаОбъектов Цикл 
		Если СтрокаПереноса.ВидИзменения = Перечисления.ВидыИзменений.Добавлено Тогда 
			ОбъектыХранилища.Добавлены.Добавить(СтрокаПереноса.ИмяОбъекта);
		ИначеЕсли СтрокаПереноса.ВидИзменения = Перечисления.ВидыИзменений.Изменено Тогда 
			ОбъектыХранилища.Изменены.Добавить(СтрокаПереноса.ИмяОбъекта);
		ИначеЕсли СтрокаПереноса.ВидИзменения = Перечисления.ВидыИзменений.Удалено Тогда 
			ОбъектыХранилища.Удалены.Добавить(СтрокаПереноса.ИмяОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектыХранилища;
	
КонецФункции

#Область ОбработкаЭтаповЗадачиМетеор

Процедура УстановитьОбработанЗаписиИсторииЭтапов(Выборка)
	МЗ = РегистрыСведений.ИсторияЭтаповЗадачиМетеор.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МЗ, Выборка, "ЗадачаМетеор, Дата");
	МЗ.Прочитать();
	МЗ.Обработано = Истина;
	МЗ.Записать();
КонецПроцедуры

Процедура ЗапуститьПроцесс(ИмяПроцесса, Данные)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеЗадачиИзМетеор = ИнтеграцияСМетеор.ПолучитьДанныеЗадачиИзМетеор(Данные.ЗадачаМетеор);
	Если ДанныеЗадачиИзМетеор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РеквизитыТехПроекта = ДанныеЗадачиИзМетеор.РеквизитыТехПроекта;
	ЭтоЗадачаSQL = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыТехПроекта, "Konfiguratsiya_id", "") = "SQL";
	Если ЭтоЗадачаSQL И (ИмяПроцесса = "ПредварительнаяПроверка" Или ИмяПроцесса = "СогласованиеПереноса") Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(СтрШаблон("БизнесПроцесс.%1", ИмяПроцесса));
	ЭлементБлокировки.УстановитьЗначение("ЗадачаМетеор", Данные.ЗадачаМетеор);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	АктивныйПроцесс = БизнесПроцессы[ИмяПроцесса].АктивныйПроцесс(Данные.ЗадачаМетеор);
	Если ЗначениеЗаполнено(АктивныйПроцесс) Тогда
		об = АктивныйПроцесс.ПолучитьОбъект();
		об.Исполнитель = Данные.Исполнитель;
		об.Записать();
		Для Каждого Задача Из АктивныеЗадачиБизнесПроцесса(АктивныйПроцесс) Цикл
			об = Задача.ПолучитьОбъект();
			об.ЖелаемыйИсполнитель = Данные.Исполнитель;
			об.Записать();
		КонецЦикла;
	Иначе
		об = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();
		об.Дата = ТекущаяДатаСеанса();
		об.Аналитик = РегистрыСведений.ИсторияЭтаповЗадачиМетеор.ИсполнительЭтапа(Данные.ЗадачаМетеор, Справочники.ЭтапыЗадачиМетеор.АналитическаяПроработка);
		об.Разработчик = РегистрыСведений.ИсторияЭтаповЗадачиМетеор.ИсполнительЭтапа(Данные.ЗадачаМетеор, Справочники.ЭтапыЗадачиМетеор.ВыполнитьОсновнуюРаботуПоЗаданию);
		об.ЗадачаМетеор = Данные.ЗадачаМетеор;
		об.Исполнитель = Данные.Исполнитель;
		об.Записать();
		об.Старт();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапуститьПроверкуДокументации(ИмяПроцесса, Данные)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(СтрШаблон("БизнесПроцесс.%1", ИмяПроцесса));
	ЭлементБлокировки.УстановитьЗначение("ЗадачаМетеор", Данные.ЗадачаМетеор);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	АктивныйПроцесс = БизнесПроцессы[ИмяПроцесса].АктивныйПроцесс(Данные.ЗадачаМетеор);
	Если ЗначениеЗаполнено(АктивныйПроцесс) Тогда
		Возврат;
	КонецЕсли;
		
	БизнесПроцесс = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();
	БизнесПроцесс.Дата = ТекущаяДатаСеанса();
	БизнесПроцесс.ЗадачаМетеор = Данные.ЗадачаМетеор;
	БизнесПроцесс.Записать();
	БизнесПроцесс.Старт();
	
КонецПроцедуры

Процедура ЗапуститьСогласованиеАрхитектуры(ИмяПроцесса, Данные)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(СтрШаблон("БизнесПроцесс.%1", ИмяПроцесса));
	ЭлементБлокировки.УстановитьЗначение("ЗадачаМетеор", Данные.ЗадачаМетеор);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	АктивныйПроцесс = БизнесПроцессы[ИмяПроцесса].АктивныйПроцесс(Данные.ЗадачаМетеор);
	Если ЗначениеЗаполнено(АктивныйПроцесс) Тогда
		АктивныйПроцессОбъект = АктивныйПроцесс.ПолучитьОбъект();
		АктивныйПроцессОбъект.Исполнитель = Данные.Исполнитель;
		АктивныйПроцессОбъект.Записать();
		Для Каждого Задача Из АктивныеЗадачиБизнесПроцесса(АктивныйПроцесс) Цикл
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			ЗадачаОбъект.ЖелаемыйИсполнитель = Данные.Исполнитель;
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
	Иначе
		ИсполнителиЗадачи = УчастникиЗадачиМетеорСогласованиеАрхитектуры(Данные.ЗадачаМетеор);
		БизнесПроцесс = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();
		БизнесПроцесс.Дата = ТекущаяДатаСеанса();
		БизнесПроцесс.ЗадачаМетеор = Данные.ЗадачаМетеор;
		БизнесПроцесс.Исполнитель = Данные.Исполнитель;
		БизнесПроцесс.Аналитик = ИсполнителиЗадачи.Аналитик;
		БизнесПроцесс.Разработчик = ИсполнителиЗадачи.Разработчик;
		БизнесПроцесс.Записать();
		БизнесПроцесс.Старт();
	КонецЕсли;
	
КонецПроцедуры

Функция АктивныеЗадачиБизнесПроцесса(БизнесПроцесс) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И НЕ ЗадачаИсполнителя.ПометкаУдаления";
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

Процедура ЗавершитьСогласованиеАрхитектуры(Запись)
	
	АктивныйПроцесс = БизнесПроцессы.СогласованиеАрхитектуры.АктивныйПроцесс(Запись.ЗадачаМетеор);
	Если Не ЗначениеЗаполнено(АктивныйПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Задача Из АктивныеЗадачиБизнесПроцесса(АктивныйПроцесс) Цикл
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗадачаОбъект.ВыполнитьЗадачу();
	КонецЦикла;
		
КонецПроцедуры

Функция УчастникиЗадачиМетеорСогласованиеАрхитектуры(ЗадачаМетеор)
	Результат = Новый Структура("Аналитик,Разработчик");
	ДанныеЗадачи = ИнтеграцияСМетеор.ПолучитьДанныеЗадачиИзМетеор(ЗадачаМетеор);
	Если ДанныеЗадачи = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	Результат.Аналитик = РегистрыСведений.ИсторияЭтаповЗадачиМетеор.ИсполнительЭтапа(ЗадачаМетеор, Справочники.ЭтапыЗадачиМетеор.АналитическаяПроработка);
	Если Не ЗначениеЗаполнено(Результат.Аналитик) Тогда
		Результат.Аналитик = Справочники.Пользователи.НайтиПоНаименованию(ДанныеЗадачи.Администратор, Истина);
	КонецЕсли;
	
	РазработчикДанныеЗадачи = ДанныеЗадачи.ОбщаяИнформация.Получить("Программист");
	Если ЗначениеЗаполнено(РазработчикДанныеЗадачи) Тогда
		Результат.Разработчик = Справочники.Пользователи.НайтиПоНаименованию(РазработчикДанныеЗадачи, Истина);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти
