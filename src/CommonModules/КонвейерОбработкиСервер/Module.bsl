#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция - Получение файла конфигурации из хранилища
//
// Параметры:
//  Хранилище			 - СправочникСсылка.Хранилища	 - Хранилище
//  НомерКоммита		 - Число	 - НомерКоммита
// 
// Возвращаемое значение:
//  Строка - Полный путь к файлу конфигурации или расширения
//
Функция ПолучениеФайлаКонфигурацииИзХранилища(Хранилище, НомерКоммита) Экспорт
	
	Если Ложь Тогда
		Хранилище = Справочники.Хранилища.ПустаяСсылка();
	КонецЕсли;
	
	ПараметрыХранилища = Новый Структура;
	ПараметрыХранилища.Вставить("Имя", Хранилище.Наименование);
	ПараметрыХранилища.Вставить("Адрес", Хранилище.Путь);
	ПараметрыХранилища.Вставить("Логин", Хранилище.БазаПереносаИмяПользователяХранилища);
	ПараметрыХранилища.Вставить("Пароль", Хранилище.БазаПереносаПарольХранилища);
	ПараметрыХранилища.Вставить("ИмяРасширения", "");
	ПараметрыХранилища.Вставить("ПутьВыгрузки", Константы.КаталогВременныхФайловВерсийХранилищ.Получить());
	ПараметрыХранилища.Вставить("ПутьКПлатформе1С", РаботаСХранилищами.ПутьКПлатформе1С(Хранилище));
	Если ЗначениеЗаполнено(Хранилище.БазовоеХранилище) Тогда
		ПараметрыХранилища.ИмяРасширения = Хранилище.ИмяПапкиGit;
	КонецЕсли;
	//НомерКоммитаСтрока = XMLСтрока(НомерКоммита);
	
	//Сервис = ВнешниеДанные.ПолучитьСервисРаботыСБазами(900);
	//ИмяФайла = Сервис.ВыгрузкаКонфигурацииИзХранилища(СтрокаСоединенияИБ, НомерКоммитаСтрока, ЗначениеВСтрокуВнутр(ПараметрыХранилища));
	КоммитСсылка = Справочники.ИсторияХранилища.НайтиПоКоду(НомерКоммита, Истина, , Хранилище);
	ИмяФайла = КешВерсийХранилищСлужебный.ВыгрузкаКонфигурацииИзХранилища(КоммитСсылка, ПараметрыХранилища);
	Возврат ИмяФайла;

КонецФункции

// Функция - Конвейер завершен
//
// Параметры:
//  Хранилище			 - СправочникСсылка.Хранилища	 - Хранилище
//  ИдентификаторКонвейера	 - Число	 - Номер пайплайна
//  ВнутреннийИдентификаторКонвейера	 - Строка	 - строка в формате "9f0624240549f2714c1896afdfdaf736b5599bfd"
// 
// Возвращаемое значение:
//  Булево - да, если это не статус ожидания
//
Функция КонвейерЗавершен(Хранилище, ИдентификаторКонвейера, ВнутреннийИдентификаторКонвейера) Экспорт
	
	Если ИдентификаторКонвейера = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Хранилище.БазовоеХранилище) Тогда
		ИдентификаторПроектаВГитЛаб = Хранилище.БазовоеХранилище.ПроектGit.Код;
	Иначе
		ИдентификаторПроектаВГитЛаб = Хранилище.ПроектGit.Код;
	КонецЕсли;
	ПараметрыАдреса = Новый Структура;
	ПараметрыАдреса.Вставить("ИдентификаторПроектаГитЛаб", ИдентификаторПроектаВГитЛаб);
	ПараметрыАдреса.Вставить("НомерПайплайна", ИдентификаторКонвейера);
	ДанныеОтвета = АвтоматизированнаяПроверкаКода.ВыполнитьЗапросКGit("GetSinglePipeline", ПараметрыАдреса);
	Если ДанныеОтвета.КодСостояния <> 200 Тогда
		Сообщить(ДанныеОтвета.Тело);
		Возврат Ложь;
	КонецЕсли; 
	
	Статус = ДанныеОтвета.status;
	Сообщить(Статус);
	Если АвтоматизированнаяПроверкаКода.ЭтоСтатусОжидания(Статус) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайла = ИмяФайлаРезультатовПайплайна(Хранилище, ИдентификаторКонвейера, ВнутреннийИдентификаторКонвейера);
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Существует();
	
КонецФункции

// Функция - Путь к результатам пайплайна
//
// Параметры:
//  Хранилище						 - СправочникСсылка.Хранилища	 - 
//  ИдентификаторКонвейера			 - Число	 - 
//  ВнутреннийИдентификаторКонвейера - Строка	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПутьКРезультатамПайплайна(Хранилище, ИдентификаторКонвейера, ВнутреннийИдентификаторКонвейера) Экспорт
	// \\izb-dev05\repos\gitlab_export\izbenkafin_product\39923_9f062424
	Возврат СтрШаблон("%1\%2_%3", Хранилище.КаталогРезультатовПайплайнов, XMLСтрока(ИдентификаторКонвейера), Лев(ВнутреннийИдентификаторКонвейера, 8));
КонецФункции

// Функция - Имя файла результатов пайплайна
//
// Параметры:
//  Хранилище						 - СправочникСсылка.Хранилища	 - 
//  ИдентификаторКонвейера			 - Число	 - 
//  ВнутреннийИдентификаторКонвейера - Строка	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ИмяФайлаРезультатовПайплайна(Хранилище, ИдентификаторКонвейера, ВнутреннийИдентификаторКонвейера) Экспорт
	Возврат ПутьКРезультатамПайплайна(Хранилище, ИдентификаторКонвейера, ВнутреннийИдентификаторКонвейера) + "\jUnit_test_report.json";
КонецФункции

// Функция - URLКонвейера
//
// Параметры:
//  Хранилище				 - СправочникСсылка.Хранилища	 - 
//  ИдентификаторКонвейера	 - Число	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция URLКонвейера(Хранилище, ИдентификаторКонвейера) Экспорт
	Если ЗначениеЗаполнено(Хранилище.БазовоеХранилище) Тогда
		URLПроектаGit = Хранилище.БазовоеХранилище.ПроектGit.СсылкаURL;
	Иначе
		URLПроектаGit = Хранилище.ПроектGit.СсылкаURL;
	КонецЕсли;
	Возврат URLПроектаGit + "/-/pipelines/" + XMLСтрока(ИдентификаторКонвейера);
КонецФункции

// Функция - Запуск пайплайна
// Установка тега и запуск пайпа
//
// Параметры:
//  Хранилище	 - СправочникСсылка.Хранилища	 - Хранилище
//  Коммит		 - Число	 - Номер коммита
//  ТегПоУмолчанию - Строка	 - Например "master" или "main"
// 
// Возвращаемое значение:
//  Структура - Успех, ТекстОшибки, ИдентификаторКонвейера, ВнутреннийИдентификаторКонвейера
//
Функция ЗапускПайплайна(Хранилище, Коммит, ТегПоУмолчанию = "") Экспорт
	
	Ответ = Новый Структура("Успех, ТекстОшибки, ИдентификаторКонвейера, ВнутреннийИдентификаторКонвейера", Ложь, "", 0, "");
	
	ЗначенияРесурсов = РегистрыСведений.ПоказателиВерсийХранилища.Получить(Новый Структура("ВерсияХранилища", Коммит));
	Тег = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРесурсов, "Тег");
	Если ЗначениеЗаполнено(ТегПоУмолчанию) Тогда
		Тег = ТегПоУмолчанию;
	КонецЕсли;
	Если ЗначениеЗаполнено(Хранилище.БазовоеХранилище) Тогда
		ИдентификаторПроектаВГитЛаб = Хранилище.БазовоеХранилище.ПроектGit.Код;
	Иначе
		ИдентификаторПроектаВГитЛаб = Хранилище.ПроектGit.Код;
	КонецЕсли;
	Если Хранилище.ВыгружатьТегиВGit и Не ЗначениеЗаполнено(Тег) Тогда
		ЗначенияРесурсовХеш = РегистрыСведений.ХешиGitВерсийХранилища.Получить(Новый Структура("ВерсияХранилища", Коммит));
		ХэшПоследнегоПеренесенногоКоммита = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры( ЗначенияРесурсовХеш, "Хеш");
		ПараметрыАдреса = Новый Структура;
		ПараметрыАдреса.Вставить("ИдентификаторПроектаГитЛаб", ИдентификаторПроектаВГитЛаб);
		ПараметрыАдреса.Вставить("Тег", "transfer_" + XMLСтрока(Коммит.Код));
		Если ЗначениеЗаполнено(Коммит.Владелец.БазовоеХранилище) Тогда
			ПараметрыАдреса.Тег = ПараметрыАдреса.Тег + "_" + Коммит.Владелец.ИмяПапкиGit;
		КонецЕсли;
		ПараметрыАдреса.Вставить("ХэшКоммита", ХэшПоследнегоПеренесенногоКоммита);
		ДанныеОтвета = АвтоматизированнаяПроверкаКода.ВыполнитьЗапросКGit("CreateNewTag", ПараметрыАдреса);
		Если ДанныеОтвета.КодСостояния = 201
				или (ДанныеОтвета.КодСостояния = 400 И СтрНайти(ДанныеОтвета.Тело, "already exists")) Тогда
			Тег = ПараметрыАдреса.Тег;
			РаботаСХранилищами.ЗаписатьПоказателиВерсииХранилища(Коммит, Новый Структура("Тег", ПараметрыАдреса.Тег));
		Иначе
			Сообщить(ДанныеОтвета.Тело);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Структура;
	ПараметрыАдреса.Вставить("ИдентификаторПроектаГитЛаб", ИдентификаторПроектаВГитЛаб);
	Если ЗначениеЗаполнено(Тег) Тогда
		ПараметрыАдреса.Вставить("tag", Тег);
	КонецЕсли;
	
	ВидОперации = "NewPipeline";
	ДанныеОтвета = АвтоматизированнаяПроверкаКода.ВыполнитьЗапросКGit(ВидОперации, ПараметрыАдреса);
	Если ДанныеОтвета.КодСостояния >= 300 Тогда
		ЗаписьЖурналаРегистрации("КонвеерОбработки.NewPipeline", УровеньЖурналаРегистрации.Предупреждение, , Хранилище, ДанныеОтвета.Тело);
		Ответ.Успех = Ложь;
		Ответ.ТекстОшибки = ДанныеОтвета.Тело;
		Возврат Ответ;
	КонецЕсли; 
	
	Ответ.Успех = Истина;
	Ответ.ИдентификаторКонвейера = ДанныеОтвета.id;
	Ответ.ВнутреннийИдентификаторКонвейера = ДанныеОтвета.sha;
	Возврат Ответ;
	
КонецФункции

// Процедура - Выполнить шаг бизнес процесса
//
// Параметры:
//  БизнесПроцесс	 - БизнесПроцессСсылка - Ссылка на БП любого типа
//
Процедура ВыполнитьШагБизнесПроцесса(БизнесПроцесс) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка КАК Задача,
		|	ЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	НЕ ЗадачаИсполнителя.Выполнена
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И НЕ ЗадачаИсполнителя.БизнесПроцесс.ПометкаУдаления
		|	И ЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.Робот)
		|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.БизнесПроцесс.ЗадачаМетеор.Срочная УБЫВ,
		|	ЗадачаИсполнителя.Дата";
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество()=0 Тогда
		Сообщить("Нет активных задач");
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		БП = БизнесПроцесс.ПолучитьОбъект();
		Если БП.Заблокирован() Тогда
			БП.Разблокировать();
		КонецЕсли;
		
		ТипБизнесПроцесса = Выборка.БизнесПроцесс.Метаданные();
		Сообщить(СтрШаблон("Выполнене %1 %2", Выборка.Задача, Выборка.ТочкаМаршрута));
		Если БизнесПроцессы[ТипБизнесПроцесса.Имя].ЗадачаВыполнима(Выборка.Задача, Выборка.ТочкаМаршрута) Тогда
			об = Выборка.Задача.ПолучитьОбъект();
			об.ВыполнитьЗадачу();
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Добавить сообщение в бизнес процесс
//
// Параметры:
//  БП				 - БизнесПроцессСсылка - Ссылка на БП любого типа с табличной частью Сообщения
//  Текст			 - Строка	 - Текст сообщения
//  Шаг				 - ТочкаБизнесПроцесса	 - Либо произвольная строка
//  Ошибка			 - Булево	 - Флаг ошибки
//  ИсключитьДубли	 - Булево	 - Не добавляет сообщение, если последнее сообщение такое же
//
Процедура ДобавитьСообщениеБизнесПроцесс(БП, Текст, Шаг, ПроцентВыполнения = 0, Ошибка = Ложь, ИсключитьДубли = Истина) Экспорт
	Сообщить(?(ЗначениеЗаполнено(Текст), Текст, Шаг), ?(Ошибка, СтатусСообщения.Важное, СтатусСообщения.Обычное));
	Если ИсключитьДубли И БП.Сообщения.Количество()>0 Тогда
		ПоследнееСообщение = БП.Сообщения[БП.Сообщения.Количество()-1];
		Если ПоследнееСообщение.Шаг = Строка(Шаг) И ПоследнееСообщение.Текст = Текст И ПоследнееСообщение.Ошибка = Ошибка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Найти(ТипЗнч(БП), "объект:") = 0 Тогда
		Об = БП.ПолучитьОбъект();
		Если Не Об.Заблокирован() Тогда
			Об.Заблокировать();
		КонецЕсли;
		Записывать = Истина;
	Иначе
		Об = БП;
		Записывать = Ложь;
	КонецЕсли;
	Стр = Об.Сообщения.Добавить();
	Стр.Период = ТекущаяДатаСеанса();
	Стр.Текст = Текст;
	Стр.Шаг = Шаг;
	Стр.Ошибка = Ошибка;
	Если ЗначениеЗаполнено(ПроцентВыполнения) Тогда
		Стр.ПроцентВыполнения = ПроцентВыполнения;
	КонецЕсли;
	Если Записывать Тогда
		Об.Записать();
		Об.Разблокировать();
	КонецЕсли;
КонецПроцедуры

// Функция - Получить результата пайплайна
//
// Параметры:
//  Хранилище						 - СправочникСсылка.Хранилища	 - 
//  ИдентификаторКонвейера			 - Число	 - 
//  ВнутреннийИдентификаторКонвейера - Строка	 - 
// 
// Возвращаемое значение:
//   - Таблица значений
//
Функция ПолучитьРезультатаПайплайна(Хранилище, ИдентификаторКонвейера, ВнутреннийИдентификаторКонвейера) Экспорт
	ИмяФайла = КонвейерОбработкиСервер.ИмяФайлаРезультатовПайплайна(Хранилище, ИдентификаторКонвейера, ВнутреннийИдентификаторКонвейера);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	ДанныеОтвета = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(ТекстовыйДокумент.ПолучитьТекст());
	
	Автотесты = БизнесПроцессы.КонвейерОбработки.ПустаяСсылка().Автотесты.Выгрузить();
	
	// Общие показатели итогов
	Для Каждого Показатель Из ДанныеОтвета Цикл
		Если ТипЗнч(Показатель.Значение) <> Тип("Число") Тогда
			Продолжить;
		КонецЕсли;
		Если Показатель.Ключ = "КодСостояния" Тогда
			Продолжить;
		КонецЕсли;
		Если Показатель.Значение = 0 Тогда
			Продолжить;
		КонецЕсли;
		Стр = Автотесты.Добавить();
		Стр.Группа = "Итоги";
		Стр.Наименование = Показатель.Ключ;
		Стр.Количество = Показатель.Значение;
	КонецЦикла;
	
	// Расшифровка автотестов
	Для Каждого ГруппаТестов Из ДанныеОтвета.test_suites Цикл
		Для Каждого ВложенныйТест Из ГруппаТестов.test_cases Цикл
			Стр = Автотесты.Добавить();
			Стр.Группа = ГруппаТестов.name;
			Стр.Наименование = СтрШаблон("%1 / %2", ВложенныйТест.classname, ВложенныйТест.name);
			Стр.Статус = ВложенныйТест.status;
			Стр.ВремяВыполнения = ВложенныйТест.execution_time;
			Стр.Ошибка = Стр.Статус = "error" или Стр.Статус = "failed";
			Если ВложенныйТест.Свойство("system_output") Тогда
				Если ТипЗнч(ВложенныйТест.system_output) = Тип("Строка") Тогда
					Стр.Расшифровка = ВложенныйТест.system_output;
				ИначеЕсли ТипЗнч(ВложенныйТест.system_output) = Тип("Структура") и ВложенныйТест.system_output.Свойство("message") Тогда
					Стр.Расшифровка = ВложенныйТест.system_output.message;
				КонецЕсли;
			КонецЕсли;
			Стр.Расшифровка = СокрЛП(Стр.Расшифровка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Автотесты;
КонецФункции

// Процедура - Ежедневное обновление клонов
//  На базе фуллов, которые содержат вчерашнюю конфиурацию, делает клоны с свежей конфигурацией
//
// Параметры:
//  БазаОтбор	 - СправочникСсылка.Базы1С - Отбор или Неопределено
//
Процедура ЕжедневноеОбновлениеКлонов(БазаОтбор = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Базы1С.Владелец КАК Конфигурация,
		|	Базы1С.Владелец.ХранилищеОбновления КАК Хранилище,
		|	Базы1С.СтрокаСоединенияИсточник КАК СтрокаСоединенияИсточник,
		|	Базы1С.СтрокаСоединенияПриемник КАК СтрокаСоединенияПриемник,
		|	Базы1С.Наименование КАК Наименование
		|ПОМЕСТИТЬ Источники
		|ИЗ
		|	Справочник.Базы1С КАК Базы1С
		|ГДЕ
		|	Базы1С.СоздаватьКлонДляРазработчиков
		|	И Базы1С.ПометкаУдаления = ЛОЖЬ
		|	И Базы1С.СтрокаСоединенияИсточник <> """"
		|	И Базы1С.СтрокаСоединенияПриемник <> """"
		|	И &БазаОтбор В (Базы1С.Ссылка, НЕОПРЕДЕЛЕНО)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Источники.Хранилище КАК Хранилище,
		|	МАКСИМУМ(ИсторияХранилища.Код) КАК Код
		|ПОМЕСТИТЬ ПоследниеКоммиты
		|ИЗ
		|	Справочник.ИсторияХранилища КАК ИсторияХранилища
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Источники КАК Источники
		|		ПО ИсторияХранилища.Владелец = Источники.Хранилище
		|
		|СГРУППИРОВАТЬ ПО
		|	Источники.Хранилище
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Источники.Конфигурация КАК Конфигурация,
		|	Источники.Хранилище КАК Хранилище,
		|	ИсторияХранилища.Ссылка КАК Коммит,
		|	Источники.СтрокаСоединенияИсточник КАК СтрокаСоединенияИсточник,
		|	Источники.СтрокаСоединенияПриемник КАК СтрокаСоединенияПриемник,
		|	Источники.Наименование КАК Наименование
		|ИЗ
		|	Источники КАК Источники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследниеКоммиты КАК ПоследниеКоммиты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсторияХранилища КАК ИсторияХранилища
		|			ПО ПоследниеКоммиты.Код = ИсторияХранилища.Код
		|				И ПоследниеКоммиты.Хранилище = ИсторияХранилища.Владелец
		|		ПО Источники.Хранилище = ПоследниеКоммиты.Хранилище";
	Запрос.УстановитьПараметр("БазаОтбор", БазаОтбор);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		БП = БизнесПроцессы.ПодготовкаТестовойБазы.СоздатьБизнесПроцесс();
		БП.Дата = ТекущаяДатаСеанса();
		БП.Конфигурация = Выборка.Конфигурация;
		БП.Коммит = Выборка.Коммит;
		БП.СтрокаСоединенияИсточник = Выборка.СтрокаСоединенияИсточник;
		БП.СтрокаСоединенияПриемник = Выборка.СтрокаСоединенияПриемник;
		БП.Записать();
		БП.Старт();
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Запущен %1 для %2", БП, Выборка.Наименование));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#КонецЕсли
