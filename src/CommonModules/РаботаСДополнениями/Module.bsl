
#Область ПрограммныйИнтерфейс

// Получает состояние дополнений с возможностью отбора по базе
//
// Параметры:
//  ТипДополнения	 - ПеречислениеСсылка.ТипыДополнений
//  Базы	 - Массив (СправочникСсылка.Базы1С), Неопределено  - базы 1С для отбора
// 
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьСостояниеДополнений(ТипДополнения, Знач Базы = Неопределено) Экспорт
	
	ПутьМетода = "/info";
	СостояниеДополнений = КонструкторСостояниеДополнений();
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("ТипДополнения", ТипДополнения);
	ПараметрыМетода = РаботаСДополнениямиИнтеграция.КонвертированныеПараметрыЗапроса(ПараметрыМетода, СловарьКонвертацииПараметровУК());
	
	ПараметрыЗапросовСервиса = ПараметрыЗапросовСервиса(Базы, ПутьМетода, ПараметрыМетода);
	
	// Перебираем все ответы от сервисов
	Для Каждого ПараметрыЗапроса Из ПараметрыЗапросовСервиса Цикл
		СостояниеДополненийБазы = СостояниеДополненийБазы(ТипДополнения, ПараметрыЗапроса);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СостояниеДополненийБазы, СостояниеДополнений);
	КонецЦикла;
	
	Возврат СостояниеДополнений;
	
КонецФункции

// Получает новые дополнения из интегрируемых баз
//
// Параметры:
//  ТипДополнения		 - ПеречислениеСсылка.ТипыДополнений
//  ДополненияКПолучению - Коллекция - Коллекция структур дополнений для получения
//
Процедура ПолучитьНовыеДополнения(ТипДополнения, ДополненияКПолучению) Экспорт
	
	Контекст = Новый Структура("ТипДополнения", ТипДополнения);
	ДобавляемыеДополнения = Новый Массив;
	МассивОшибок = Новый Массив;
	Отказ = Ложь;
	ШаблонНеПолученыДД = "Дополнение: %1 %2. Не удалось получить двоичные данные.";
	
	КонфигурацииБазДополнений = Новый Соответствие;
	БазыДополнений = Новый Массив;
	Для Каждого ПолучаемоеДополнение Из ДополненияКПолучению Цикл
		БазыДополнений.Добавить(ПолучаемоеДополнение.База);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(БазыДополнений);
	КонфигурацииБазДополнений = Общегоназначения.ЗначениеРеквизитаОбъектов(БазыДополнений, "Владелец");
	
	Для Каждого ПолучаемоеДополнение Из ДополненияКПолучению Цикл
		
		ДвоичныеДанныеДополнения = ПолучитьДанныеДополнения(
			ПолучаемоеДополнение.База,
			ТипДополнения,
			Новый Структура("УникальныйИдентификатор", ПолучаемоеДополнение.УникальныйИдентификатор));
		Если ДвоичныеДанныеДополнения = Неопределено Тогда
			Отказ = Истина;
			МассивОшибок.Добавить(СтрШаблон(ШаблонНеПолученыДД, ПолучаемоеДополнение.Имя, ПолучаемоеДополнение.Версия));
			Продолжить;
		КонецЕсли;
		
		ИмяДополнения = ?(ПустаяСтрока(ПолучаемоеДополнение.Имя), ПолучаемоеДополнение.Синоним, ПолучаемоеДополнение.Имя);
		
		ДобавляемоеДополнение = Новый Структура;
		ДобавляемоеДополнение.Вставить("Хранение", ПоместитьВоВременноеХранилище(ДвоичныеДанныеДополнения));
		ДобавляемоеДополнение.Вставить("Имя", ИмяДополнения);
		ДобавляемоеДополнение.Вставить("Версия", ПолучаемоеДополнение.Версия);
		ДобавляемоеДополнение.Вставить("ИмяФайла", ПолучаемоеДополнение.ИмяФайла);
		ДобавляемоеДополнение.Вставить("База", ПолучаемоеДополнение.База);
		ДобавляемоеДополнение.Вставить("Конфигурация", КонфигурацииБазДополнений[ПолучаемоеДополнение.База]);
		
		ДобавляемыеДополнения.Добавить(ДобавляемоеДополнение);
	КонецЦикла;
	
	ДополнитьОписаниеДополненийДаннымиСправочника(ДобавляемыеДополнения, Контекст);
	
	ШаблонВерсияСуществует = "Версия дополнения %1: %2 уже есть в базе.";
	ШаблонВерсияНеЗаполнена = "У дополнения %1 не указана версия.";
	МаксИндексМассива = ДобавляемыеДополнения.ВГраница();
	Для Сч = 0 По МаксИндексМассива Цикл
		// Обход с конца для удаления элементов
		ОтказПроверки = Ложь;
		ИндексЭлемента = МаксИндексМассива - Сч;
		ОписаниеФайла = ДобавляемыеДополнения[ИндексЭлемента];
		Если ОписаниеФайла.ВерсияСуществует Тогда
			ОтказПроверки = Истина;
			МассивОшибок.Добавить(СтрШаблон(ШаблонВерсияСуществует, ОписаниеФайла.Имя, ОписаниеФайла.Версия));
		ИначеЕсли ОписаниеФайла.Версия = "" Тогда
			ОтказПроверки = Истина;
			МассивОшибок.Добавить(СтрШаблон(ШаблонВерсияНеЗаполнена, ОписаниеФайла.Имя));
		КонецЕсли;
		Если ПустаяСтрока(ОписаниеФайла.Имя) Тогда
			ОтказПроверки = Истина;
			МассивОшибок.Добавить(
				СтрШаблон(
					"Не удалось определить имя дополнения. Имя файла: %1, Версия: %2",
					ОписаниеФайла.ИмяФайла,
					ОписаниеФайла.Версия));
		КонецЕсли;
		
		Если ОтказПроверки Тогда
			Отказ = Истина;
			ДобавляемыеДополнения.Удалить(ИндексЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		ТекстОшибки = "При загрузке были пропущены дополнения. По причине:" 
			+ Символы.ПС + СтрСоединить(МассивОшибок, Символы.ПС);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_ПолучениеДанных(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Дополнения,
			,
			ТекстОшибки);
	КонецЕсли;
	
	ДобавитьДополнения(ДобавляемыеДополнения, Контекст);
	
КонецПроцедуры

// Устанавливает версию дополнения в выбранную базу 1С
//
// Параметры:
//  База			 - СправочникСсылка.Базы1С
//  ВерсияДополнения - СправочникСсылка.ВерсииДополнений
//
Процедура УстановитьДополнение(База, ВерсияДополнения) Экспорт
	
	Если Не ВызовМетодаРазрешен(База) Тогда
		Возврат;
	КонецЕсли;
	ПутьМетода = "/install";
	СтатусОперации = "";
	
	РеквизитыДополнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияДополнения, "ИмяОбъекта, Наименование, Владелец.ТипДополнения");
	ИмяДополнения = РеквизитыДополнения.ИмяОбъекта;
	
	Если СтрДлина(СокрЛП(ИмяДополнения)) > 80 Тогда
		ВызватьИсключение СтрШаблон("Длина наименования дополнения больше 80 символов (%1)", СокрЛП(РеквизитыДополнения.Наименование));
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Имя", ИмяДополнения);
	ПараметрыМетода.Вставить("ТипДополнения", РеквизитыДополнения.ВладелецТипДополнения);
	ПараметрыМетода = РаботаСДополнениямиИнтеграция.КонвертированныеПараметрыЗапроса(ПараметрыМетода, СловарьКонвертацииПараметровУК());
	
	ПараметрыЗапроса = ПараметрыЗапросаСервиса(База, ПутьМетода, ПараметрыМетода);
	
	Если Не ПараметрыЗапроса.Количество() Тогда
		ТекстОшибки = СтрШаблон(
			"Не удалось получить параметры подключения к сервису дополнений базы %1 для установки дополнения %2.", База, ВерсияДополнения);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ТелоЗапросаУстановкиДополнения = ТелоЗапросаУстановкиДополнения(ВерсияДополнения);
	ПараметрыЗапроса.Вставить("ТелоЗапроса", ТелоЗапросаУстановкиДополнения);
	ПараметрыЗапроса.Вставить("ТипТелаЗапроса", Тип("ДвоичныеДанные"));
	
	РезультатЗапроса = ОтветСервиса(ПараметрыЗапроса, Метаданные.СвойстваОбъектов.HTTPМетод.POST);
	
	Отказ = Ложь;
	ТекстОшибки = "";
	
	Если РезультатЗапроса.КодСостояния > 299 Тогда
		ТекстОшибки = ТекстОшибкиПолученияОтветаСервиса(
			ПараметрыЗапроса.База,
			РезультатЗапроса.КодСостояния,
			РезультатЗапроса.ТелоОтвета,
			,
			Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		Попытка
			ОбъектОтвета = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(РезультатЗапроса.ТелоОтвета);
			СтатусОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбъектОтвета, "Статус", "")
		Исключение
			ТекстОшибки = ТекстОшибкиПолученияОтветаСервиса(
				ПараметрыЗапроса.База,
				РезультатЗапроса.КодСостояния,
				РезультатЗапроса.ТелоОтвета,
				ОписаниеОшибки(),
				Отказ);
		КонецПопытки;
	КонецЕсли;
	
	// Запись в историю
	ПараметрыЗаписиИстории = ПараметрыЗаписиИстории();
	ПараметрыЗаписиИстории.База = База;
	ПараметрыЗаписиИстории.Имя = ИмяДополнения;
	ПараметрыЗаписиИстории.Версия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияДополнения, "Версия");
	ПараметрыЗаписиИстории.Операция = Перечисления.ВидыОперацииДополнений.Установка;
	ПараметрыЗаписиИстории.ВерсияДополнения = ВерсияДополнения;
	Если Отказ Тогда
		ПараметрыЗаписиИстории.СтатусВыполнения = Перечисления.СтатусыОперацийДополнений.Ошибка;
		ПараметрыЗаписиИстории.ИнформацияОбОшибке = ТекстОшибки;
	КонецЕсли;
	Если Не ПустаяСтрока(СтатусОперации) Тогда
		ПараметрыЗаписиИстории.Комментарий = СтрШаблон("Статус операции: %1", СтатусОперации);
	КонецЕсли;
	
	Попытка
		ДобавитьЗаписьИстории(ПараметрыЗаписиИстории);
	Исключение
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_ЗаписьИстории(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ИсторияДополнений,
			,
			ОписаниеОшибки());
	КонецПопытки;
	
	Если Отказ Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_Установка(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Дополнения,
			,
			ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры

// Отправляет запрос на удаление расширения
//
// Параметры:
//  База	 - СправочникСсылка.Базы1С
//  ГУИД	 - Строка - Уникальный идентификатор удаляемого расширения
//
Процедура УдалитьДополнение(База, ТипДополнения, Параметры) Экспорт
	
	Если Не ВызовМетодаРазрешен(База) Тогда
		Возврат;
	КонецЕсли;
	Если Параметры.Количество() = 0 Тогда
		ВызватьИсключение "Не указаны параметры операции.";
	КонецЕсли;
	
	ПутьМетода = "/delete";
	СтатусОперации = "";
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ТипДополнения", ТипДополнения);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыМетода, Параметры, Истина);
	ПараметрыМетода = РаботаСДополнениямиИнтеграция.КонвертированныеПараметрыЗапроса(ПараметрыМетода, СловарьКонвертацииПараметровУК());
	
	ПараметрыЗапроса = ПараметрыЗапросаСервиса(База, ПутьМетода, ПараметрыМетода);
	
	Если Не ПараметрыЗапроса.Количество() Тогда
		ТекстОшибки = СтрШаблон("Не удалось получить параметры подключения для базы %1 при удалении дополнения.", База);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	РезультатЗапроса = ОтветСервиса(ПараметрыЗапроса, Метаданные.СвойстваОбъектов.HTTPМетод.POST);
	
	Отказ = Ложь;
	ТекстОшибки = "";
	
	Если РезультатЗапроса.КодСостояния > 299 Тогда
		ТекстОшибки = ТекстОшибкиПолученияОтветаСервиса(
			ПараметрыЗапроса.База,
			РезультатЗапроса.КодСостояния,
			РезультатЗапроса.ТелоОтвета,
			,
			Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		Попытка
			ОбъектОтвета = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(РезультатЗапроса.ТелоОтвета);
			СтатусОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбъектОтвета, "Статус", "");
		Исключение
			ТекстОшибки = ТекстОшибкиПолученияОтветаСервиса(
				ПараметрыЗапроса.База,
				РезультатЗапроса.КодСостояния,
				РезультатЗапроса.ТелоОтвета,
				ОписаниеОшибки(),
				Отказ);
		КонецПопытки;
	КонецЕсли;
	
	// Запись в историю
	ПараметрыЗаписиИстории = ПараметрыЗаписиИстории();
	ЗаполнитьЗначенияСвойств(ПараметрыЗаписиИстории, Параметры);
	ПараметрыЗаписиИстории.Операция = Перечисления.ВидыОперацииДополнений.Удаление;
	Если Отказ Тогда
		ПараметрыЗаписиИстории.СтатусВыполнения = Перечисления.СтатусыОперацийДополнений.Ошибка;
		ПараметрыЗаписиИстории.ИнформацияОбОшибке = ТекстОшибки;
	КонецЕсли;
	Если Не ПустаяСтрока(СтатусОперации) Тогда
		ПараметрыЗаписиИстории.Комментарий = СтрШаблон("Статус операции: %1", СтатусОперации);
	КонецЕсли;
	
	Попытка
		ДобавитьЗаписьИстории(ПараметрыЗаписиИстории);
	Исключение
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_ЗаписьИстории(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ИсторияДополнений,
			,
			ОписаниеОшибки());
	КонецПопытки;
	
	Если Отказ Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_Удаление(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Дополнения,
			,
			ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПараметрыДополнения(База, ТипДополнения, Параметры, ИсходноеСостояниеДополнения) Экспорт
	
	Если Не ВызовМетодаРазрешен(База) Тогда
		Возврат;
	КонецЕсли;
	Если Параметры.Количество() = 0 Тогда
		ВызватьИсключение "Не указаны параметры операции.";
	КонецЕсли;
	
	ПутьМетода = "/params_change";
	СтатусОперации = "";
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ТипДополнения", ТипДополнения);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыМетода, Параметры, Истина);
	ПараметрыМетода = РаботаСДополнениямиИнтеграция.КонвертированныеПараметрыЗапроса(ПараметрыМетода, СловарьКонвертацииПараметровУК());
	
	ПараметрыЗапроса = ПараметрыЗапросаСервиса(База, ПутьМетода, ПараметрыМетода);
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю("Не удалось получить параметры подключения.");
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ОтветСервиса(ПараметрыЗапроса, Метаданные.СвойстваОбъектов.HTTPМетод.POST);
	
	Отказ = Ложь;
	ТекстОшибки = "";
	
	Если РезультатЗапроса.КодСостояния > 299 Тогда
		ТекстОшибки = ТекстОшибкиПолученияОтветаСервиса(
			ПараметрыЗапроса.База,
			РезультатЗапроса.КодСостояния,
			РезультатЗапроса.ТелоОтвета,
			,
			Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		Попытка
			ОбъектОтвета = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(РезультатЗапроса.ТелоОтвета);
			СтатусОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбъектОтвета, "Статус", "");
		Исключение
			ТекстОшибки = ТекстОшибкиПолученияОтветаСервиса(
				ПараметрыЗапроса.База,
				РезультатЗапроса.КодСостояния,
				РезультатЗапроса.ТелоОтвета,
				ОписаниеОшибки(),
				Отказ);
		КонецПопытки;
	КонецЕсли;
	
	// Запись в историю
	ПараметрыЗаписиИстории = ПараметрыЗаписиИстории();
	ЗаполнитьЗначенияСвойств(ПараметрыЗаписиИстории, ИсходноеСостояниеДополнения);
	ПараметрыЗаписиИстории.Операция = Перечисления.ВидыОперацииДополнений.Изменение;
	Если Отказ Тогда
		ПараметрыЗаписиИстории.СтатусВыполнения = Перечисления.СтатусыОперацийДополнений.Ошибка;
		ПараметрыЗаписиИстории.ИнформацияОбОшибке = ТекстОшибки;
	КонецЕсли;
	Если Не ПустаяСтрока(СтатусОперации) Тогда
		ПараметрыЗаписиИстории.Комментарий = СтрШаблон("Статус операции: %1", СтатусОперации);
	КонецЕсли;
	// Отслеживаем изменение активности
	НоваяАктивность = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Активно", Неопределено);
	ТекущаяАктивность = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходноеСостояниеДополнения, "Активно", Неопределено);
	Если (Не НоваяАктивность = Неопределено) И (Не НоваяАктивность = ТекущаяАктивность) Тогда
		ПараметрыЗаписиИстории.Активно = НоваяАктивность;
	КонецЕсли;
	
	Попытка
		ДобавитьЗаписьИстории(ПараметрыЗаписиИстории);
	Исключение
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_ЗаписьИстории(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ИсторияДополнений,
			,
			ОписаниеОшибки());
	КонецПопытки;
	
	Если Отказ Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_Изменение(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Дополнения,
			,
			ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеДополнения(База, ТипДополнения, Параметры) Экспорт
	
	ПутьМетода = "/data";
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ТипДополнения", ТипДополнения);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыМетода, Параметры, Истина);
	ПараметрыМетода = РаботаСДополнениямиИнтеграция.КонвертированныеПараметрыЗапроса(ПараметрыМетода, СловарьКонвертацииПараметровУК());
	
	ПараметрыЗапроса = ПараметрыЗапросаСервиса(База, ПутьМетода, ПараметрыМетода);
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ТекстОшибки = "Не удалось получить параметры подключения.";
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_ПолучениеСостояния(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Дополнения,
			,
			ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ОжидаемыйТипОтвета", Тип("ДвоичныеДанные"));
	РезультатЗапроса = ОтветСервиса(ПараметрыЗапроса, Метаданные.СвойстваОбъектов.HTTPМетод.GET);
	
	Если РезультатЗапроса.КодСостояния > 299 Тогда
		ТекстОшибки = ТекстОшибкиПолученияОтветаСервиса(
			ПараметрыЗапроса.База,
			РезультатЗапроса.КодСостояния,
			ПолучитьСтрокуИзДвоичныхДанных(РезультатЗапроса.ТелоОтвета));
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_ПолучениеСостояния(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Дополнения,
			,
			ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.ТелоОтвета;

КонецФункции

#Область ДополненияСправочник

Процедура ДополнитьОписаниеДополненийДаннымиИзФайла(ПомещенныеФайлы, Контекст) Экспорт
	
	СпецСимволы = ".@-:+";

	Для Индекс = 0 по ПомещенныеФайлы.ВГраница() Цикл
		
		ОписаниеФайла = ПомещенныеФайлы[Индекс];
		ОписаниеФайла.Вставить("Версия", "");
		
		АдресХранилища = ОписаниеФайла.Хранение;
		
		// При получении из файла необходимо прочитать ключевые реквизиты
		// Имя, полученное из файла необходимо подменить именем дополнения
		Если Контекст.ТипДополнения = Перечисления.ТипыДополнений.Расширение Тогда
			ДанныеРасширения = Новый ОписаниеКонфигурации(ПолучитьИзВременногоХранилища(АдресХранилища));
			ЗаполнитьЗначенияСвойств(ОписаниеФайла, ДанныеРасширения, "Имя, Версия");
		ИначеЕсли Контекст.ТипДополнения = Перечисления.ТипыДополнений.ДополнительныйОтчетИлиОбработка Тогда
			// Используем механику БСП для получения параметров регистрации.
			// Невозможно получить сведения для обработок, предназначенных для "другой" конфигурации.
			//Сведения = СведенияДополнительныхОтчетаОбработки(ОписаниеФайла);
			ИмяФайла = ОписаниеФайла.ИмяФайла;
			ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
			ИмяФайлаБезРасширения = ?(ПозицияТочки = 0, ИмяФайла, Лев(ИмяФайла, ПозицияТочки - 1));
			
			ОписаниеФайла.Имя = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
				СпецСимволы,
				ИмяФайлаБезРасширения,
				"_");
				
			ОписаниеФайла.Версия = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение), ХешФункция.CRC32);
			//ЗаполнитьЗначенияСвойств(ОписаниеФайла, Сведения, "Имя, Версия");
		Иначе
			Продолжить;
			// "Неизвестный тип дополнения";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьОписаниеДополненийДаннымиСправочника(ДобавляемыеДополнения, Контекст) Экспорт
	
	ДополненияДляПоиска = Новый ТаблицаЗначений;
	ДополненияДляПоиска.Колонки.Добавить("ИндексЭлемента", ОбщегоНазначения.ОписаниеТипаЧисло(7));
	ДополненияДляПоиска.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДополненияДляПоиска.Колонки.Добавить("Версия", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	
	Для Индекс = 0 по ДобавляемыеДополнения.ВГраница() Цикл
		ОписаниеДополнения = ДобавляемыеДополнения[Индекс];
		СтрокаПоиска = ДополненияДляПоиска.Добавить();
		СтрокаПоиска.ИндексЭлемента = Индекс;
		СтрокаПоиска.Имя = ОписаниеДополнения.Имя;
		СтрокаПоиска.Версия = ОписаниеДополнения.Версия;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополненияДляПоиска.ИндексЭлемента КАК ИндексЭлемента,
		|	ДополненияДляПоиска.Имя КАК Имя,
		|	ДополненияДляПоиска.Версия КАК Версия
		|ПОМЕСТИТЬ ДополненияДляПоиска
		|ИЗ
		|	&ДополненияДляПоиска КАК ДополненияДляПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополненияДляПоиска.ИндексЭлемента КАК ИндексЭлемента,
		|	ДополненияДляПоиска.Имя КАК Имя,
		|	ДополненияДляПоиска.Версия КАК Версия,
		|	Дополнения.Ссылка КАК Дополнение
		|ПОМЕСТИТЬ ПоискДополнения
		|ИЗ
		|	ДополненияДляПоиска КАК ДополненияДляПоиска
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Дополнения КАК Дополнения
		|		ПО ДополненияДляПоиска.Имя = Дополнения.Наименование
		|			И (НЕ Дополнения.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоискДополнения.ИндексЭлемента КАК ИндексЭлемента,
		|	ПоискДополнения.Имя КАК Имя,
		|	ПоискДополнения.Версия КАК Версия,
		|	ЕСТЬNULL(ПоискДополнения.Дополнение, НЕОПРЕДЕЛЕНО) КАК Дополнение,
		|	ЕСТЬNULL(ВерсииДополнений.Ссылка, НЕОПРЕДЕЛЕНО) КАК ВерсияДополнения,
		|	НЕ ВерсииДополнений.Ссылка ЕСТЬ NULL КАК ВерсияСуществует,
		|	НЕ ПоискДополнения.Дополнение ЕСТЬ NULL КАК ДополнениеСуществует
		|ИЗ
		|	ПоискДополнения КАК ПоискДополнения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииДополнений КАК ВерсииДополнений
		|		ПО ПоискДополнения.Дополнение = ВерсииДополнений.Владелец
		|			И ПоискДополнения.Версия = ВерсииДополнений.Версия
		|			И (НЕ ВерсииДополнений.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ДополненияДляПоиска", ДополненияДляПоиска);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОписаниеДополнения = ДобавляемыеДополнения[ВыборкаДетальныеЗаписи.ИндексЭлемента];
		
		ОписаниеДополнения.Вставить("Дополнение");
		ОписаниеДополнения.Вставить("ВерсияДополнения");
		ОписаниеДополнения.Вставить("ВерсияСуществует", Ложь);
		ОписаниеДополнения.Вставить("ДополнениеСуществует", Ложь);
		
		ЗаполнитьЗначенияСвойств(ОписаниеДополнения, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьДополнения(ДобавляемыеДополнения, Контекст) Экспорт
	
	ДобавленныеДополнения = Новый Массив;
	
	Для Каждого ОписаниеДополнения Из ДобавляемыеДополнения Цикл
		ЕстьОшибки = Ложь;
		ТекстОшибки = "";
		ВерсияДополнения = Неопределено;
		Дополнение = Неопределено;
		
		НачатьТранзакцию();
		Попытка
			Дополнение = СоздатьНайтиДополнение(ОписаниеДополнения, Контекст.ТипДополнения);
			ВерсияДополнения = СоздатьВерсиюДополнения(Дополнение, ОписаниеДополнения);
			
			ЗафиксироватьТранзакцию();
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ТекстОшибки = СтрШаблон(
				"Не удалось добавить дополнение %1 по причине:" + Символы.ПС + "%2",
				ОписаниеДополнения.Имя,
				ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, ЕстьОшибки);
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖР(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Дополнения,
				,
				ТекстОшибки);
		КонецПопытки;
		
		// В историю добавляем только получение из клиентских баз.
		Если ОписаниеДополнения.Свойство("База") Тогда
			// Запись в историю
			ПараметрыЗаписиИстории = ПараметрыЗаписиИстории();
			ЗаполнитьЗначенияСвойств(ПараметрыЗаписиИстории, ОписаниеДополнения);
			ПараметрыЗаписиИстории.Операция = Перечисления.ВидыОперацииДополнений.Получение;
			ПараметрыЗаписиИстории.ВерсияДополнения = ВерсияДополнения;
			Если ЕстьОшибки Тогда
				ПараметрыЗаписиИстории.СтатусВыполнения = Перечисления.СтатусыОперацийДополнений.Ошибка;
				ПараметрыЗаписиИстории.ИнформацияОбОшибке = ТекстОшибки;
			КонецЕсли;
			
			Попытка
				ДобавитьЗаписьИстории(ПараметрыЗаписиИстории);
			Исключение
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖР_ЗаписьИстории(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.РегистрыСведений.ИсторияДополнений,
					,
					ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		Если Не ЕстьОшибки Тогда
			ДополнениеСВерсией = Новый Структура;
			ДополнениеСВерсией.Вставить("Дополнение", Дополнение);
			ДополнениеСВерсией.Вставить("ВерсияДополнения", ВерсияДополнения);
			ДобавленныеДополнения.Добавить(ДополнениеСВерсией);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДобавленныеДополнения;
	
КонецФункции

#КонецОбласти

Процедура ЗаписатьСтатусВерсии(ВерсияДополнения, Статус, Период = '00010101') Экспорт
	
	ЗаписьСтатуса = РегистрыСведений.СтатусыДополнений.СоздатьМенеджерЗаписи();
	ЗаписьСтатуса.Период = ?(Период = '00010101', ТекущаяДатаСеанса(), Период);
	ЗаписьСтатуса.ВерсияДополнения = ВерсияДополнения;
	ЗаписьСтатуса.Статус = Статус;
	ЗаписьСтатуса.Записать();
	
КонецПроцедуры

Функция ВерсииДополненийПоЗадаче(ЗадачаМетеор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиМетеорДополнений.ВерсияДополнения КАК ВерсияДополнения
		|ИЗ
		|	РегистрСведений.ЗадачиМетеорДополнений КАК ЗадачиМетеорДополнений
		|ГДЕ
		|	ЗадачиМетеорДополнений.ЗадачаМетеор = &ЗадачаМетеор";
	
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВерсияДополнения");
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает состояние расширений базы по переданным параметрам сервиса
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ПараметрыЗапросовСервиса
// 
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция СостояниеДополненийБазы(ТипДополнения, ПараметрыЗапроса)
	
	СостояниеДополнений = КонструкторСостояниеДополнений();
	РезультатЗапроса = ОтветСервиса(ПараметрыЗапроса, Метаданные.СвойстваОбъектов.HTTPМетод.GET);
	
	Если РезультатЗапроса.КодСостояния > 299 Тогда
		ТекстОшибки = ТекстОшибкиПолученияОтветаСервиса(
			ПараметрыЗапроса.База,
			РезультатЗапроса.КодСостояния,
			РезультатЗапроса.ТелоОтвета);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_ПолучениеСостояния(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Дополнения,
			,
			ТекстОшибки);
			
		// Строка, чтобы в таблице отображалась ошибка
		СтрокаСостояния = СостояниеДополнений.Добавить();
		СтрокаСостояния.База = ПараметрыЗапроса.База;
		СтрокаСостояния.ТипДополнения = ТипДополнения;
		СтрокаСостояния.Имя = "***** ОШИБКА ПОЛУЧЕНИЯ ДАННЫХ *****";
		СтрокаСостояния.Синоним = ТекстОшибки;
		
		Возврат СостояниеДополнений;
	КонецЕсли;
	
	Попытка
		ОбъектОтвета = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(РезультатЗапроса.ТелоОтвета);
	Исключение
		ТекстОшибки = ТекстОшибкиПолученияОтветаСервиса(
			ПараметрыЗапроса.База,
			РезультатЗапроса.КодСостояния,
			РезультатЗапроса.ТелоОтвета,
			ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_ПолучениеСостояния(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Дополнения,
			,
			ТекстОшибки);
		Возврат СостояниеДополнений;
	КонецПопытки;
	
	Если Не ТипЗнч(ОбъектОтвета) = Тип("Структура") Тогда
		ПричинаОшибки = "Неверный тип ответа.";
		ТекстОшибки = ТекстОшибкиПолученияОтветаСервиса(
			ПараметрыЗапроса.База,
			РезультатЗапроса.КодСостояния,
			РезультатЗапроса.ТелоОтвета,
			ПричинаОшибки);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_ПолучениеСостояния(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Дополнения,
			,
			ТекстОшибки);
		Возврат СостояниеДополнений;
	КонецЕсли;
	
	МассивДополнений = ОбъектОтвета.Результат;
	Если МассивДополнений = Неопределено Тогда
		ПричинаОшибки = "Неверный тип ответа.";
		ТекстОшибки = ТекстОшибкиПолученияОтветаСервиса(
			ПараметрыЗапроса.База,
			РезультатЗапроса.КодСостояния,
			РезультатЗапроса.ТелоОтвета,
			ПричинаОшибки);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР_ПолучениеСостояния(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Дополнения,
			,
			ТекстОшибки);
		Возврат СостояниеДополнений;
	КонецЕсли;
	Конфигурация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.База, "Владелец");
	Для Каждого СведенияРасширения Из МассивДополнений Цикл
		НовСтрокаСведений = СостояниеДополнений.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаСведений, СведенияРасширения);
		НовСтрокаСведений.База = ПараметрыЗапроса.База;
		НовСтрокаСведений.Конфигурация = Конфигурация;
		НовСтрокаСведений.ТипДополнения = ТипДополнения;
	КонецЦикла;

	Возврат СостояниеДополнений;
	
КонецФункции

#Область РаботаССервисом

// Конструктор таблицы состояния расширений
// 
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция КонструкторСостояниеДополнений()
	
	СостояниеДополнений = Новый ТаблицаЗначений;
	СостояниеДополнений.Колонки.Добавить("База", Новый ОписаниеТипов("СправочникСсылка.Базы1С"));
	СостояниеДополнений.Колонки.Добавить("Конфигурация", Новый ОписаниеТипов("СправочникСсылка.Конфигурации"));
	СостояниеДополнений.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	СостояниеДополнений.Колонки.Добавить("ИмяФайла", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	СостояниеДополнений.Колонки.Добавить("Синоним", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	СостояниеДополнений.Колонки.Добавить("Версия", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	СостояниеДополнений.Колонки.Добавить("БезопасныйРежим", Новый ОписаниеТипов("Булево"));
	СостояниеДополнений.Колонки.Добавить("ЗащитаОтОпасныхДействий", Новый ОписаниеТипов("Булево"));
	СостояниеДополнений.Колонки.Добавить("УникальныйИдентификатор",  ОбщегоНазначения.ОписаниеТипаСтрока(36));
	СостояниеДополнений.Колонки.Добавить("Активно",  Новый ОписаниеТипов("Булево"));
	СостояниеДополнений.Колонки.Добавить("ТипДополнения", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДополнений"));
	СостояниеДополнений.Колонки.Добавить("ХешСумма", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	
	Возврат СостояниеДополнений;
	
КонецФункции

// Формирует параметры запросов к сервису на основании информации в справочнике Базы1С
// и выполняемой операции
//
// Параметры:
//  Базы	 - СправочникСсылка.Базы1С, Массив  - база или массив баз 1С для отбора
//  ПутьМетода		 - Строка - путь метода в сервисе дополнений
//  ПараметрыМетода	 - Структура - параметры для передачи в строке URI
// 
// Возвращаемое значение:
//  Массив - массив структур с параметрами сервисов баз.
//
Функция ПараметрыЗапросовСервиса(Базы, ПутьМетода, ПараметрыМетода)
	
	СтрокаПараметров = СтрокаПараметровЗапроса(ПараметрыМетода);
	АдресМетодаСПараметрами = ПутьМетода + СтрокаПараметров;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Базы1С.Ссылка КАК База,
		|	Базы1С.АдресСервисаДополнений + &АдресМетодаСПараметрами КАК АдресЗапроса,
		|	Базы1С.ПользовательСервисаДополнений КАК Пользователь,
		|	Базы1С.ПарольСервисаДополнений КАК Пароль
		|ИЗ
		|	Справочник.Базы1С КАК Базы1С
		|ГДЕ
		|	1 = 1
		|	И Базы1С.ПометкаУдаления = Ложь
		|	И НЕ Базы1С.АдресСервисаДополнений = """"
		|	И (&ВыбратьВсе
		|			ИЛИ Базы1С.Ссылка В (&Базы))
		|	И (НЕ &ОтборВКопии
		|			ИЛИ Базы1С.ЭтоКопия)";
	
	Запрос.УстановитьПараметр("ВыбратьВсе", Базы = Неопределено);	
	Запрос.УстановитьПараметр("Базы", Базы);
	Запрос.УстановитьПараметр("АдресМетодаСПараметрами", АдресМетодаСПараметрами);
	Запрос.УстановитьПараметр("ОтборВКопии", БлокировкаРаботыСВнешнимиРесурсамиУКПовтИсп.ЭтоКопияБазы());
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса.Выгрузить());
	
КонецФункции

// Формирует параметры запроса.
//
// Параметры:
//  см. ПараметрыЗапросовСервиса
// 
// Возвращаемое значение:
//  Структура, Неопределено - если параметны не найдены, то Неопределено
//
Функция ПараметрыЗапросаСервиса(База, ПутьМетода, ПараметрыМетода)
	
	ПараметрыЗапросовСервиса = ПараметрыЗапросовСервиса(База, ПутьМетода, ПараметрыМетода);
	
	Если Не ПараметрыЗапросовСервиса.Количество() Тогда
		ПараметрыЗапроса = Новый Структура;
	Иначе
		ПараметрыЗапроса = ПараметрыЗапросовСервиса[0];
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Формирует запрос по переданным параметрам, и получает ответ сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ПараметрыЗапросовСервиса
//  ТипЗапроса		 - ПеречислимыеСвойстваОбъектовМетаданных.HTTPМетод - требуемый тип запроса
// 
// Возвращаемое значение:
//  Структура
//    * КодСостояния
//    * ТелоОтвета
//
Функция ОтветСервиса(ПараметрыЗапроса, ТипЗапроса)
	
	РезультатЗапроса = Новый Структура;
	РезультатЗапроса.Вставить("КодСостояния");
	РезультатЗапроса.Вставить("ТелоОтвета");
	
	АдресЗапроса =ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "АдресЗапроса");
	Пользователь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Пользователь", "");
	Пароль = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Пароль", "");
	ТелоЗапроса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ТелоЗапроса", "");
	ТипТелаЗапроса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ТипТелаЗапроса", Тип("Строка"));
	ОжидаемыйТипОтвета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ОжидаемыйТипОтвета", Тип("Строка"));
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресЗапроса);
	
	Попытка
		Соединение = Соединение(СтруктураURI, Пользователь, Пароль, 30);
	Исключение
		ТекстОшибки =
			СтрШаблон("Не удалось установить соединение с сервисом: %1.", АдресЗапроса) 
				+ Символы.ПС + 	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.HTTPСервисы.Дополнения,
			,
			ТекстОшибки);
		РезультатЗапроса.КодСостояния = 1000;
		РезультатЗапроса.ТелоОтвета = ТекстОшибки;
		Возврат РезультатЗапроса;
	КонецПопытки;
	КонтентТайп = "application/json; charset=utf-8";
	Если Не ОжидаемыйТипОтвета = Тип("Строка") Тогда
		КонтентТайп = "application/octet-stream";
	КонецЕсли;
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", КонтентТайп);
	ЗаголовкиHTTP.Вставить("Accept-Charset", "utf-8");
	
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, ЗаголовкиHTTP);
	Если ТипТелаЗапроса = Тип("Строка") Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	ИначеЕсли ТипТелаЗапроса = Тип("ДвоичныеДанные") Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
	КонецЕсли;
	
	Попытка
		Если ТипЗапроса = Метаданные.СвойстваОбъектов.HTTPМетод.GET Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		ИначеЕсли ТипЗапроса = Метаданные.СвойстваОбъектов.HTTPМетод.POST Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ТипЗапроса = Метаданные.СвойстваОбъектов.HTTPМетод.PUT Тогда
			HTTPОтвет = Соединение.Записать(HTTPЗапрос);
		ИначеЕсли ТипЗапроса = Метаданные.СвойстваОбъектов.HTTPМетод.DELETE Тогда
			HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
		Иначе
			HTTPОтвет = Соединение.ВызватьHTTPМетод(Строка(ТипЗапроса), HTTPЗапрос);
		КонецЕсли;
	Исключение
		ТекстОшибки = СтрШаблон(
			"Ошибка работы с сервисом. Адрес: %1." "%2",
			АдресЗапроса,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.HTTPСервисы.Дополнения,
			,
			ТекстОшибки);
		РезультатЗапроса.КодСостояния = 1000;
		РезультатЗапроса.ТелоОтвета = ТекстОшибки;
		Возврат РезультатЗапроса;
	КонецПопытки;
	
	РезультатЗапроса.КодСостояния = HTTPОтвет.КодСостояния;
	Если ОжидаемыйТипОтвета = Тип("Строка")Тогда
		РезультатЗапроса.ТелоОтвета  = HTTPОтвет.ПолучитьТелоКакСтроку();
	ИначеЕсли ОжидаемыйТипОтвета = Тип("ДвоичныеДанные") Тогда
		РезультатЗапроса.ТелоОтвета  = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		ТекстОшибки = "Неподдерживаемый тип ответа сервиса. Код состояния: " + HTTPОтвет.КодСостояния;
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.HTTPСервисы.Дополнения,
			,
			ТекстОшибки);
		РезультатЗапроса.КодСостояния = 1000;
		РезультатЗапроса.ТелоОтвета = ТекстОшибки;
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция Соединение(СтруктураURI, Пользователь, Пароль, Таймаут)
	
	ЗащищенноеСоединение = ?(СтруктураURI.Схема = "https", ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС), Неопределено);
	Порт = ?(ЗначениеЗаполнено(СтруктураURI.Порт), Число(СтруктураURI.Порт), ?(ЗащищенноеСоединение = Неопределено, 80, 443));
	
	Возврат Новый HTTPСоединение(СтруктураURI.Хост, Порт, Пользователь, Пароль,, Таймаут, ЗащищенноеСоединение);
	
КонецФункции

Функция СтрокаПараметровЗапроса(СтруктураПараметров)

	СтрокаСПараметрами = "";	
	ШаблонПараметра = "&%1=%2";
	МассивСтрокПараметров = Новый Массив;
	Для Каждого ПараметрЗапроса Из СтруктураПараметров Цикл
		МассивСтрокПараметров.Добавить(СтрШаблон(ШаблонПараметра, ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение));
	КонецЦикла;		
	
	Если МассивСтрокПараметров.Количество() Тогда
		СтрокаСПараметрами = СтрШаблон("?%1", Сред(СтрСоединить(МассивСтрокПараметров), 2));
	КонецЕсли;
	
	Возврат	СтрокаСПараметрами;
	
КонецФункции

Функция ТелоЗапросаУстановкиДополнения(ВерсияРасширения)
	
	СписокФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВерсияРасширения, СписокФайлов);
	Если Не СписокФайлов.Количество() Тогда
		ВызватьИсключение "Не найден файл версии дополнения."
	КонецЕсли;
	
	// Файл у версии должен быть только один. Если их несколько, используем первый.
	ПрисоединенныйФайл = СписокФайлов[0];
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл.Ссылка);
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

Функция ТекстОшибкиПолученияОтветаСервиса(База, КодСостояния, ТелоОтвета, ТекстОшибки = "", Отказ = Ложь)
	
	Отказ = Истина;
	
	Возврат СтрШаблон(
		"При запросе к базе %1 возникли ошибки: %2
		|Код состояния: %3 (%4)
		|Ответ сервиса:
		|%5",
		База,
		ТекстОшибки,
		КодСостояния, 
		РасшифровкаКодаСостоянияHTTP(КодСостояния),
		ТелоОтвета);
	
КонецФункции

#КонецОбласти

#Область Дополнения

Функция СоздатьНайтиДополнение(ОписаниеФайла, ТипДополнения)
	
	Если ОписаниеФайла.ДополнениеСуществует Тогда
		Возврат ОписаниеФайла.Дополнение;
	КонецЕсли;
	
	ДополнениеОбъект = Справочники.Дополнения.СоздатьЭлемент();
	ДополнениеОбъект.Наименование = ОписаниеФайла.Имя;
	ДополнениеОбъект.ТипДополнения = ТипДополнения;
	Если ДополнениеОбъект.ТипДополнения = Перечисления.ТипыДополнений.Расширение Тогда
		ДополнениеОбъект.ТипРасширения = 
			?(СтрНайти(ОписаниеФайла.Имя, "Доработка") > 0 ,
				Перечисления.ТипыРасширений.Доработка,
				Перечисления.ТипыРасширений.Исправление);
	КонецЕсли;
	ДополнениеОбъект.Конфигурация = ОписаниеФайла.Конфигурация;
	
	Если Не ДополнениеОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение "При проверке заполнения дополнения возникли ошибки. Наименование: " + ДополнениеОбъект.Наименование;
	КонецЕсли;
	
	ДополнениеОбъект.Записать();
	
	Возврат ДополнениеОбъект.Ссылка;
		
КонецФункции

Функция СоздатьВерсиюДополнения(Дополнение, ОписаниеФайла)
	
	НоваяВерсия = Справочники.ВерсииДополнений.СоздатьЭлемент();
	НоваяВерсия.Владелец = Дополнение;
	НоваяВерсия.Наименование = СтрШаблон("%1_%2", ОписаниеФайла.Имя, ОписаниеФайла.Версия);
	НоваяВерсия.Версия = ОписаниеФайла.Версия;
	НоваяВерсия.Автор = Пользователи.ТекущийПользователь();
	НоваяВерсия.Версия = ОписаниеФайла.Версия;
	НоваяВерсия.ИмяОбъекта = ОписаниеФайла.Имя;
	НоваяВерсия.ИмяФайла = ОписаниеФайла.ИмяФайла;
	НоваяВерсия.Описание = СтрШаблон("### Загружено автоматически из базы %1.", ОписаниеФайла.База);
	
	Если Не НоваяВерсия.ПроверитьЗаполнение() Тогда
		ВызватьИсключение "Обнаружены ошибки заполнения версии дополнения: " + НоваяВерсия.Наименование;
	КонецЕсли;
	НоваяВерсия.Записать();
	
	ВерсияДополненияСсылка = НоваяВерсия.Ссылка;
	
	РеквизитыФайла = Новый Структура;
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла(РеквизитыФайла);
	ПараметрыФайла.ВладелецФайлов = ВерсияДополненияСсылка;
	ПараметрыФайла.Автор = Пользователи.ТекущийПользователь();
	ЧастиИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеФайла.ИмяФайла);
	ПараметрыФайла.ИмяБезРасширения = ЧастиИмениФайла.ИмяБезРасширения;
	ПараметрыФайла.РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЧастиИмениФайла.Расширение);
	
	ФайлДополнения = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ОписаниеФайла.Хранение);
	
	Возврат ВерсияДополненияСсылка;
	
КонецФункции

#КонецОбласти

#Область История

Процедура ДобавитьЗаписьИстории(ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборИстории = РегистрыСведений.ИсторияДополнений.СоздатьНаборЗаписей();
	Отборы = НаборИстории.Отбор;
	Для Каждого Отбор Из Отборы Цикл
		ЗначениеОтбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаписи, Отбор.Имя, Неопределено);
		Если ЗначениеОтбора = Неопределено Тогда
			ШаблонСообщения = "Не удалось записать историю. Не установлен отбор: %1" "Параметры записи:" "%2";
			Попытка
				ПараметрыЗаписиСтрока = СтроковыеФункцииУККлиентСервер.ЗаписатьЗначениеJSON(ПараметрыЗаписи);
			Исключение
				ПараметрыЗаписиСтрока = "Ошибка json сериализации параметров типа " + ТипЗнч(ПараметрыЗаписи);
			КонецПопытки;
			ВызватьИсключение СтрШаблон(ШаблонСообщения, Отбор.Имя, ПараметрыЗаписиСтрока);
		КонецЕсли;
		Отбор.Установить(ЗначениеОтбора);
	КонецЦикла;
	
	ЗаписьИстории = НаборИстории.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьИстории, ПараметрыЗаписи);
	
	НаборИстории.Записать(Ложь);	
	
КонецПроцедуры

Функция ПараметрыЗаписиИстории()
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить("Период", ТекущаяДатаСеанса());
	ПараметрыЗаписи.Вставить("База");
	ПараметрыЗаписи.Вставить("Имя");
	ПараметрыЗаписи.Вставить("Версия");
	
	ПараметрыЗаписи.Вставить("Операция");
	ПараметрыЗаписи.Вставить("ВерсияДополнения");
	ПараметрыЗаписи.Вставить("Активно");
	ПараметрыЗаписи.Вставить("СтатусВыполнения", Перечисления.СтатусыОперацийДополнений.Выполнена);
	
	ПараметрыЗаписи.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	ПараметрыЗаписи.Вставить("Комментарий");
	ПараметрыЗаписи.Вставить("ИнформацияОбОшибке");
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

#КонецОбласти

#Область Словари

Функция СловарьКонвертацииПараметровУК() Экспорт
	
	Словарь = РаботаСДополнениямиИнтеграция.СловарьЗначенийПараметровЗапроса();
	Словарь.Вставить(Перечисления.ТипыДополнений.Расширение, Словарь.Получить(РаботаСДополнениямиИнтеграция.ТипДополненияРасширение()));
	Словарь.Вставить(Перечисления.ТипыДополнений.ДополнительныйОтчетИлиОбработка, Словарь.Получить(РаботаСДополнениямиИнтеграция.ТипДополненияДопОтчетОбработка()));
	
	Словарь.Вставить(Перечисления.СтатусыИсторииХранилищ.Перенос, Словарь.Получить(РаботаСДополнениямиИнтеграция.СтатусПеренос()));
	// Обратное преобразование
	Словарь.Вставить(Словарь.Получить(РаботаСДополнениямиИнтеграция.ТипДополненияРасширение()), Перечисления.ТипыДополнений.Расширение);
	Словарь.Вставить(Словарь.Получить(РаботаСДополнениямиИнтеграция.ТипДополненияДопОтчетОбработка()), Перечисления.ТипыДополнений.ДополнительныйОтчетИлиОбработка);
	Словарь.Вставить(Словарь.Получить(РаботаСДополнениямиИнтеграция.СтатусПеренос()), Перечисления.СтатусыИсторииХранилищ.Перенос);
	Возврат Словарь;
	
КонецФункции

Функция ИмяСобытияЖР()
	Возврат "Дополнения";
КонецФункции

Функция ИмяСобытияЖР_ПолучениеСостояния()
	Возврат СтрШаблон("%1.%2", ИмяСобытияЖР(), "Получение состояния");
КонецФункции

Функция ИмяСобытияЖР_ПолучениеДанных()
	Возврат СтрШаблон("%1.%2", ИмяСобытияЖР(), "Получение данных");
КонецФункции

Функция ИмяСобытияЖР_Установка()
	Возврат СтрШаблон("%1.%2", ИмяСобытияЖР(), "Установка");
КонецФункции

Функция ИмяСобытияЖР_Изменение()
	Возврат СтрШаблон("%1.%2", ИмяСобытияЖР(), "Изменение");
КонецФункции

Функция ИмяСобытияЖР_Удаление()
	Возврат СтрШаблон("%1.%2", ИмяСобытияЖР(), "Удаление");
КонецФункции

Функция ИмяСобытияЖР_ЗаписьИстории()
	Возврат СтрШаблон("%1.%2", ИмяСобытияЖР(), "Запись истории");
КонецФункции

Функция РасшифровкаКодаСостоянияHTTP(КодСостояния)
	
	Если КодСостояния = 304 Тогда // Not Modified
		Расшифровка = НСтр("ru = 'Нет необходимости повторно передавать запрошенные ресурсы.'");
	ИначеЕсли КодСостояния = 400 Тогда // Bad Request
		Расшифровка = НСтр("ru = 'Запрос не может быть исполнен.'");
	ИначеЕсли КодСостояния = 401 Тогда // Unauthorized
		Расшифровка = НСтр("ru = 'Попытка авторизации на сервере была отклонена.'");
	ИначеЕсли КодСостояния = 402 Тогда // Payment Required
		Расшифровка = НСтр("ru = 'Требуется оплата.'");
	ИначеЕсли КодСостояния = 403 Тогда // Forbidden
		Расшифровка = НСтр("ru = 'К запрашиваемому ресурсу нет доступа.'");
	ИначеЕсли КодСостояния = 404 Тогда // Not Found
		Расшифровка = НСтр("ru = 'Запрашиваемый ресурс не существует на сервере.'");
	ИначеЕсли КодСостояния = 405 Тогда // Method Not Allowed
		Расшифровка = НСтр("ru = 'Метод запроса не поддерживается сервером.'");
	ИначеЕсли КодСостояния = 406 Тогда // Not Acceptable
		Расшифровка = НСтр("ru = 'Запрошенный формат данных не поддерживается сервером.'");
	ИначеЕсли КодСостояния = 407 Тогда // Proxy Authentication Required
		Расшифровка = НСтр("ru = 'Ошибка аутентификации на прокси-сервере'");
	ИначеЕсли КодСостояния = 408 Тогда // Request Timeout
		Расшифровка = НСтр("ru = 'Время ожидания сервером передачи от клиента истекло.'");
	ИначеЕсли КодСостояния = 409 Тогда // Conflict
		Расшифровка = НСтр("ru = 'Запрос не может быть выполнен из-за конфликтного обращения к ресурсу.'");
	ИначеЕсли КодСостояния = 410 Тогда // Gone
		Расшифровка = НСтр("ru = 'Ресурс на сервере был перемещен.'");
	ИначеЕсли КодСостояния = 411 Тогда // Length Required
		Расшифровка = НСтр("ru = 'Сервер требует указание ""Content-length."" в заголовке запроса.'");
	ИначеЕсли КодСостояния = 412 Тогда // Precondition Failed
		Расшифровка = НСтр("ru = 'Запрос не применим к ресурсу'");
	ИначеЕсли КодСостояния = 413 Тогда // Request Entity Too Large
		Расшифровка = НСтр("ru = 'Сервер отказывается обработать, слишком большой объем передаваемых данных.'");
	ИначеЕсли КодСостояния = 414 Тогда // Request-URL Too Long
		Расшифровка = НСтр("ru = 'Сервер отказывается обработать, слишком длинный URL.'");
	ИначеЕсли КодСостояния = 415 Тогда // Unsupported Media-Type
		Расшифровка = НСтр("ru = 'Сервер заметил, что часть запроса была сделана в неподдерживаемом формат'");
	ИначеЕсли КодСостояния = 416 Тогда // Requested Range Not Satisfiable
		Расшифровка = НСтр("ru = 'Часть запрашиваемого ресурса не может быть предоставлена'");
	ИначеЕсли КодСостояния = 417 Тогда // Expectation Failed
		Расшифровка = НСтр("ru = 'Сервер не может предоставить ответ на указанный запрос.'");
	ИначеЕсли КодСостояния = 429 Тогда // Too Many Requests
		Расшифровка = НСтр("ru = 'Слишком много запросов за короткое время.'");
	ИначеЕсли КодСостояния = 500 Тогда // Internal Server Error
		Расшифровка = НСтр("ru = 'Внутренняя ошибка сервера.'");
	ИначеЕсли КодСостояния = 501 Тогда // Not Implemented
		Расшифровка = НСтр("ru = 'Сервер не поддерживает метод запроса.'");
	ИначеЕсли КодСостояния = 502 Тогда // Bad Gateway
		Расшифровка = НСтр("ru = 'Сервер, выступая в роли шлюза или прокси-сервера, 
		                         |получил недействительное ответное сообщение от вышестоящего сервера.'");
	ИначеЕсли КодСостояния = 503 Тогда // Server Unavailable
		Расшифровка = НСтр("ru = 'Сервер временно не доступен.'");
	ИначеЕсли КодСостояния = 504 Тогда // Gateway Timeout
		Расшифровка = НСтр("ru = 'Сервер в роли шлюза или прокси-сервера 
		                         |не дождался ответа от вышестоящего сервера для завершения текущего запроса.'");
	ИначеЕсли КодСостояния = 505 Тогда // HTTP Version Not Supported
		Расшифровка = НСтр("ru = 'Сервер не поддерживает указанную в запросе версию протокола HTTP'");
	ИначеЕсли КодСостояния = 506 Тогда // Variant Also Negotiates
		Расшифровка = НСтр("ru = 'Сервер настроен некорректно, и не способен обработать запрос.'");
	ИначеЕсли КодСостояния = 507 Тогда // Insufficient Storage
		Расшифровка = НСтр("ru = 'На сервере недостаточно места для выполнения запроса.'");
	ИначеЕсли КодСостояния = 509 Тогда // Bandwidth Limit Exceeded
		Расшифровка = НСтр("ru = 'Сервер превысил отведенное ограничение на потребление трафика.'");
	ИначеЕсли КодСостояния = 510 Тогда // Not Extended
		Расшифровка = НСтр("ru = 'Сервер требует больше информации о совершаемом запросе.'");
	ИначеЕсли КодСостояния = 511 Тогда // Network Authentication Required
		Расшифровка = НСтр("ru = 'Требуется авторизация на сервере.'");
	Иначе 
		Расшифровка = НСтр("ru = '<Неизвестный код состояния>.'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '[%1] %2'"), 
		КодСостояния, 
		Расшифровка);
	
КонецФункции

#КонецОбласти

Функция ВызовМетодаРазрешен(База)
	Если БлокировкаРаботыСВнешнимиРесурсамиУКПовтИсп.ЭтоКопияБазы() Тогда
		 Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "ЭтоКопия") Тогда
		 	ОбщегоНазначения.СообщитьПользователю("Отправка запросов из копии в рабочие базы заблокирована.");
			Возврат Ложь;
		 КонецЕсли;
	 КонецЕсли;
	 Возврат Истина;
КонецФункции

#КонецОбласти

