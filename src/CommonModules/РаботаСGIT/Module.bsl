//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с GIT
//  
//////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Документация: https://docs.gitlab.com/ee/api/api_resources.html
#Область ПрограммныйИнтерфейс_REST_API

Функция КонструкторПараметровКомандыREST_API(СерверGit = Неопределено) Экспорт
	
	Конструктор = Новый Структура;
	
	Конструктор.Вставить("АдресСервера", ?(ЗначениеЗаполнено(СерверGit), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СерверGit, "АдресСервера"), ""));
	Конструктор.Вставить("Токен", ?(ЗначениеЗаполнено(СерверGit), ПолучитьТокенСлужебногоПользователя(СерверGit), ""));
	Конструктор.Вставить("HTTPМетод", "GET");
	
	// Для получения полных данных при ограничении постраничного вывода метода
	Конструктор.Вставить("ИспользоватьПостраничноеПолучение", Ложь);
	Конструктор.Вставить("ШаблонПараметраНомерСтраницы", "");
	
	// Переменные, подставляемые в параметры пути
	Конструктор.Вставить("ПеременныеURI", Новый Структура);
	
	// Параметры, для генерации в строке адреса
	Конструктор.Вставить("ПараметрыЗапроса", Новый Структура);
	
	Возврат Конструктор;
	
КонецФункции

Функция СерверGitПоУмолчанию() Экспорт
	Возврат Справочники.СерверыGIT.Автомакон;
КонецФункции

Функция ПолучитьОтветREST_API(Знач ШаблонАдресаРесурса, Знач ПараметрыКоманды) Экспорт
	
	ОтформатироватьПараметры(ПараметрыКоманды.ПеременныеURI);
	ОтформатироватьПараметры(ПараметрыКоманды.ПараметрыЗапроса);
	
	АдресРесурса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонАдресаРесурса, ПараметрыКоманды.ПеременныеURI);
	
	РезультатЗапроса = КонтсрукторРезультатаЗапроса();
	// Подготовка параметров к постраничному получению
	Если ПараметрыКоманды.ИспользоватьПостраничноеПолучение И ПустаяСтрока(ПараметрыКоманды.ШаблонПараметраНомерСтраницы) Тогда
		ПараметрыКоманды.ШаблонПараметраНомерСтраницы = "[page]";
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("page", ПараметрыКоманды.ШаблонПараметраНомерСтраницы);
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("per_page", 100);
	КонецЕсли;
	
	СтрокаПараметров = ПараметрыURI(ПараметрыКоманды.ПараметрыЗапроса);
	Если Не ПустаяСтрока(СтрокаПараметров) Тогда
		АдресРесурса = СтрШаблон("%1?%2", АдресРесурса, СтрокаПараметров);
	КонецЕсли;
		
	СоединениеHTTP = СоединениеHTTP(ПараметрыКоманды);
	
	Если ПараметрыКоманды.ИспользоватьПостраничноеПолучение Тогда
		СобратьРезультатЗапросаПостранично(СоединениеHTTP, АдресРесурса, ПараметрыКоманды, РезультатЗапроса);
	Иначе
		ВыполнитьЗапросHTTP(СоединениеHTTP, АдресРесурса, ПараметрыКоманды, РезультатЗапроса);
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Документация: https://docs.gitlab.com/ee/api/commits.html
#Область Коммиты
	
Функция ПолучитьСписокКоммитов(
							id,
							ref_name = Неопределено,
							since = Неопределено,
							until = Неопределено,
							path = Неопределено,
							author = Неопределено,
							all = Неопределено,
							with_stats = Неопределено,
							first_parent = Неопределено,
							order = Неопределено,
							trailers = Неопределено,
							Знач СерверGit = Неопределено) Экспорт
	// https://docs.gitlab.com/ee/api/commits.html#list-repository-commits
	ШаблонКоманды = "/api/v4/projects/[id]/repository/commits";
	
	Если СерверGit = Неопределено Тогда
		СерверGit = СерверGitПоУмолчанию();
	КонецЕсли;
	
	ПараметрыКоманды = КонструкторПараметровКомандыREST_API(СерверGit);
	ПараметрыКоманды.ПеременныеURI.Вставить("id", id);
	Если ref_name <> Неопределено Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("ref_name", ref_name);
	КонецЕсли;
	Если since <> Неопределено Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("since", since);
	КонецЕсли;
	Если until <> Неопределено Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("until", until);
	КонецЕсли;
	Если path <> Неопределено Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("path", path);
	КонецЕсли;
	Если author <> Неопределено Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("author", author);
	КонецЕсли;
	Если all <> Неопределено Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("all", all);
	КонецЕсли;
	Если with_stats <> Неопределено Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("with_stats", with_stats);
	КонецЕсли;
	Если order <> Неопределено Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("order", order);
	КонецЕсли;
	Если trailers <> Неопределено Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("trailers", trailers);
	КонецЕсли;
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

Функция ПолучитьКоммит(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/repository/commits/[ИдентификаторКоммитаSHA]";
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

Функция ПолучитьИспользованиеКоммита(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/repository/commits/[ИдентификаторКоммитаSHA]/refs";
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

Функция ПолучитьКомментарииКоммита(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/repository/commits/[ИдентификаторКоммитаSHA]/comments";
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

#КонецОбласти

// https://docs.gitlab.com/ee/api/pipelines.html
#Область Пайплайны_pipelines

Функция ПолучитьПайплан(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/pipelines/[pipeline_id]";
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

Функция ПолучитьСписокЗаданийПайплана(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/pipelines/[pipeline_id]/jobs";
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

Функция ПолучитьСписокМостовПайплана(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/pipelines/[pipeline_id]/bridges";
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

Функция ПолучитьОтчетТестированияПайплана(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/pipelines/[pipeline_id]/test_report";
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

Функция СоздатьНовыйПайплайн(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/pipeline";
	
	ПараметрыКоманды.HTTPМетод = "POST";
	Если Не ПараметрыКоманды.ПараметрыЗапроса.Свойство("tag") Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("tag", "master");
	КонецЕсли;
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

#КонецОбласти

// https://docs.gitlab.com/ee/api/jobs.html
#Область Задания

Функция ЗапуститьЗадание(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/jobs/[job_id]/play";
	ПараметрыКоманды.HTTPМетод = "POST";
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

#КонецОбласти

// https://docs.gitlab.com/ee/api/tags.html
#Область Теги

Функция СоздатьНовыйТег(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/repository/tags";
	
	ПараметрыКоманды.HTTPМетод = "POST";
	
	ОбязательныеПараметры = Новый Массив;
	ОбязательныеПараметры.Добавить("tag_name");
	ОбязательныеПараметры.Добавить("ref");
	
	ШаблонТекстаОшибки = "Не задан обязательный параметр: %1" + Символы.ПС;
	ТекстОшибки = "";
	Для Каждого ОбязательныйПараметр Из ОбязательныеПараметры Цикл
		Если Не ПараметрыКоманды.ПараметрыЗапроса.Свойство(ОбязательныйПараметр) Тогда
			ТекстОшибки = ТекстОшибки + СтрШаблон(ШаблонТекстаОшибки, ОбязательныйПараметр);
		КонецЕсли;
	КонецЦикла;
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
		
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

#КонецОбласти

// https://docs.gitlab.com/ee/api/branches.html
#Область Ветки

Функция ПолучитьСписокВеток(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/repository/branches";
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

// Создает ветку по АПИ
//
// Параметры:
//  ИдентификаторПроекта - Число - 
//  ИмяВетки			 - Строка - имя создаваемой ветки
//  Указатель			 - Строка - 
//  СерверGit			 - СправочникСсылка.СерверыGit 
// 
// Возвращаемое значение:
//  Структура - см. ПолучитьОтветREST_API
//
Функция СоздатьВеткуАПИ(ИдентификаторПроекта, ИмяВетки, Указатель, Знач СерверGit = Неопределено) Экспорт
	// https://docs.gitlab.com/ee/api/repository_files.html#get-raw-file-from-repository	
	
	// POST /projects/:id/repository/branches
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/repository/branches";
	Если СерверGit = Неопределено Тогда
		СерверGit = СерверGitПоУмолчанию();
	КонецЕсли;
	
	ПараметрыКоманды = КонструкторПараметровКомандыREST_API(СерверGit);
	ПараметрыКоманды.HTTPМетод = "POST";
	ПараметрыКоманды.ПеременныеURI.Вставить("ИдентификаторПроекта", ИдентификаторПроекта);
	ПараметрыКоманды.ПараметрыЗапроса.Вставить("branch", ИмяВетки);
	ПараметрыКоманды.ПараметрыЗапроса.Вставить("ref", Указатель);
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

#КонецОбласти

// https://docs.gitlab.com/ee/api/merge_requests.html
#Область МержРеквесты_Merge_requests

Функция ПолучитьСписокМержРеквестов(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/merge_requests";
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

Функция ПолучитьСписокПайплановМержРеквеста(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/merge_requests/[merge_request_iid]/pipelines";
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

Функция ОбъединитьМержРеквест(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/merge_requests/[merge_request_iid]/merge";
	ПараметрыКоманды.HTTPМетод = "PUT";
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

#КонецОбласти

// https://docs.gitlab.com/ee/api/projects.html
#Область Проекты

Функция ПолучитьСписокПроектовГруппы(ПараметрыКоманды) Экспорт
	
	ШаблонКоманды = "/api/v4/groups/[ИмяГруппы]/projects";
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

#КонецОбласти

// https://docs.gitlab.com/ee/api/repositories.html
#Область RepositoriesAPI

Функция СравнитьКоммитыВеткиТеги(ИдентификаторПроекта, УказательА, УказательБ, ИдентификторПроектаУказателяА = Неопределено, ПрямоеСравнение = Неопределено, Знач СерверGit = Неопределено) Экспорт
	
	// GET /projects/:id/repository/compare?from=master&to=feature
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/repository/compare";
	Если СерверGit = Неопределено Тогда
		СерверGit = СерверGitПоУмолчанию();
	КонецЕсли;
	
	ПараметрыКоманды = КонструкторПараметровКомандыREST_API(СерверGit);
	ПараметрыКоманды.ПеременныеURI.Вставить("ИдентификаторПроекта", ИдентификаторПроекта);
	ПараметрыКоманды.ПараметрыЗапроса.Вставить("from", УказательА);
	ПараметрыКоманды.ПараметрыЗапроса.Вставить("to", УказательБ);
	Если ЗначениеЗаполнено(ИдентификторПроектаУказателяА) Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("from_project_id", ИдентификторПроектаУказателяА);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПрямоеСравнение) Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("straight", ПрямоеСравнение);
	КонецЕсли;
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

// Получает файл из репозиторя
//
// Параметры:
//  ИдентификаторПроекта - 	 - 
//  ПутьКФайлу			 - 	 - указывается от корня проекта
//  Указатель			 - 	 - Тег/Ветка/Коммит
//  lfs					 - 	 - 
//  СерверGit			 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьДвоичныеДанныеФайла(ИдентификаторПроекта, ПутьКФайлу, Указатель = Неопределено, lfs = Неопределено, Знач СерверGit = Неопределено) Экспорт
	// https://docs.gitlab.com/ee/api/repository_files.html#get-raw-file-from-repository	
	
	// GET /projects/:id/repository/files/:file_path/raw
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/repository/files/[file_path]/raw";
	Если СерверGit = Неопределено Тогда
		СерверGit = СерверGitПоУмолчанию();
	КонецЕсли;
	
	ПараметрыКоманды = КонструкторПараметровКомандыREST_API(СерверGit);
	ПараметрыКоманды.ПеременныеURI.Вставить("ИдентификаторПроекта", ИдентификаторПроекта);
	ПараметрыКоманды.ПеременныеURI.Вставить("file_path", ПутьКФайлу);
	Если Указатель <> Неопределено Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("ref", Указатель);
	КонецЕсли;
	Если lfs <> Неопределено Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("lfs", lfs);
	КонецЕсли;
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

Функция ПолучитьДанныеФайла(ИдентификаторПроекта, ПутьКФайлу, Указатель = Неопределено, Знач СерверGit = Неопределено) Экспорт
	
	// GET /projects/:id/repository/files/:file_path
	ШаблонКоманды = "/api/v4/projects/[ИдентификаторПроекта]/repository/files/[file_path]";
	Если СерверGit = Неопределено Тогда
		СерверGit = СерверGitПоУмолчанию();
	КонецЕсли;
	
	ПараметрыКоманды = КонструкторПараметровКомандыREST_API(СерверGit);
	ПараметрыКоманды.ПеременныеURI.Вставить("ИдентификаторПроекта", ИдентификаторПроекта);
	ПараметрыКоманды.ПеременныеURI.Вставить("file_path", ПутьКФайлу);
	Если Указатель <> Неопределено Тогда
		ПараметрыКоманды.ПараметрыЗапроса.Вставить("ref", Указатель);
	КонецЕсли;
	
	Возврат ПолучитьОтветREST_API(ШаблонКоманды, ПараметрыКоманды);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс_КомандыShell

// Для вызова команд можно воспользоваться методами общих модулей:
// - ФайловаяСистема.ЗапуститьПрограмму();
// - КоманднаяОболочкаКлиентСервер.ВыполнитьСкрипт();

#Область ШаблоныКомандShell

Функция ТекстКоманды_GitPull() Экспорт
	Возврат "git pull";
КонецФункции

Функция ТекстКоманды_GitCommit(СообщениеКоммита) Экспорт
	Возврат СтрШаблон("git commit -m '%1'", СообщениеКоммита);
КонецФункции

// По умолчанию индексируем все изменения рабочей области.
Функция ТекстКоманды_GitAdd(ПараметрыКоманды = ":/") Экспорт
	Возврат СтрШаблон("git add %1", ПараметрыКоманды);
КонецФункции

Функция ТекстКоманды_GitPush(Репозиторий = "", Ветка = "", ПараметрыКоманды = "") Экспорт
	Возврат СокрЛП(СтрШаблон("git push %1 %2 %3", Репозиторий, Ветка, ПараметрыКоманды));
КонецФункции

// Переключение параметра вывода команд, когда символы кириллицы преобразуются в восьмеричные коды символов
Функция ТекстКоманды_ИзменитьПреобразованиеКириллицыВВосьмеричныеКоды(Включить = Ложь, Глобально = Ложь) Экспорт
	ПараметрГлобально = ?(Глобально, "--global", "");
	ПараметрВключить = ?(Включить, "true", "false");
	Возврат СтрШаблон("git config %1 core.quotepath %2", ПараметрГлобально, ПараметрВключить);
КонецФункции

#КонецОбласти

#КонецОбласти

Функция URLGit(СсылкаНаОбъект) Экспорт
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ИсторияХранилища") Тогда
		УРЛ = URLGitВерсииХранилища(СсылкаНаОбъект);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ВерсииДополнений") Тогда
		УРЛ = URLGitВерсииДополнения(СсылкаНаОбъект);
	Иначе
		УРЛ = "";
	КонецЕсли; 
	Возврат УРЛ;
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Служебные_КомандыREST_API

// Получает ограничения количества страниц, чтобы избежать бесконечного цикла
// в случае ошибки в запросе
// 
// Возвращаемое значение:
//  Число
//
Функция ЛимитСтраниц()
	Возврат 5000;	
КонецФункции

Функция КонтсрукторРезультатаЗапроса()
	
	РезультатЗапроса = Новый Структура;
	РезультатЗапроса.Вставить("КодСостояния");
	РезультатЗапроса.Вставить("ТелоОтвета");
	РезультатЗапроса.Вставить("Результат", Неопределено);
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция СоединениеHTTP(ПараметрыЗапроса)
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	HTTPСоединение = Новый HTTPСоединение(ПараметрыЗапроса.АдресСервера, , , , , , ЗащищенноеСоединение);
	
	Возврат HTTPСоединение;
	
КонецФункции 
 
Функция ЗапросHTTP(Адрес, ПараметрыЗапроса)
	
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки.Вставить("PRIVATE-TOKEN", ПараметрыЗапроса.Токен);
	Запрос.Заголовки.Вставить("content-type","application/json");
	Запрос.АдресРесурса = Адрес;
	
	Возврат Запрос;
	
КонецФункции

Процедура ВыполнитьЗапросHTTP(СоединениеHTTP, Адрес, ПараметрыКоманды, РезультатЗапроса)
	
	//	АдресРесурса = Константы.АдресСервераАПК.Получить() + "/api/v4/projects/[ИдентификаторПроекта]/repository/files/[file_path]";
	//	ИмяПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПК", "Пользователь");
	//	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииАПК", "Пароль");
	//	ПараметрыАутентификации = Новый Структура("Пользователь, Пароль", ИмяПользователя, Пароль);
	//	ПараметрыЗапроса = Новый Структура("StorageVersionNumber, ConfigurationName", НомерВерсииХранилища, ИмяКонфигурации);
	//	ДополнительныеПараметры = Новый Структура();
	//	ДополнительныеПараметры.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	//	ДополнительныеПараметры.Вставить("Аутентификация", ПараметрыАутентификации);
	//	Ответ = КоннекторHTTP.Get(АдресРесурса,, ДополнительныеПараметры);
	//	Результат = КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8);
	//	
	//
	
	Метод = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыКоманды, "HTTPМетод", "GET");
	
	// Блокировка отправки данных в заблокированной базе
	Если Истина
			И БлокировкаРаботыСВнешнимиРесурсамиУКПовтИсп.ЭтоКопияБазы()
			И Не Метод = "GET" Тогда
		РезультатЗапроса.КодСостояния = 204;
		РезультатЗапроса.ТелоОтвета = "Установлена блокировка работы с внешними ресурсами. Отправка данных прервана.";
		Возврат;
	КонецЕсли;
	
	ЗапросHTTP = ЗапросHTTP(Адрес, ПараметрыКоманды);
	Ответ = СоединениеHTTP.ВызватьHTTPМетод(Метод, ЗапросHTTP);
	
	РезультатЗапроса.КодСостояния = Ответ.КодСостояния;
	РезультатЗапроса.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния < 300 Тогда
		РезультатЗапроса.Результат = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
КонецПроцедуры

Процедура СобратьРезультатЗапросаПостранично(СоединениеHTTP, Адрес, ПараметрыКоманды, РезультатЗапроса)
	
	ЛимитСтраниц = ЛимитСтраниц();
	Страница = 0;
	ШаблонПараметраНомерСтраницы = ПараметрыКоманды.ШаблонПараметраНомерСтраницы;
	
	// При постраничном выводе ожидается тип массив
	Результат = Новый Массив;
	РезультатПромежуточногоЗапроса = КонтсрукторРезультатаЗапроса();
	
	Пока Страница < ЛимитСтраниц Цикл
		
		Страница = Страница + 1;
		АдресПромежуточногоЗапроса = СтрЗаменить(Адрес, ШаблонПараметраНомерСтраницы, Формат(Страница, "ЧГ="));
		
		ВыполнитьЗапросHTTP(СоединениеHTTP, АдресПромежуточногоЗапроса, ПараметрыКоманды, РезультатПромежуточногоЗапроса);
		Если РезультатПромежуточногоЗапроса.КодСостояния >= 300 Тогда
			ЗаполнитьЗначенияСвойств(РезультатЗапроса, РезультатПромежуточногоЗапроса);
			Прервать;
		КонецЕсли;
		
		Если Не РезультатПромежуточногоЗапроса.Результат.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, РезультатПромежуточногоЗапроса.Результат, Ложь);
		
	КонецЦикла;
	
	РезультатЗапроса.Результат = Результат;	
	
КонецПроцедуры

Функция ПараметрыURI(ПараметрыЗапроса)
	
	Если Не ПараметрыЗапроса.Количество() Тогда
		Возврат "";
	КонецЕсли;
	
	МассивСтрокПараметров = Новый Массив;
	ШаблонПараметра = "%1=%2";
	Сч = 1;
	
	Для Каждого КлючИЗначение Из ПараметрыЗапроса Цикл
		Если Сч > 1 Тогда
			МассивСтрокПараметров.Добавить("&");
		КонецЕсли;
		МассивСтрокПараметров.Добавить(СтрШаблон(ШаблонПараметра, КлючИЗначение.Ключ, КлючИЗначение.Значение));
		Сч = Сч + 1;
	КонецЦикла;
	
	СтрокаПараметров = СтрСоединить(МассивСтрокПараметров, "");	
	
	Возврат СтрокаПараметров;
	
КонецФункции

Функция ПолучитьТокенСлужебногоПользователя(СерверGit)
	
	Если Не ЗначениеЗаполнено(СерверGit) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Токен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(СерверGit);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Токен;
	
КонецФункции

Процедура ОтформатироватьПараметры(Параметры)
	
	Для Каждого КлючИЗначение Из Параметры Цикл
		// Числа необходимо преобразовать в строку без группировки
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Число") Тогда
			Параметры[КлючИЗначение.Ключ] = Формат(КлючИЗначение.Значение, "ЧГ=");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция URLGitВерсииХранилища(СсылкаНаОбъект)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ИсторияХранилища.Владелец.БазовоеХранилище = ЗНАЧЕНИЕ(Справочник.Хранилища.ПустаяСсылка)
		|			ТОГДА ИсторияХранилища.Владелец.ПроектGit.СсылкаURL
		|		ИНАЧЕ ИсторияХранилища.Владелец.БазовоеХранилище.ПроектGit.СсылкаURL
		|	КОНЕЦ КАК URLGit,
		|	ЕСТЬNULL(ХешиGitВерсийХранилища.Хеш, """") КАК Хеш
		|ИЗ
		|	Справочник.ИсторияХранилища КАК ИсторияХранилища
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ХешиGitВерсийХранилища КАК ХешиGitВерсийХранилища
		|		ПО (ХешиGitВерсийХранилища.ВерсияХранилища = ИсторияХранилища.Ссылка)
		|ГДЕ
		|	ИсторияХранилища.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат "";
	КонецЕсли;
	Возврат СтрШаблон("%1/-/commit/%2", Выборка.URLGit, Выборка.Хеш);
КонецФункции

Функция URLGitВерсииДополнения(СсылкаНаОбъект)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КоммитыДополненийСрезПоследних.Хеш КАК Хеш,
		|	ПроектыGIT.СсылкаURL КАК СсылкаURL
		|ИЗ
		|	РегистрСведений.КоммитыДополнений.СрезПоследних(, ВерсияДополнения = &ВерсияДополнения) КАК КоммитыДополненийСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроектыGIT КАК ПроектыGIT
		|		ПО (ПроектыGIT.Ссылка = &ПроектГитДополнений)";
	Запрос.УстановитьПараметр("ВерсияДополнения", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПроектГитДополнений", Справочники.ПроектыGIT.Дополнения);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат "";
	КонецЕсли;
	Возврат СтрШаблон("%1/-/commit/%2", Выборка.СсылкаURL, Выборка.Хеш);
КонецФункции

Функция URLGitПоХешу(Хранилище, Хеш) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Хранилища.БазовоеХранилище = ЗНАЧЕНИЕ(Справочник.Хранилища.ПустаяСсылка)
		|			ТОГДА Хранилища.ПроектGit.СсылкаURL
		|		ИНАЧЕ Хранилища.БазовоеХранилище.ПроектGit.СсылкаURL
		|	КОНЕЦ КАК URLGit
		|ИЗ
		|	Справочник.Хранилища КАК Хранилища
		|ГДЕ
		|	Хранилища.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Хранилище);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат "";
	КонецЕсли;
	Возврат СтрШаблон("%1/-/commit/%2", Выборка.URLGit, Хеш);
КонецФункции

#КонецОбласти
