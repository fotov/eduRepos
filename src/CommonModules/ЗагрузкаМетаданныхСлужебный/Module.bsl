//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Методы для загрузки описания метаданных конфигурации
//  
//////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗагрузитьМетаданныеОбработчикЗадания() Экспорт
	
	//РегЗадания.ПроверитьРазрешениеЗапускаРегламентныхЗаданий();
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Конфигурации.Ссылка КАК Конфигурация,
		|	Конфигурации.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Конфигурации КАК Конфигурации
		|ГДЕ
		|	Конфигурации.ХранилищеРазработки.ВыгружатьВGit
		|	И НЕ Конфигурации.ПометкаУдаления
		|	И НЕ Конфигурации.ХранилищеРазработки = ЗНАЧЕНИЕ(Справочник.Хранилища.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НаборПараметровПотоков = Новый Соответствие;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборПараметровПотоков.Вставить(
			ВыборкаДетальныеЗаписи.Наименование,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыборкаДетальныеЗаписи.Конфигурация));	
	КонецЦикла;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = "Загрузка метаданных конфигураций";
	ПараметрыВыполнения.КлючФоновогоЗадания = "ЗагрузкаМетеданныхМногопоточно";
	ПараметрыВыполнения.ОжидатьЗавершение = Неопределено;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Результат = ДлительныеОперации.ВыполнитьПроцедуруВНесколькоПотоков(
		"ЗагрузкаМетаданных.ЗагрузитьМетаданные", ПараметрыВыполнения, НаборПараметровПотоков);

	Пока Не Результат.ИдентификаторЗадания = Неопределено И Не ДлительныеОперации.ЗаданиеВыполнено(Результат.ИдентификаторЗадания) Цикл
		ОбновлениеИнформационнойБазыСлужебный.Пауза(30);
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(
		"ЗагрузкаМетаданныхРегламентноеЗадание",
		ВремяНачалаЗамера,
		,
		СтрШаблон("Количество конфигураций: %1", ВыборкаДетальныеЗаписи.Количество()));
	
КонецПроцедуры

Процедура ЗагрузкаИзмененияСвойствОбъектовМетаданныхОбработчикЗадания() Экспорт
	
	//РегЗадания.ПроверитьРазрешениеЗапускаРегламентныхЗаданий();
	ШаблонКлючаФоновогоЗаданияПотоков = "ЗагрузкаИзмененияСвойствОбъектов_%1_%2";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатусОжидаетОбработки", Перечисления.СтатусыОперацийОбработкиОчереди.ОжидаетОбработки);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьПолученияИзмененийОбъектовВерсийХранилищаСрезПоследних.ВерсияХранилища КАК ВерсияХранилища,
		|	ОчередьПолученияИзмененийОбъектовВерсийХранилищаСрезПоследних.ВерсияХранилища.Код КАК КодВерсии,
		|	ОчередьПолученияИзмененийОбъектовВерсийХранилищаСрезПоследних.ВерсияХранилища.Владелец.Наименование КАК НаименованиеХранилища
		|ИЗ
		|	РегистрСведений.ОчередьПолученияИзмененийОбъектовВерсийХранилища.СрезПоследних КАК ОчередьПолученияИзмененийОбъектовВерсийХранилищаСрезПоследних
		|ГДЕ
		|	ОчередьПолученияИзмененийОбъектовВерсийХранилищаСрезПоследних.Статус = &СтатусОжидаетОбработки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НаборПараметровПотоков = Новый Соответствие();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборПараметровПотоков.Вставить(
			СтрШаблон(ШаблонКлючаФоновогоЗаданияПотоков,  ВыборкаДетальныеЗаписи.НаименованиеХранилища, ВыборкаДетальныеЗаписи.КодВерсии),
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыборкаДетальныеЗаписи.ВерсияХранилища));	
	КонецЦикла;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = "Загрузка изменений свойств объектов";
	ПараметрыВыполнения.КлючФоновогоЗадания = "ЗагрузкаИзмененияСвойствОбъектовМногопоточно";
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	// TODO: Отладка
	//ПараметрыВыполнения.ЗапуститьНеВФоне = Истина;
	//ПараметрыВыполнения.ЗапуститьВФоне = Ложь;
	
	Результат = ДлительныеОперации.ВыполнитьПроцедуруВНесколькоПотоков(
		"ЗагрузкаМетаданныхСлужебный.ЗагрузитьИзмененияСвойствОбъектовМетаданныхВерсииХранилища", ПараметрыВыполнения, НаборПараметровПотоков);

	//Пока Не Результат.ИдентификаторЗадания = Неопределено И Не ДлительныеОперации.ЗаданиеВыполнено(Результат.ИдентификаторЗадания) Цикл
	//	ОбновлениеИнформационнойБазыСлужебный.Пауза(30);
	//КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеЛогическойПодсистемыПоУмолчаниюОбработчикЗадания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Конфигурации.ЛогическаяПодсистемаПоУмолчанию КАК ЛогическаяПодсистема,
		|	Конфигурации.ХранилищеРазработки КАК ХранилищеРазработки,
		|	Конфигурации.Ссылка КАК Конфигурация
		|ПОМЕСТИТЬ ЛогическиеПодсистемыКонфигураций
		|ИЗ
		|	Справочник.Конфигурации КАК Конфигурации
		|ГДЕ
		|	НЕ Конфигурации.ЛогическаяПодсистемаПоУмолчанию = ЗНАЧЕНИЕ(Справочник.ЛогическиеПодсистемы.ПустаяСсылка)
		|	И НЕ Конфигурации.ХранилищеРазработки = ЗНАЧЕНИЕ(Справочник.Хранилища.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыМетаданных.Ссылка КАК ОбъектМетаданных,
		|	ЛогическиеПодсистемыКонфигураций.ЛогическаяПодсистема КАК ЛогическаяПодсистема
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставЛогическихПодсистем КАК СоставЛогическихПодсистем
		|		ПО ОбъектыМетаданных.Ссылка = СоставЛогическихПодсистем.ОбъектМетаданных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЛогическиеПодсистемыКонфигураций КАК ЛогическиеПодсистемыКонфигураций
		|		ПО ОбъектыМетаданных.Владелец = ЛогическиеПодсистемыКонфигураций.Конфигурация
		|ГДЕ
		|	ОбъектыМетаданных.Владелец В
		|			(ВЫБРАТЬ
		|				ЛогическиеПодсистемыКонфигураций.Конфигурация КАК Конфигурация
		|			ИЗ
		|				ЛогическиеПодсистемыКонфигураций КАК ЛогическиеПодсистемыКонфигураций)
		|	И СоставЛогическихПодсистем.ОбъектМетаданных ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СоставЛогическихПодсистем.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектМетаданных.Установить(ВыборкаДетальныеЗаписи.ОбъектМетаданных);
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
		НаборЗаписей.Записать(Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправкаОповещенийИзмененияМетаданныхRMQОбработчикЗадания() Экспорт
	
	// TODO: 
	//РегЗадания.ПроверитьРазрешениеЗапускаРегламентныхЗаданий();
	ШаблонУрлМетода = "/metadata_changes";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОперацийОбработкиОчереди.Обработано);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьОповещенийИзмененияМетаданныхRMQСрезПоследних.Конфигурация КАК КонфигурацияСсылка,
		|	ОчередьОповещенийИзмененияМетаданныхRMQСрезПоследних.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных,
		|	ОчередьОповещенийИзмененияМетаданныхRMQСрезПоследних.Конфигурация.Наименование КАК Конфигурация
		|ИЗ
		|	РегистрСведений.ОчередьОповещенийИзмененияМетаданныхRMQ.СрезПоследних КАК ОчередьОповещенийИзмененияМетаданныхRMQСрезПоследних
		|ГДЕ
		|	ОчередьОповещенийИзмененияМетаданныхRMQСрезПоследних.Статус <> &Статус";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	Изменения = РезультатЗапроса.Выгрузить().Скопировать(, "Конфигурация, ИмяОбъектаМетаданных");
	ИзмененияДжсон = КоннекторHTTP.ОбъектВJson(ОбщегоНазначения.ТаблицаЗначенийВМассив(Изменения));
	
	УРЛ = Константы.АдресСервисаRMQ.Получить() + ШаблонУрлМетода;
	ПараметрыАутентификации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("СервисRMQ", "Пользователь,Пароль");
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Аутентификация", ПараметрыАутентификации);
	Ответ = КоннекторHTTP.Post(УРЛ, ИзмененияДжсон, ДополнительныеПараметры);
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Ответ.КодСостояния >= 300 Тогда
		ТекстОшибкиСервиса = КоннекторHTTP.КакТекст(Ответ);
		Ответ.Удалить("Тело");
		ТекстОшибки = СтрШаблон(
			"При выполнении обращения к сервису RabbitMQ возникла ошибка:
			|%1,
			|Данные ответа:
			|%2",
			ТекстОшибкиСервиса,
			КоннекторHTTP.ОбъектВJson(Ответ));
		Пока Выборка.Следующий() Цикл
			Менеджер = РегистрыСведений.ОчередьОповещенийИзмененияМетаданныхRMQ.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Менеджер, Выборка);
			Менеджер.Период = ТекущаяДатаСеанса();
			Менеджер.Конфигурация = Выборка.КонфигурацияСсылка;
			Менеджер.Статус = Перечисления.СтатусыОперацийОбработкиОчереди.Ошибка;
			Менеджер.Комментарий = ТекстОшибки;
			Менеджер.Записать();
		КонецЦикла;
		ЗаписьЖурналаРегистрации(
			"Отправка изменений метаданных",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ОчередьОповещенийИзмененияМетаданныхRMQ,
			,
			ТекстОшибки);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Менеджер = РегистрыСведений.ОчередьОповещенийИзмененияМетаданныхRMQ.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, Выборка);
		Менеджер.Конфигурация = Выборка.КонфигурацияСсылка;
		Менеджер.Период = ТекущаяДатаСеанса();
		Менеджер.Статус = Перечисления.СтатусыОперацийОбработкиОчереди.Обработано;
		Менеджер.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьИзмененияСвойствОбъектовМетаданныхВерсииХранилища(ВерсияХранилища) Экспорт
	
	Изменения = ЗагрузкаМетаданных.ИзмененияМетаданныхОбъектовВерсии(ВерсияХранилища);
	// В случае ошибки получения данных из гитлаб нужно попробовать ещё раз.
	Если Изменения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТипыПолей = Новый Массив();
	ТипыПолей.Добавить("Реквизиты");
	ТипыПолей.Добавить("РеквизитыТабличныхЧастей");
	ТипыПолей.Добавить("Ресурсы");
	ТипыПолей.Добавить("Измерения");
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ОчередьПолученияИзмененийОбъектовВерсийХранилища");
		ЭлементБлокировкиДанных.УстановитьЗначение("ВерсияХранилища", ВерсияХранилища);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Для Каждого КлючИЗначение Из Изменения Цикл
			ИмяОбъектаМетаданных = КлючИЗначение.Ключ;
			Для Каждого ВидСвойстваКлючИЗначение Из КлючИЗначение.Значение Цикл
				ВидСвойства = ВидСвойстваКлючИЗначение.Ключ;
				Если Не ТипыПолей.Найти(ВидСвойстваКлючИЗначение.Ключ) = Неопределено Тогда // Это поля объекта
					// Для полей есть различия в виде изменения: добавлены, изменены, удалены.
					Для Каждого ВидИзмененияКлючИЗначение Из ВидСвойстваКлючИЗначение.Значение Цикл
						ВидИзменения = ВидИзмененияКлючИЗначение.Ключ;
						Если ВидИзменения = "Изменены" Тогда
							Для Каждого ИзменениеКлючИЗначение Из ВидИзмененияКлючИЗначение.Значение Цикл
								Свойство = ИзменениеКлючИЗначение.Ключ;
								ИзмененияСвойствПолей = ИзменениеКлючИЗначение.Значение;
								ИзмененияСвойствПолейМ = Новый Массив;
								Для Каждого ИзменениеСвойстваПоля Из ИзмененияСвойствПолей Цикл
									ИзмененияСвойствПолейМ.Добавить(СтрШаблон("%1:%2", ИзменениеСвойстваПоля.Ключ, ИзменениеСвойстваПоля.Значение));
								КонецЦикла;
								Изменение = СтрСоединить(ИзмененияСвойствПолейМ, ";");
								ЗаписатьИзмененияСвойстОбъектовМетаданных(
									ВерсияХранилища,
									ИмяОбъектаМетаданных,
									Свойство,
									ВидСвойства,
									Изменение,
									ВидИзменения);
							КонецЦикла;
						Иначе // Добавлены, Удалены
							Для Каждого Свойство Из ВидИзмененияКлючИЗначение.Значение Цикл
								Изменение = ?(ВидИзменения = "Добавлены", "+++", "---");;
								ЗаписатьИзмененияСвойстОбъектовМетаданных(
									ВерсияХранилища,
									ИмяОбъектаМетаданных,
									Свойство,
									ВидСвойства,
									Изменение,
									ВидИзменения);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ВидСвойстваКлючИЗначение.Ключ = "Иерархия" Тогда
					// Для Иерархии только изменения свойств
					ВидИзменения = "Изменены";
					Для Каждого ИзменениеКлючИЗначение Из ВидСвойстваКлючИЗначение.Значение Цикл
						Свойство = ИзменениеКлючИЗначение.Ключ;
						Изменение = ИзменениеКлючИЗначение.Значение;
						ЗаписатьИзмененияСвойстОбъектовМетаданных(
							ВерсияХранилища,
							ИмяОбъектаМетаданных,
							Свойство,
							ВидСвойства,
							Изменение,
							ВидИзменения);
					КонецЦикла;
				Иначе // Владельцы, Движения, Предопределенные
					// Здесь только само изменение, без углубления вложенности
					ВидИзменения = "Изменены";
					Свойство = ВидСвойства;
					Изменение = ВидСвойстваКлючИЗначение.Значение;
					ЗаписатьИзмененияСвойстОбъектовМетаданных(
						ВерсияХранилища,
						ИмяОбъектаМетаданных,
						Свойство,
						ВидСвойства,
						Изменение,
						ВидИзменения);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Менеджер = РегистрыСведений.ОчередьПолученияИзмененийОбъектовВерсийХранилища.СоздатьМенеджерЗаписи();
		Менеджер.Период = ТекущаяДатаСеанса();
		Менеджер.ВерсияХранилища = ВерсияХранилища;
		Менеджер.Статус = Перечисления.СтатусыОперацийОбработкиОчереди.Обработано;
		Менеджер.Записать();
		
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			"Получение изменений версий.Получение изменений",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ИзмененияСвойствОбъектовМетаданных,
			ВерсияХранилища,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Попытка
			Менеджер = РегистрыСведений.ОчередьПолученияИзмененийОбъектовВерсийХранилища.СоздатьМенеджерЗаписи();
			Менеджер.Период = ТекущаяДатаСеанса();
			Менеджер.ВерсияХранилища = ВерсияХранилища;
			Менеджер.Статус = Перечисления.СтатусыОперацийОбработкиОчереди.Ошибка;
			Менеджер.Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Менеджер.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				"Получение изменений версий.Запись в очередь",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.ОчередьПолученияИзмененийОбъектовВерсийХранилища,
				ВерсияХранилища,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьИзмененияСвойстОбъектовМетаданных(
										ВерсияХранилища,
										ИмяОбъектаМетаданных,
										Свойство,
										ВидСвойства,
										Изменение,
										ВидИзменения = "Изменено")
	Менеджер = РегистрыСведений.ИзмененияСвойствОбъектовМетаданных.СоздатьМенеджерЗаписи();
	Менеджер.ВерсияХранилища = ВерсияХранилища;
	Менеджер.ИмяОбъектаМетаданных = ИмяОбъектаМетаданных;
	Менеджер.Свойство = Свойство;
	Менеджер.ВидСвойства = ВидСвойства;
	Менеджер.Изменение = Изменение;
	Менеджер.ВидИзменения = ВидИзменения;
	
	Менеджер.Записать();
	
КонецПроцедуры

#КонецОбласти