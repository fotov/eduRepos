//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Интеграция с ИС Метеор (Франч)
//  
//////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Метеор препрода https://dev-meteor.automacon.ru/preprod/
// АПИ преПрода - https://fr.automacon.ru:8443/franchpr/hs/client-api 
Функция НовыйПараметрыВыполнения(ВерсияАПИ = 2) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	// Если копия, то отправлять данные в препрод
	ЭтоКопия = БлокировкаРаботыСВнешнимиРесурсамиУКПовтИсп.ЭтоКопияБазы();
	
	ПараметрыПодключения = Новый Структура;
	Если ВерсияАПИ = 2 Тогда
		ПараметрыПодключения.Вставить("Сервер", "fr.automacon.ru");
		ПараметрыПодключения.Вставить("Порт", 8443);
	Иначе 
		ПараметрыПодключения.Вставить("Сервер", "new.meteor.automacon.ru");
		ПараметрыПодключения.Вставить("Порт", 443);
	КонецЕсли;
	ПараметрыПодключения.Вставить("Пользователь", ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииМетеор", "Пользователь"));
	ПараметрыПодключения.Вставить("Пароль", ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ДанныеАутентификацииМетеор", "Пароль"));
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Заголовки", Заголовки);
	Если ВерсияАПИ = 2 Тогда
		ПараметрыЗапроса.Вставить("ПрефиксАдреса", ?(ЭтоКопия, "/franchpr/hs/client-api/v2/", "/franch/hs/client-api/v2/"));
	Иначе
		ПараметрыЗапроса.Вставить("ПрефиксАдреса", "/op/api/v3/");
		Токен = "73c411443dfc69a0048dbd5f734fe9494e310b4db75fc81debed83a091e6e4c1"; // https://new.meteor.automacon.ru/op/my/access_token
		Заголовки.Вставить("Authorization", "Basic " + ПолучитьСтрокуBase64("apikey:" + Токен));
		ПараметрыПодключения.Пользователь = "";
		ПараметрыПодключения.Пароль = "";
	КонецЕсли;
	ПараметрыЗапроса.Вставить("АдресРесурса", "");
	ПараметрыЗапроса.Вставить("ДанныеТелаЗапроса", Неопределено);
	ПараметрыЗапроса.Вставить("МетодHTTP", "");
	
	Возврат Новый Структура("ПараметрыПодключения, ПараметрыЗапроса", ПараметрыПодключения, ПараметрыЗапроса);
	
КонецФункции

Функция ВыполнитьЗапросAPIМетеор(ПараметрыВыполнения, РазрешеноВКопии = Ложь, ДобавитьПараметрИспользованияУстаревшегоАПИ = Истина) Экспорт
	
	Попытка
		РегистрыСведений.СобытияМетеор.СоздатьЗапись("API", СтроковыеФункцииУККлиентСервер.ЗаписатьЗначениеJSON(ПараметрыВыполнения.ПараметрыЗапроса));
	Исключение
	КонецПопытки;
	
	ЭтоКопияБазы = БлокировкаРаботыСВнешнимиРесурсамиУКПовтИсп.ЭтоКопияБазы() И НЕ РазрешеноВКопии;
	Если ЭтоКопияБазы Тогда
		Сообщить("Заблокирована отправка данных в Метеор из отладочной базы:");
		Если ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса.Свойство("text") Тогда
			Сообщить(ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса.text);
		Иначе
			Сообщить(ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПодключения = ПараметрыВыполнения.ПараметрыПодключения;
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, 
										  ПараметрыПодключения.Порт, 
										  ПараметрыПодключения.Пользователь, 
										  ПараметрыПодключения.Пароль, , , 
										  Новый ЗащищенноеСоединениеOpenSSL);
										  
	ПараметрыЗапроса = ПараметрыВыполнения.ПараметрыЗапроса;
	
	АдресРесурса = ПараметрыЗапроса.ПрефиксАдреса + ПараметрыЗапроса.АдресРесурса;
	Если ДобавитьПараметрИспользованияУстаревшегоАПИ Тогда
		АдресРесурса = АдресРесурса + ?(СтрНайти(АдресРесурса, "?"), "&", "?") + "mode_type=prod_test";// После переезда Метеора нужен параметр, чтобы получать ответы "по-старому"
	КонецЕсли;
	Заголовки    = ПараметрыЗапроса.Заголовки;
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	ТелоЗапроса = "";
	Если ПараметрыЗапроса.ДанныеТелаЗапроса <> Неопределено Тогда
		ТелоЗапроса = СтроковыеФункцииУККлиентСервер.ЗаписатьЗначениеJSON(ПараметрыЗапроса.ДанныеТелаЗапроса);
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли;
	
	Если ПараметрыЗапроса.МетодHTTP = МетодыHTTP().GET Тогда
		Ответ = HTTPСоединение.Получить(Запрос);
	ИначеЕсли ПараметрыЗапроса.МетодHTTP = МетодыHTTP().POST Тогда
		Ответ = HTTPСоединение.ОтправитьДляОбработки(Запрос);
	ИначеЕсли ПараметрыЗапроса.МетодHTTP = МетодыHTTP().PUT Тогда
		Ответ = HTTPСоединение.Записать(Запрос);
	Иначе
		ВызватьИсключение СтрШаблон("Неизвестный метод ""%1"".", ПараметрыЗапроса.МетодHTTP);
	КонецЕсли;	
	
	ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку();
	Попытка
		ШаблонТекстаОшибки =
			"При получении ответа API метеор возникли ошибки.
			|Адрес: %1
			|ТелоЗапроса: %4
			|Код состояния: %2
			|Ответ: %3";
		
		ТекстОтветаСПараметрами = СтрШаблон(
			"{
			|""answer"":
			|%1
			|,
			|""request_parameters"":
			|%2
			|}",
			ОтветСтрокой,
			СтроковыеФункцииУККлиентСервер.ЗаписатьЗначениеJSON(ПараметрыВыполнения.ПараметрыЗапроса));
		
		РегистрыСведений.СобытияМетеор.СоздатьЗапись("API_answer", ТекстОтветаСПараметрами);
	Исключение
	КонецПопытки;

	Результат = Неопределено;
	Если Ответ.КодСостояния = 200 Тогда
		Результат = СтроковыеФункцииУККлиентСервер.ПрочитатьЗначениеJSON(ОтветСтрокой);
		Если Не Результат.Количество()
				Или ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("error") И Результат.error <> Ложь Тогда
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, АдресРесурса, Ответ.КодСостояния, ОтветСтрокой, ТелоЗапроса);
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖР("ВыполнитьЗапросAPIМетеор"),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				ТекстОшибки);
			ВнешниеДанные.ОтправитьСообщеие(
				ТекстОшибки,
				300,
				Истина,
				Мониторинг.ПользователиПоВидуМониторинга(Справочники.ВидыМониторинга.ИнтеграцияСМетеор));
			ВызватьИсключение ТекстОшибки;
		КонецЕсли; 
	Иначе
		Попытка
			ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку();
		Исключение
			ОтветСтрокой = ""
		КонецПопытки;
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, АдресРесурса, Ответ.КодСостояния, ОтветСтрокой);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР("ВыполнитьЗапросAPIМетеор"),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ТекстОшибки);
			
		ВнешниеДанные.ОтправитьСообщеие(
			ТекстОшибки,
			300,
			Истина,
			Мониторинг.ПользователиПоВидуМониторинга(Справочники.ВидыМониторинга.ИнтеграцияСМетеор));
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция МетодыHTTP() Экспорт
	Возврат Новый Структура("GET,POST,PUT", "GET", "POST", "PUT");
КонецФункции

Функция ЕстьОшибкаВОтветеAPIМетеор(РезультатЗапроса) Экспорт
	Возврат РезультатЗапроса.Свойство("error") И (РезультатЗапроса.error = Истина);
КонецФункции

// Функция - Изменения этапов задач метеор за период
//
// Параметры:
//  НачалоПериода	 - ДатаВремя - Период
//  КонецПериода	 - ДатаВремя - Период
//  Доска			 - Строка - ИД доски "000000005" - Вкуссвил
// 
// Возвращаемое значение:
//   - ТаблицаЗначений (Дата, ЗадачаМетеор, ЭтапМетеор, Исполнитель, стрИсполнитель)
//
Функция ИзмененияЭтаповЗадачМетеорЗаПериод(НачалоПериода, КонецПериода, Доска = "000000005") Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("board_id", Доска);
	ПараметрыЗапроса.Вставить("date_start", НачалоПериода);
	ПараметрыЗапроса.Вставить("date_finish", КонецПериода);
	
	ПараметрыВыполнения = НовыйПараметрыВыполнения();
	ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса = "ReposTaskReportsStages";
	ПараметрыВыполнения.ПараметрыЗапроса.МетодHTTP = "POST";
	ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса = ПараметрыЗапроса;
	РезультатЗапроса = ВыполнитьЗапросAPIМетеор(ПараметрыВыполнения, Истина, Ложь);
	
	Таблица = Новый ТаблицаЗначений;
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	Таблица.Колонки.Добавить("task_id", ТипСтрока);
	Таблица.Колонки.Добавить("new_stage_id", ТипСтрока);
	Таблица.Колонки.Добавить("new_user", ТипСтрока);
	Таблица.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Для Каждого Эл Из РезультатЗапроса.data Цикл
		Строка = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Эл);
		Строка.Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(СтрЗаменить(Эл.new_stage_date, "T", " "), ЧастиДаты.ДатаВремя);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЗ.Дата КАК Дата,
		|	ТЗ.task_id КАК ЗадачаМетеорКод,
		|	ТЗ.new_stage_id КАК ЭтапКод,
		|	ТЗ.new_user КАК ИсполнительНаименование
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ.Дата КАК Дата,
		|	ТЗ.ЗадачаМетеорКод КАК ЗадачаМетеорКод,
		|	ЗадачиМетеор.Ссылка КАК ЗадачаМетеор,
		|	ТЗ.ЭтапКод КАК ЭтапКод,
		|	ЭтапыЗадачиМетеор.Ссылка КАК ЭтапМетеор,
		|	Пользователи.Ссылка КАК Исполнитель,
		|	ТЗ.ИсполнительНаименование КАК стрИсполнитель
		|ИЗ
		|	ТЗ КАК ТЗ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиМетеор КАК ЗадачиМетеор
		|		ПО ТЗ.ЗадачаМетеорКод = ЗадачиМетеор.id
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыЗадачиМетеор КАК ЭтапыЗадачиМетеор
		|		ПО ТЗ.ЭтапКод = ЭтапыЗадачиМетеор.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ТЗ.ИсполнительНаименование = Пользователи.Наименование";
	Запрос.УстановитьПараметр("ТЗ", Таблица);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#Область РаботаСМетеор

Функция ПолучитьДоступныеРолиПоЗадачеВМетеоре(НомерЗадачи)

	ДоступныеРоли = Новый Массив;
	
	Данные = Новый Структура;
	Данные.Вставить("task_id", НомерЗадачи); 
	
	ПараметрыВыполнения = ИнтеграцияСМетеор.НовыйПараметрыВыполнения();
	ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса = "TaskRoleAviable";
	ПараметрыВыполнения.ПараметрыЗапроса.МетодHTTP = ИнтеграцияСМетеор.МетодыHTTP().GET;
	ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса = Данные;
	
	РезультатЗапроса = ИнтеграцияСМетеор.ВыполнитьЗапросAPIМетеор(ПараметрыВыполнения, Истина);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат ДоступныеРоли; 
	КонецЕсли;
	
	Ошибка = Ложь;
	ОписаниеОшибки = "";
	Если РезультатЗапроса.Свойство("error", Ошибка) И РезультатЗапроса.Свойство("message", ОписаниеОшибки) И Ошибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("Ошибка получения списка ролей по задаче из метеора: %1", ОписаниеОшибки));
		Возврат ДоступныеРоли;
	КонецЕсли;
	
	Для Каждого ТекЗнач Из РезультатЗапроса.data Цикл
		ДоступныеРоли.Добавить(Новый Структура("ИД,Наименование", ТекЗнач.id, ТекЗнач.role));
	КонецЦикла;
	
	Возврат ДоступныеРоли;
	
КонецФункции

Процедура ОтразитьВремяПоЗадачеВМетеоре(СтруктураПараметров) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("role_id",		СтруктураПараметров.Роль); 
	Данные.Вставить("date",			СтруктураПараметров.Дата);
	Данные.Вставить("time",			СтруктураПараметров.Часы);
	Данные.Вставить("task_id",		СтруктураПараметров.НомерЗадачи); 
	Данные.Вставить("description",	СтруктураПараметров.Описание);
	Данные.Вставить("user_id",		СтруктураПараметров.user_id); 
	Аналитика = Новый Массив;
	Аналитика.Добавить(Новый Структура("value_id, server_id", "000000060", "WorkTypes"));
	Данные.Вставить("analytics",	Аналитика);
	
	ПараметрыВыполнения = ИнтеграцияСМетеор.НовыйПараметрыВыполнения();
	ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса = "TaskSetTime";
	ПараметрыВыполнения.ПараметрыЗапроса.МетодHTTP = ИнтеграцияСМетеор.МетодыHTTP().POST;
	ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса = Данные;
	
	Результат = ИнтеграцияСМетеор.ВыполнитьЗапросAPIМетеор(ПараметрыВыполнения, Ложь);

КонецПроцедуры

Процедура ПеревестиЗадачуНаЭтапВМетеоре(ЗадачаМетеор, Этап) Экспорт
	
	ЖелаемыеЭтапы = Новый Массив;
	Если ТипЗнч(Этап) <> Тип("Массив") Тогда
		ЖелаемыеЭтапы.Добавить(Этап.Код);
	Иначе
		Для Каждого ЭтапЭлемент Из Этап Цикл
			ЖелаемыеЭтапы.Добавить(ЭтапЭлемент.Код);
		КонецЦикла;
	КонецЕсли;
	
	СледующийЭтап = ПолучитьСледующийЭтапЗадачи(ЗадачаМетеор, ЖелаемыеЭтапы);
	
	Если СледующийЭтап = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НомерЗадачи",  ЗадачаМетеор.id);
	СтруктураПараметров.Вставить("ИДЭтапа",      СледующийЭтап.ИДЭтапа);
	СтруктураПараметров.Вставить("ИДИсполнителя",СледующийЭтап.ИДИсполнителя);
	
	УстановитьЭтапЗадачиВМетеоре(СтруктураПараметров);
	
КонецПроцедуры

Функция ПолучитьДанныеЗадачиИзМетеор(ЗадачаМетеор) Экспорт
	
	// +++АК DORS 2023.11.07 Формат ответа API 3 изменился, откатываю все назад
	//Возврат ПолучитьДанныеЗадачиИзМетеорЗапасная(ЗадачаМетеор);
	
	
	Попытка
		
		Сессия = КоннекторHTTP.СоздатьСессию();
		// https://new.meteor.automacon.ru/op/my/access_token
		Токен = РегистрыСведений.ЗначенияНастроекПрограммы.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПрограммы.ApiTokenV3);
		Сессия.Заголовки.Вставить("Authorization", "Basic " + ПолучитьСтрокуBase64("apikey:" + Токен));
		Сессия.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		
		Если ТипЗнч(ЗадачаМетеор) = Тип("СправочникСсылка.ЗадачиМетеор") Тогда
			РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаМетеор, "Код, id, idv3, project_idv3");
		Иначе
			РеквизитыЗадачи = ЗадачаМетеор;
		КонецЕсли;
		КодЗадачи = РеквизитыЗадачи.id;
		Если Не ЗначениеЗаполнено(КодЗадачи) ИЛИ СтрНайти(КодЗадачи, "qq") Тогда
			КодЗадачи = РеквизитыЗадачи.Код;
			Если СтрНайти(КодЗадачи, "^") И СтрНайти(КодЗадачи, "-") Тогда
				Части = СтрРазделить(КодЗадачи, "^-");
				КодЗадачи = СтрШаблон("%1-%2", Части[0], Части[Части.ВГраница()]);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыЗадачи.idv3) Тогда
			Адрес = "https://new.meteor.automacon.ru/op/api/v3/work_packages/" + XMLСтрока(РеквизитыЗадачи.idv3);
		Иначе
			Адрес = "https://new.meteor.automacon.ru/op/api/v3/projects/4/work_packages" +
				"?filters=[%7B%22customField4%22:%7B%22operator%22:%22~%22,%22values%22:[%22" + КодЗадачи + "%22]%7D%7D]";
		КонецЕсли;
		
		РезультатЗапроса = КоннекторHTTP.Get(Адрес, Неопределено, Неопределено, Сессия);
		Если РезультатЗапроса.КодСостояния <> 200 Тогда
			ВызватьИсключение КоннекторHTTP.КакТекст(РезультатЗапроса);
		КонецЕсли;
		Сообщить(КоннекторHTTP.КакТекст(РезультатЗапроса));
		ДанныеМетеор = КоннекторHTTP.КакJson(РезультатЗапроса, Новый Структура("ПрочитатьВСоответствие", Ложь));
		
		Если ДанныеМетеор._embedded.Свойство("elements") Тогда
			Если ДанныеМетеор._embedded.elements.Количество() = 0 Тогда 
				ВызватьИсключение "Задача не найдена "+КодЗадачи;
			ИначеЕсли ДанныеМетеор._embedded.elements.Количество() = 1 Тогда
				ОписаниеЗадачи = ДанныеМетеор._embedded.elements[0];
			Иначе
				ОписаниеЗадачи = Неопределено;
				Для Каждого Эл Из ДанныеМетеор._embedded.elements Цикл
					Если Эл.customField4 = КодЗадачи Тогда
						ОписаниеЗадачи = Эл;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ОписаниеЗадачи = Неопределено Тогда
					ВызватьИсключение "Задача не найдена по критерию "+КодЗадачи;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОписаниеЗадачи = ДанныеМетеор;
		КонецЕсли;
		
		Для Каждого Эл Из ОписаниеЗадачи._links Цикл
			Если Не ОписаниеЗадачи.Свойство(Эл.Ключ) Тогда
				ОписаниеЗадачи.Вставить(Эл.Ключ, Эл.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Результат = Новый Структура;
		Макет = Справочники.ЗадачиМетеор.ПолучитьМакет("НастройкаПолейМетеорV3");
		Для Сч = 2 По Макет.ВысотаТаблицы Цикл
			Ключ = Макет.Область(Сч, 1).Текст;
			АдресДанных = Макет.Область(Сч, 2).Текст;
			Значение = ПолучитьЗначениеРекурсивно(ОписаниеЗадачи, СтрРазделить(АдресДанных, "."));
			Результат.Вставить(Ключ, Значение);
		КонецЦикла;
		
		Результат.Вставить("id", КодЗадачи); // для обратной совместимости
		project = СтрРазделить(ОписаниеЗадачи.project.href, "/");
		Результат.Вставить("project_idv3", project[project.ВГраница()]);
		Результат.Вставить("project_id", ?(Результат.project_idv3 = "4", "qqe", Результат.project_idv3));
		Результат.Вставить("КодЭтапа", Справочники.ЭтапыЗадачиМетеор.НайтиПоНаименованию(Результат.НаименованиеЭтапа).Код);
		Результат.ВидЗадачи = ?(Результат.ВидЗадачи = "Задача", Перечисления.ВидыЗадачМетеор.Задание, Перечисления.ВидыЗадачМетеор.Инцидент);
		
		Результат.Вставить("РазделРазработкиПредставление", "");
		Результат.Вставить("ЧтоСделано", "");
		Результат.Вставить("ДокументацияПредставлениеHTML", "" + Результат.ДокументацияПредставлениеHTML66 + Символы.ПС + Результат.ДокументацияПредставлениеHTML67);
		Результат.Вставить("ТестированиеТребуется", Ложь);
		Результат.Вставить("Метки", Новый Массив);
		Для Каждого Эл Из Результат.МеткиJSON Цикл
			Результат.Метки.Добавить(Новый Структура("Наименование, Код, Комментарий", ПолеJSON(Эл.title, "name"), ПолеJSON(Эл.title, "id"), ""));
		КонецЦикла;
		
		Результат.Вставить("ОбщаяИнформация", Новый Соответствие);
		Результат.ОбщаяИнформация["Проект ГитЛаб"] = "";
		Результат.ОбщаяИнформация["Микросервис"] = Результат.Микросервис;
		Результат.ОбщаяИнформация["Команда администратора"] = Результат.КомандаАдминистратора;
		Результат.ОбщаяИнформация["Продакт-менеджер"] = Результат.ПродактМенеджер;
		Результат.ОбщаяИнформация["Программист"] = Результат.Программист;
		Результат.ОбщаяИнформация["Контрагент"] = Результат.Контрагент;
		Результат.ОбщаяИнформация["Проект"] = Результат.Проект;
		Результат.ОбщаяИнформация["Приоритет"] = Результат.Приоритет;
		Результат.ОбщаяИнформация["Акцептант"] = Результат.Акцептант;
		Тексты = Новый ТекстовыйДокумент;
		Тексты.ДобавитьСтроку(ПредставлениеКлючЗначение("Акцептант", Результат.Акцептант));
		Тексты.ДобавитьСтроку(ПредставлениеКлючЗначение("Приоритет", Результат.Приоритет));
		Тексты.ДобавитьСтроку(ПредставлениеКлючЗначение("Проект", Результат.Проект));
		Тексты.ДобавитьСтроку(ПредставлениеКлючЗначение("Программист", Результат.Программист));
		Тексты.ДобавитьСтроку(ПредставлениеКлючЗначение("Продакт-менеджер", Результат.ПродактМенеджер));
		Тексты.ДобавитьСтроку(ПредставлениеКлючЗначение("Команда администратора", Результат.КомандаАдминистратора));
		Тексты.ДобавитьСтроку(ПредставлениеКлючЗначение("Дата спринта", Результат.ДатаCпринта));
		Тексты.ДобавитьСтроку(ПредставлениеКлючЗначение("Микросервис", Результат.Микросервис));
		Результат.Вставить("ОбщаяИнформацияПредставление", Тексты.ПолучитьТекст());
		
		Результат.Вставить("РеквизитыТехПроекта", Новый Структура("Konfiguratsiya_id, Podsistema_id, SubsystemManager_id, tech_project"));
		ЗаполнитьЗначенияСвойств(Результат.РеквизитыТехПроекта, Результат);
		Тексты = Новый ТекстовыйДокумент;
		Тексты.ДобавитьСтроку(ПредставлениеКлючЗначение("Стек", Результат.Стек));
		Тексты.ДобавитьСтроку(ПредставлениеКлючЗначение("Конфигурация", Результат.Konfiguratsiya_id));
		Тексты.ДобавитьСтроку(ПредставлениеКлючЗначение("Подсистема", Результат.Podsistema_id));
		Тексты.ДобавитьСтроку(ПредставлениеКлючЗначение("Ответственный за подсистему", Результат.SubsystemManager_id));
		Тексты.ДобавитьСтроку(ПредставлениеКлючЗначение("Продакт-менеджер", Результат.ПродактМенеджер));
		Тексты.ДобавитьСтроку(ПредставлениеКлючЗначение("Описание планируемых работ", Результат.tech_project));
		Результат.Вставить("Техпроект", Тексты.ПолучитьТекст());
		
		Возврат Результат;
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР("ПолучитьДанныеЗадачиМетеор"),
			УровеньЖурналаРегистрации.Предупреждение,
			ЗадачаМетеор.Метаданные(),
			ЗадачаМетеор,
			ОписаниеОшибки());
			
		Возврат ПолучитьДанныеЗадачиИзМетеорЗапасная(ЗадачаМетеор);
		
	КонецПопытки;
	
КонецФункции

Функция ПолеJSON(Текст, Свойство)
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат ""
	КонецЕсли;
	Структура = РаботаСДополнениямиИнтеграцияКлиентСервер.ПрочитатьЗначениеJSON(Текст);
	Если Структура = "" Тогда
		Возврат ""
	ИначеЕсли Структура.Свойство(Свойство) Тогда
		Возврат Структура[Свойство];
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПредставлениеКлючЗначение(Ключ, Значение, ПропуститьПустое = Ложь)
	Если ЗначениеЗаполнено(Значение) ИЛИ ПропуститьПустое = Ложь Тогда
		Возврат СтрШаблон("<b>%1:</b> %2<br>", Ключ, Значение);
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПолучитьЗначениеРекурсивно(Источник, АдресДанных) Экспорт
	Значение = Источник;
	Пока АдресДанных.Количество() Цикл
		Свойство = АдресДанных[0];
		АдресДанных.Удалить(0);
		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			Если Значение.Свойство(Свойство) Тогда
				Значение = Значение[Свойство];
			Иначе
				Возврат "";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
			Значение = ПолеJSON(Значение, Свойство);
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЦикла;
	Возврат Значение;
КонецФункции

Функция ПолучитьДанныеЗадачиИзМетеорЗапасная(ЗадачаМетеор)
	
	Результат = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ЗадачаМетеор.Код) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеПоКоду = ПолучитьДанныеЗадачиМетеорПоНомеру(ЗадачаМетеор.Код);
	Если ДанныеПоКоду = Неопределено Тогда
		КодЗадачи = ЗадачаМетеор.Код;
		Если СтрНайти(КодЗадачи, "^") И СтрНайти(КодЗадачи, "-") Тогда
			Части = СтрРазделить(КодЗадачи, "^-");
			КодЗадачи = СтрШаблон("%1-%2", Части[0], Части[Части.ВГраница()]);
		КонецЕсли;
		ДанныеПоКоду = ПолучитьДанныеЗадачиМетеорПоНомеру(КодЗадачи);
		Если ДанныеПоКоду = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПоИД = ПолучитьДанныеЗадачиМетеорПоИд(ДанныеПоКоду.id);
	Если ДанныеПоИД = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДанныеПоКоду, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДанныеПоИД, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеЗадачМетеор(Знач ЗадачиМетеор) Экспорт
	
	РезультатВСлучаеОшибки = Неопределено;
	
	Если ТипЗнч(ЗадачиМетеор) = Тип("СправочникСсылка.ЗадачиМетеор") Тогда
		ЗадачиМетеор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗадачиМетеор);
	КонецЕсли;
	Если Не ТипЗнч(ЗадачиМетеор) = Тип("Массив") Тогда
		Возврат РезультатВСлучаеОшибки;
	КонецЕсли;
	
	ЗадачиМетеорСРеквизитами = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗадачиМетеор, "id");
	Коды = Новый Массив;
	Для Каждого КлючИЗначение Из ЗадачиМетеорСРеквизитами Цикл
		Коды.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	Данные = Новый Структура;
	Данные.Вставить("tasks_id", Коды); 
	
	ПараметрыВыполнения = ИнтеграцияСМетеор.НовыйПараметрыВыполнения();
	ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса = "ReposTaskDescription";
	ПараметрыВыполнения.ПараметрыЗапроса.МетодHTTP = ИнтеграцияСМетеор.МетодыHTTP().GET;
	ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса = Данные;
	
	Попытка
		РезультатЗапроса = ИнтеграцияСМетеор.ВыполнитьЗапросAPIМетеор(ПараметрыВыполнения, Истина, Ложь);
		Если РезультатЗапроса = Неопределено ИЛИ ИнтеграцияСМетеор.ЕстьОшибкаВОтветеAPIМетеор(РезультатЗапроса) Тогда
			Возврат РезультатВСлучаеОшибки;
		КонецЕсли;
		
		// Образец ответа
		//{
		//    "error": false,
		//    "message": {
		//        "text": "Ок"
		//    },
		//    "data": [
		//        {
		//            "Programmer": "Саврунов Андрей",
		//            "admin_id": "ГолосокУА",
		//            "Programmer_id": "СавруновАИ",
		//            "admin": "Голосок Ульяна",
		//            "task_id": "ВВ-620"
		//        },
		//        {
		//            "Programmer": "",
		//            "admin_id": "БелянинЕА",
		//            "Programmer_id": "",
		//            "admin": "Белянин Евгений",
		//            "task_id": "ВВ-621"
		//        }
		//    ]
		//}	
		
		ДанныеРезультата = РезультатЗапроса.data;
		Для Каждого КлючИЗначение Из ЗадачиМетеорСРеквизитами Цикл
			ЗначениеУстановлено = Ложь;
			Для Каждого ЭлементРезультата Из ДанныеРезультата Цикл
				Если ЭлементРезультата.task_id = КлючИЗначение.Значение Тогда
					ЗадачиМетеорСРеквизитами.Вставить(КлючИЗначение.Ключ, ЭлементРезультата);
					ЗначениеУстановлено = Истина;
				КонецЕсли;
			КонецЦикла;
			Если Не ЗначениеУстановлено Тогда
				ЗадачиМетеорСРеквизитами.Вставить(КлючИЗначение.Ключ, Новый Структура());
			КонецЕсли;
		КонецЦикла;
	Исключение
		ТекстОшибки = СтрШаблон(
			"При получении ответа API метеор возникли ошибки.
			|Номера задач: %1
			|Ошибки:
			|%2",
			СтрСоединить(Коды, ", "),
			ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР("ПолучитьДанныеЗадачиМетеор"),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки; 
	
	Возврат ЗадачиМетеорСРеквизитами;
	
КонецФункции

Функция ПолучитьДанныеЗадачМетеорПоИД(Знач ИДЗадачМетеор) Экспорт
	
	РезультатВСлучаеОшибки = Неопределено;
	ЗадачиМетеорСРеквизитами = Новый Соответствие();
	Если Не ТипЗнч(ИДЗадачМетеор) = Тип("Массив") Тогда
		ИДЗадачМетеор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИДЗадачМетеор);
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("task_id", ИДЗадачМетеор); 
	
	ПараметрыВыполнения = ИнтеграцияСМетеор.НовыйПараметрыВыполнения();
	ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса = "ReposTaskDescription";
	ПараметрыВыполнения.ПараметрыЗапроса.МетодHTTP = ИнтеграцияСМетеор.МетодыHTTP().GET;
	ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса = Данные;
	
	Попытка
		РезультатЗапроса = ИнтеграцияСМетеор.ВыполнитьЗапросAPIМетеор(ПараметрыВыполнения, Истина, Ложь);
		Если РезультатЗапроса = Неопределено ИЛИ ИнтеграцияСМетеор.ЕстьОшибкаВОтветеAPIМетеор(РезультатЗапроса) Тогда
			Возврат РезультатВСлучаеОшибки;
		КонецЕсли;
		
		// Образец ответа
		//{
		//    "error": false,
		//    "message": {
		//        "text": "Ок"
		//    },
		//    "data": [
		//        {
		//            "Programmer": "Саврунов Андрей",
		//            "admin_id": "ГолосокУА",
		//            "Programmer_id": "СавруновАИ",
		//            "admin": "Голосок Ульяна",
		//            "task_id": "ВВ-620"
		//        },
		//        {
		//            "Programmer": "",
		//            "admin_id": "БелянинЕА",
		//            "Programmer_id": "",
		//            "admin": "Белянин Евгений",
		//            "task_id": "ВВ-621"
		//        }
		//    ]
		//}	
		
		ДанныеРезультата = РезультатЗапроса.data;
		Для Каждого ИдЗадачи Из ИДЗадачМетеор Цикл
			ЗначенияРеквизитовЗадачи = Новый Структура;
			Для Каждого ЭлементРезультата Из ДанныеРезультата Цикл
				Если ЭлементРезультата.task_id = ИдЗадачи Тогда
					ЗначенияРеквизитовЗадачи = ЭлементРезультата;
				КонецЕсли;
			КонецЦикла;
			ЗадачиМетеорСРеквизитами.Вставить(ИдЗадачи, ЗначенияРеквизитовЗадачи);
		КонецЦикла;
	Исключение
		ТекстОшибки = СтрШаблон(
			"При получении ответа API метеор возникли ошибки.
			|Номера задач: %1
			|Ошибки:
			|%2",
			СтрСоединить(ИДЗадачМетеор, ", "),
			ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР("ПолучитьДанныеЗадачиМетеор"),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки; 
	
	Возврат ЗадачиМетеорСРеквизитами;
	
КонецФункции

Функция ПроверитьТекущийЭтапЗадачиВМетеоре(ЗадачаМетеор, ЭтапЗадачи) Экспорт

	СвежиеДанныеЗадачи = ПолучитьДанныеЗадачиИзМетеор(ЗадачаМетеор);
	
	Возврат ((СвежиеДанныеЗадачи <> Неопределено) И (СвежиеДанныеЗадачи.КодЭтапа = ЭтапЗадачи.Код));
	
КонецФункции 

Функция ПолучитьЧасыПоЗадачеМетеор(ЗадачаМетеор) Экспорт
	
	Результат = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ЗадачаМетеор.Код) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("task_id", ЗадачаМетеор.Код); 
	
	ПараметрыВыполнения = ИнтеграцияСМетеор.НовыйПараметрыВыполнения();
	ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса = "TaskAllTimeFast";
	ПараметрыВыполнения.ПараметрыЗапроса.МетодHTTP = ИнтеграцияСМетеор.МетодыHTTP().GET;
	ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса = Данные;
	
	Результат = ИнтеграцияСМетеор.ВыполнитьЗапросAPIМетеор(ПараметрыВыполнения, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьФорматированныйКомментарийВМетеор(ЗадачаМетеор, Комментарий) Экспорт
	
	Если НЕ (ЗначениеЗаполнено(ЗадачаМетеор.Код) И ЗначениеЗаполнено(Комментарий)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("task_id", ЗадачаМетеор.Код); 
	Данные.Вставить("text", Комментарий); 
	Данные.Вставить("date", ТекущаяДатаСеанса());
	
	ПараметрыВыполнения = ИнтеграцияСМетеор.НовыйПараметрыВыполнения();
	ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса = "SendMessage";
	ПараметрыВыполнения.ПараметрыЗапроса.МетодHTTP = ИнтеграцияСМетеор.МетодыHTTP().POST;
	ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса = Данные;
	
	Возврат ИнтеграцияСМетеор.ВыполнитьЗапросAPIМетеор(ПараметрыВыполнения, Ложь);
	
КонецФункции

// Отправляет данные для описания задачи подключения расширения
//
// Параметры:
//  НомерЗадачи		 - Строка
//  ТипРасширения	 - Строка
//  ИмяРасширения	 - Строка
//  ВерсияРасширения - Строка
//  Описание		 - Строка
//  Базы			 - Массив
// 
// Возвращаемое значение:
//  Строка
//
// Изменение данных "Подключаемое расширение"
// ReposTaskEdit
// параметр mode_type=prod_test - не надо указывать
//
//{
//"task_id" // Идентификатор задания
//"extension_type" // Тип расширения (строка) - один из вариантов («Исправление ошибки», «Доработка», «Тестирование функционала на проде»)
//"extension_name" // Наименование расширения (строка)
//"extension_version" // Версия расширения (строка) - идентификатор версии расширения (пример 1.0.1.1)
//"extension_description" // Описание (строка) - любое дополнительное описание расширения
//"databases" // Информационные базы для подключения расширения (строка) - Список баз в формате вида [ИмяБазы1, ИмяБазы2 ...]
//}
Функция ОтправитьОписаниеЗадачиПодключенияРасширения(НомерЗадачи, ТипРасширения, ИмяРасширения, ВерсияРасширения, Описание, Базы) Экспорт

	Данные = Новый Структура;
	Данные.Вставить("task_id", НомерЗадачи); 
	Данные.Вставить("extension_type", ТипРасширения); 
	Данные.Вставить("extension_name", ИмяРасширения); 
	Данные.Вставить("extension_version", ВерсияРасширения); 
	Данные.Вставить("extension_description", Описание); 
	Данные.Вставить("databases", Базы); 
	
	ПараметрыВыполнения = ИнтеграцияСМетеор.НовыйПараметрыВыполнения();
	ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса = "ReposTaskEdit";
	ПараметрыВыполнения.ПараметрыЗапроса.МетодHTTP = ИнтеграцияСМетеор.МетодыHTTP().POST;
	ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса = Данные;
	
	РезультатЗапроса = ИнтеграцияСМетеор.ВыполнитьЗапросAPIМетеор(ПараметрыВыполнения, Истина, Ложь);
	
	Ошибка = Ложь;
	ОписаниеОшибки = "";
	Если РезультатЗапроса.Свойство("error", Ошибка) И РезультатЗапроса.Свойство("message", ОписаниеОшибки) И Ошибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("Ошибка получения списка ролей по задаче из метеора: %1", ОписаниеОшибки));
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ЭтоСтек1С(ЗадачаМетеор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачиМетеорВерсийХранилища.ВерсияХранилища КАК ВерсияХранилища
		|ИЗ
		|	РегистрСведений.ЗадачиМетеорВерсийХранилища КАК ЗадачиМетеорВерсийХранилища
		|ГДЕ
		|	ЗадачиМетеорВерсийХранилища.ЗадачаМетеор = &ЗадачаМетеор";
	Запрос.УстановитьПараметр("ЗадачаМетеор", ЗадачаМетеор);
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеЗадачи = ПолучитьДанныеЗадачиИзМетеор(ЗадачаМетеор);
	Если ДанныеЗадачи.Свойство("Стек") Тогда
		Возврат ДанныеЗадачи.Стек = "1С";
	Иначе
		Возврат ЭтоСтек1СВерсия2(ЗадачаМетеор.id);
	КонецЕсли;
	
КонецФункции

Функция ЭтоСтек1СВерсия2(ИдЗадачи)
	Результат = Истина;
	Попытка
		Данные = Новый Структура;
		Данные.Вставить("task_id", ИдЗадачи); 
		ПараметрыВыполнения = ИнтеграцияСМетеор.НовыйПараметрыВыполнения();
		ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса = "TaskDescription";
		ПараметрыВыполнения.ПараметрыЗапроса.МетодHTTP = "GET";
		ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса = Данные;
		РезультатЗапроса = ИнтеграцияСМетеор.ВыполнитьЗапросAPIМетеор(ПараметрыВыполнения, Истина);
		
		Значение = "";
		ИнтеграцияСМетеор.НайтиЗначениеРекурсивноПоКлючу(РезультатЗапроса, "stack_id", Значение);
		Результат = Значение = "1С";
	Исключение
		ЗаписьЖурналаРегистрации(
			"Получение этапа задачи Метеор",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ИсторияЭтаповЗадачиМетеор,
			ИдЗадачи,
			СтрШаблон("Ошибка при получении данных задачи %1: %2", ИдЗадачи, ОписаниеОшибки()));
	КонецПопытки;
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСледующийЭтапЗадачи(ЗадачаМетеор, ЖелаемыеЭтапы)
	
	ДоступныеЭтапы = ПолучитьДоступныеЭтапыЗадачиВМетеоре(ЗадачаМетеор);
	
	Для Каждого ИДЭтапа Из ЖелаемыеЭтапы Цикл
		
		НашлиЭтап = ДоступныеЭтапы.Найти(ИДЭтапа, "ИДЭтапа");
		Если НашлиЭтап <> Неопределено Тогда
			СтруктураЭтапа = Новый Структура("ИДЭтапа,ИмяЭтапа,ИДИсполнителя", НашлиЭтап.ИДЭтапа, НашлиЭтап.ИмяЭтапа, НашлиЭтап.ИДИсполнителя);
			// TODO доработать Метеор, чтобы он принимал ролевую адрессацию
			// Хардкод по коду этапа. Сейчас нет соответствующей механики в Метеор
			//Если ИДЭтапа = "000000284" Тогда
			//	СтруктураЭтапа.Вставить("ИДИсполнителя", "БоброваЕЕ");
			//КонецЕсли;
			Возврат СтруктураЭтапа;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДоступныеЭтапыЗадачиВМетеоре(ЗадачаМетеор)
	
	ДоступныеЭтапы = Новый ТаблицаЗначений;
	ДоступныеЭтапы.Колонки.Добавить("ИДЭтапа");
	ДоступныеЭтапы.Колонки.Добавить("ИмяЭтапа");
	ДоступныеЭтапы.Колонки.Добавить("ИДИсполнителя");
	
	Данные = Новый Структура;
	Данные.Вставить("task_id", ЗадачаМетеор.id); 
	
	ПараметрыВыполнения = НовыйПараметрыВыполнения();
	ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса = "TaskStageAviable";
	ПараметрыВыполнения.ПараметрыЗапроса.МетодHTTP = МетодыHTTP().GET;
	ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса = Данные;
	
	РезультатЗапроса = ВыполнитьЗапросAPIМетеор(ПараметрыВыполнения, Истина);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат ДоступныеЭтапы; 
	КонецЕсли;
	
	Ошибка = Ложь;
	ОписаниеОшибки = "";
	Если РезультатЗапроса.Свойство("error", Ошибка) И РезультатЗапроса.Свойство("message", ОписаниеОшибки) И Ошибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("Ошибка получения доступных этапов по задаче из метеора: %1", ОписаниеОшибки));
		Возврат ДоступныеЭтапы;
	КонецЕсли;
	
	Для Каждого ТекЗнач Из РезультатЗапроса.data Цикл
		НовСтр = ДоступныеЭтапы.Добавить();
		НовСтр.ИДЭтапа = ТекЗнач.id;
		НовСтр.ИмяЭтапа = ТекЗнач.stage_name;
		НовСтр.ИДИсполнителя = ТекЗнач.main_executor_id;
	КонецЦикла;
	
	Возврат ДоступныеЭтапы;
	
КонецФункции

Процедура УстановитьЭтапЗадачиВМетеоре(СтруктураПараметров)
	
	Данные = Новый Структура;
	Данные.Вставить("task_id",     СтруктураПараметров.НомерЗадачи);
	Данные.Вставить("stage_id",    СтруктураПараметров.ИДЭтапа);
	Данные.Вставить("progress_id", "");
	Данные.Вставить("executor_id", СтруктураПараметров.ИДИсполнителя);
	Данные.Вставить("comment",     "");
	Данные.Вставить("date",        ТекущаяДатаСеанса()); 
	
	ПараметрыВыполнения = НовыйПараметрыВыполнения();
	ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса = "TaskNextStage";
	ПараметрыВыполнения.ПараметрыЗапроса.МетодHTTP = МетодыHTTP().PUT;
	ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса = Данные;
	
	Результат = ВыполнитьЗапросAPIМетеор(ПараметрыВыполнения, Ложь);

КонецПроцедуры	

Функция ПолучитьДанныеЗадачиМетеорПоИд(ИДЗадачи)
	
	РезультатВСлучаеОшибки = Неопределено;
	
	Данные = Новый Структура;
	Данные.Вставить("task_id", ИДЗадачи); 
	
	ПараметрыВыполнения = НовыйПараметрыВыполнения();
	ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса = "TaskDescription";
	//ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса = "TaskDescription?mode_type=prod_test";// После переезда Метеора нужен параметр, чтобы получать ответы "по-старому"
	ПараметрыВыполнения.ПараметрыЗапроса.МетодHTTP = МетодыHTTP().GET;
	ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса = Данные;
	
	РезультатЗапроса = ВыполнитьЗапросAPIМетеор(ПараметрыВыполнения, Истина);
	
	Если РезультатЗапроса = Неопределено ИЛИ ЕстьОшибкаВОтветеAPIМетеор(РезультатЗапроса) Тогда
		Возврат РезультатВСлучаеОшибки;
	КонецЕсли;
	
	Результат = Новый Структура;
	// Шапка
	Результат.Вставить("НаименованиеЗадачи");
	Результат.Вставить("Администратор", "");
	Результат.Вставить("Заказчик", "");
	Результат.Вставить("КодЭтапа");
	Результат.Вставить("НаименованиеЭтапа");
	Результат.Вставить("ВидЗадачи");
	Результат.Вставить("Проект");
	Результат.Вставить("Метки", Новый Массив);
	// Разделы
	Результат.Вставить("ОбщаяИнформация", Новый Соответствие);
	Результат.Вставить("ОбщаяИнформацияПредставление", "");
	Результат.Вставить("ПервичноеОбращениеПредставление", "");
	Результат.Вставить("РазделРазработкиПредставление", ""); 
	Результат.Вставить("ЧтоСделать");
	Результат.Вставить("Техпроект");
	Результат.Вставить("РеквизитыТехПроекта", Новый Структура);
	Результат.Вставить("ТестированиеТребуется");
	Результат.Вставить("ТестированиеПричина");
	Результат.Вставить("ТестированиеСтрокаПодключения");
	Результат.Вставить("ТестированиеВерсияПлатформы");
	Результат.Вставить("ТестированиеВерсияТиповогоРелиза");
	Результат.Вставить("ТестированиеСписокРолейИлиГрупп");
	Результат.Вставить("ТестированиеПользовательПароль");
	Результат.Вставить("ТестированиеОсобыеТребования");
	Результат.Вставить("ТестированиеОписание");
	Результат.Вставить("ЧтоСделано");
	Результат.Вставить("ДокументацияПредставлениеHTML");
	
	Попытка
		
		#Область ШапкаЗадачи_top
		ШапкаЗадачи = РезультатЗапроса.data[0].top[0];
		
		Результат.НаименованиеЗадачи = ШапкаЗадачи.name;
		Результат.КодЭтапа = ШапкаЗадачи.stage_id;
		Результат.НаименованиеЭтапа = ШапкаЗадачи.stage;
		Результат.Заказчик = СтрШаблон("%1, %2", ШапкаЗадачи.contact, ШапкаЗадачи.contact_unit);
		Результат.Администратор = ШапкаЗадачи.admin;
		
		Для Каждого Метка Из ШапкаЗадачи.mark Цикл
			Результат.Метки.Добавить(Новый Структура("Код,Наименование,Комментарий", Метка.mark_id, Метка.mark_name, Метка.mark_comment));
		КонецЦикла;
		#КонецОбласти
		
		#Область РазделыЗадачи_bottom
		Для Каждого Группа Из РезультатЗапроса.data[0].bottom Цикл
			
			Если Группа.groupe_name = "Общая информация" Тогда
				КодТипаЗадания = ЗначениеСвойстваВложенногоМассива(Группа.property, "type_id",, "value_id");
				Если КодТипаЗадания = "000000003" Тогда
					ВидЗадачи = Перечисления.ВидыЗадачМетеор.Инцидент; // Инциденты
				ИначеЕсли КодТипаЗадания = "000000001" Тогда
					ВидЗадачи = Перечисления.ВидыЗадачМетеор.Задание; // Работа по ТЗ (РаботаПоТЗ)
				Иначе
					ВидЗадачи = Перечисления.ВидыЗадачМетеор.ПустаяСсылка();
				КонецЕсли; 
				Результат.ВидЗадачи = ВидЗадачи;
				
				Результат.Проект = ЗначениеСвойстваВложенногоМассива(Группа.property, "projecttask_id");
				Результат.ОбщаяИнформация = ПолучитьСвойстваГруппы(Группа.property);
				Результат.ОбщаяИнформацияПредставление = ПолучитьПредставлениеГруппы(Группа.property);
			КонецЕсли;
			
			Если Группа.groupe_name = "Первичное обращение" Тогда
				Результат.ПервичноеОбращениеПредставление = ПолучитьПредставлениеГруппы(Группа.property);
			КонецЕсли;
						
			Если Группа.groupe_name = "Раздел разработки" Тогда
				Результат.РазделРазработкиПредставление = ПолучитьПредставлениеГруппы(Группа.property);
			КонецЕсли;
			
			Если Группа.groupe_name = "Описание необходимой функциональности (Что сделать)" Тогда
				Результат.ЧтоСделать = ЗначениеСвойстваВложенногоМассива(Группа.property, "what_to_do");
			КонецЕсли;
			
			Если Группа.groupe_name = "Тех. проект" Тогда
				Результат.Техпроект = ПолучитьПредставлениеГруппы(Группа.property);
				
				Для Каждого Свойство Из Группа.property Цикл
					Результат.РеквизитыТехПроекта.Вставить(Свойство.id, Свойство.value);
				КонецЦикла;
			КонецЕсли;
			
			Если Группа.groupe_name = "Тестирование" Тогда
				ТестированиеТребуется = ЗначениеСвойстваВложенногоМассива(Группа.property, "TestirovanieTrebuetsya_id");
				Результат.ТестированиеТребуется = ТипЗнч(ТестированиеТребуется) = Тип("Строка")
												И (НРег(ТестированиеТребуется) = "да"
													Или НРег(ТестированиеТребуется) = "истина"
													Или НРег(ТестированиеТребуется) = "true");

				Результат.ТестированиеПричина = ЗначениеСвойстваВложенногоМассива(Группа.property, "Prichina_id");
				Результат.ТестированиеСтрокаПодключения = ЗначениеСвойстваВложенногоМассива(Группа.property, "ServerIBaza_id");
				Результат.ТестированиеВерсияПлатформы = ЗначениеСвойстваВложенногоМассива(Группа.property, "VersiyaPlatformy_id");
				Результат.ТестированиеВерсияТиповогоРелиза = ЗначениеСвойстваВложенногоМассива(Группа.property, "VersiyaTipovogoReliza_id");
				Результат.ТестированиеСписокРолейИлиГрупп = ЗначениеСвойстваВложенногоМассива(Группа.property, "SpisokRoleyIliGrupp_id");
				Результат.ТестированиеПользовательПароль = ЗначениеСвойстваВложенногоМассива(Группа.property, "PolzovatelIParol_id");
				Результат.ТестированиеОсобыеТребования = ЗначениеСвойстваВложенногоМассива(Группа.property, "OsobyeTrebovaniya_id");
				Результат.ТестированиеОписание = ЗначениеСвойстваВложенногоМассива(Группа.property, "Testirovanie_id");
			КонецЕсли;
			
			Если Группа.groupe_name = "Что сделано" Тогда
				Результат.ЧтоСделано = ЗначениеСвойстваВложенногоМассива(Группа.property, "instruction");
			КонецЕсли;
			
			Если Группа.groupe_name = "Документация" Тогда
				Результат.ДокументацияПредставлениеHTML = ЗначениеСвойстваВложенногоМассива(Группа.property, "Dokumentatsiya_id");
			КонецЕсли;
			
		КонецЦикла;
		#КонецОбласти
		
	Исключение
		ТекстОшибки = СтрШаблон(
			"При получении ответа API метеор возникли ошибки.
			|ИД задачи: %1
			|Ошибки:
			|%2",
			ИДЗадачи,
			ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР("ПолучитьДанныеЗадачиМетеорПоИд"),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ТекстОшибки);
		Возврат РезультатВСлучаеОшибки;
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции

Функция ЗначенияСвойствВложенногоМассива(МассивИсточник, Знач Свойства, КлючКлюча = "id", КлючЗначения = "value")
	
	Результат = Новый Структура;
	
	Если Не ТипЗнч(Свойства) = Тип("Строка") Тогда
		ВызватьИсключение "Неверный параметр ""Свойства"" функции ЗначенияСвойствВложенногоМассива";
	КонецЕсли;
	
	Если ПустаяСтрока(Свойства) Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Свойства = СтрРазделить(Свойства, ",", Ложь);
	Для Индекс = 0 По Свойства.ВГраница() Цикл
		Свойства[Индекс] = СокрЛП(Свойства[Индекс]);
		Результат.Вставить(Свойства[Индекс]);
	КонецЦикла;
	
	
	Для Каждого СтруктураЗначения Из МассивИсточник Цикл
		Если Не ТипЗнч(СтруктураЗначения) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		Ключ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗначения, КлючКлюча, "");
		Если ПустаяСтрока(Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат.Свойство(Ключ) Тогда
			Результат.Вставить(Ключ, ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗначения, КлючЗначения));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСвойстваВложенногоМассива(МассивИсточник, Знач Свойство, КлючКлюча = "id", КлючЗначения = "value")
	Возврат ЗначенияСвойствВложенногоМассива(МассивИсточник, Свойство, КлючКлюча, КлючЗначения)[Свойство];
КонецФункции

Функция ПолучитьПредставлениеГруппы(СвойстваГруппы, ШаблонПоля = "<p><b>%1: </b><span>%2</span></p>")
	
	ПредставленияСвойств = Новый Массив;
	Для Каждого Свойство Из СвойстваГруппы Цикл
		ПредставленияСвойств.Добавить(СтрШаблон(ШаблонПоля, Свойство.label, Свойство.value));
	КонецЦикла;
	
	Возврат СтрСоединить(ПредставленияСвойств, "");
	
КонецФункции

Функция ПолучитьСвойстваГруппы(СвойстваГруппы)
	
	Результат = Новый Соответствие;
	Для Каждого Свойство Из СвойстваГруппы Цикл
		Результат.Вставить(Свойство.label, Свойство.value);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеЗадачиМетеорПоНомеру(НомерЗадачи)
	
	РезультатВСлучаеОшибки = Неопределено;
	
	Данные = Новый Структура;
	Данные.Вставить("task_id", НомерЗадачи); 
	
	ПараметрыВыполнения = НовыйПараметрыВыполнения();
	ПараметрыВыполнения.ПараметрыЗапроса.АдресРесурса = "TaskDescriptionTP";
	ПараметрыВыполнения.ПараметрыЗапроса.МетодHTTP = МетодыHTTP().GET;
	ПараметрыВыполнения.ПараметрыЗапроса.ДанныеТелаЗапроса = Данные;
	
	РезультатЗапроса = ВыполнитьЗапросAPIМетеор(ПараметрыВыполнения, Истина);
	
	Если РезультатЗапроса = Неопределено ИЛИ ЕстьОшибкаВОтветеAPIМетеор(РезультатЗапроса) Тогда
		Возврат РезультатВСлучаеОшибки;
	КонецЕсли;
	
	Попытка
		Результат = Новый Структура("id,project_id", РезультатЗапроса.data[0].id , РезультатЗапроса.data[0].project_id);
	Исключение
		ТекстОшибки = СтрШаблон(
			"При получении ответа API метеор возникли ошибки.
			|Номер задачи: %1
			|Ошибки:
			|%2",
			НомерЗадачи,
			ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖР("ПолучитьДанныеЗадачиМетеорПоНомеру"),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ТекстОшибки);
		Возврат РезультатВСлучаеОшибки;
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции

Функция УдалитьТеги(ИсходнаяСтрока) Экспорт
	
	Если СтрНайти(ИсходнаяСтрока,"<")=0 Тогда
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ИсходнаяСтрока);
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML); 
	
	Возврат СокрЛП(ДокументHTML.Тело.ТекстовоеСодержимое);
	
КонецФункции

// Находит значение в ответе Метеор - десериализованном json
//
// Параметры:
//  ОбластьПоиска		 - Структура, Массив
//  ЗначениеКлюча		 - Строка - Идентификатор ключа, по которому будет выполняться поиск
//  НайденноеЗначение	 - Произвольный - Параметр, в который будет помещён результат поиска, если элемент будет найден
//  КлючКлюча			 - Строка - Ключ структуры, соедржащий идентификатор ключа элемента
//  КлючЗначения		 - Строка - Ключ структуры, в котором содержится значение
//
Процедура НайтиЗначениеРекурсивноПоКлючу(ОбластьПоиска, ЗначениеКлюча, НайденноеЗначение,  КлючКлюча = "id", КлючЗначения = "value") Экспорт
	ПромежуточноеЗначение = Неопределено;
	Если ТипЗнч(ОбластьПоиска) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ОбластьПоиска Цикл
			НайтиЗначениеРекурсивноПоКлючу(ЭлементМассива, ЗначениеКлюча, ПромежуточноеЗначение, КлючКлюча, КлючЗначения);
			Если Не ПромежуточноеЗначение = Неопределено Тогда
				НайденноеЗначение = ПромежуточноеЗначение;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(ОбластьПоиска) = Тип("Структура") Тогда
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбластьПоиска, КлючКлюча) = ЗначениеКлюча Тогда
			ПромежуточноеЗначение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбластьПоиска, КлючЗначения);
		КонецЕсли;
		Если Не ПромежуточноеЗначение = Неопределено Тогда
			НайденноеЗначение = ПромежуточноеЗначение;
			Возврат;
		КонецЕсли;
		Для Каждого КлючИЗначение Из ОбластьПоиска Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Или ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
				НайтиЗначениеРекурсивноПоКлючу(КлючИЗначение.Значение, ЗначениеКлюча, ПромежуточноеЗначение, КлючКлюча, КлючЗначения);
			КонецЕсли;
			Если Не ПромежуточноеЗначение = Неопределено Тогда
				НайденноеЗначение = ПромежуточноеЗначение;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ИмяСобытияЖР(ВложенноеСобытие = "")
	Возврат "ВнешниеДанные" + ?(ПустаяСтрока(ВложенноеСобытие), "", "." + ВложенноеСобытие);
КонецФункции

Функция ПолучитьСтрокуBase64(Строка)
	
	Поток = Новый ПотокВПамяти();
	ЗаписьТекста = Новый ЗаписьДанных(Поток, , , "", "");
	ЗаписьТекста.ЗаписатьСимволы(Строка);
	ЗаписьТекста.Закрыть();
	Результат = Base64Строка(Поток.ЗакрытьИПолучитьДвоичныеДанные());
	Результат = СтрСоединить(СтрРазделить(Результат, Символ(10)+Символ(13)), "");
	Возврат Результат;
	
КонецФункции

#КонецОбласти