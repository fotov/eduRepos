
#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыгрузитьДополненияВРепозиторийОбработчикЗадания() Экспорт
	
	// В случае ошибки необходимо проверить репозиторий.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьВыгрузкиДополнений.Статус КАК Статус
		|ПОМЕСТИТЬ КрайняяЗаписьОчереди
		|ИЗ
		|	РегистрСведений.ОчередьВыгрузкиДополнений КАК ОчередьВыгрузкиДополнений
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьВыгрузкиДополнений.Период УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИСТИНА КАК СтатусыВыгрузкиДополнений
		|ИЗ
		|	КрайняяЗаписьОчереди КАК КрайняяЗаписьОчереди
		|ГДЕ
		|	КрайняяЗаписьОчереди.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиДополнений.Ошибка)";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	//РегЗадания.ПроверитьРазрешениеЗапускаРегламентныхЗаданий();
	КаталогРепозитория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ПроектыGIT.Дополнения, "КаталогРепозитория");
	КаталогВыгрузкиФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогРепозитория) + "bin";
	ШаблонПутиФайла = КаталогВыгрузкиФайлов + ПолучитьРазделительПути() + "%1" + ПолучитьРазделительПути() + "%2";// КаталогРепозитория/bin/Расширение/ИмяФайлаСРасширением
	ПутьОСкрипт = Константы.Путь_oscript2.Получить();
	ПутьСкриптаВыгрузкиВФайлы = Константы.ПутьСкрипта_ВыгрузкиВФайлы.Получить();
	ШаблонКомандыВыгрузки = СтрШаблон("%1 %2 '%3' '%4'", ПутьОСкрипт, ПутьСкриптаВыгрузкиВФайлы,"%1", КаталогРепозитория); // oscript ПутьСкриптаВыгрузкиВФайлы ПутьКФайлу КорневойКаталогВыгрузки
	// Скрипт выгрузит файлы в этот каталог // %1=Расширение, %2=ИмяФайлаБезрасширения
	ШаблонКаталогаВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогРепозитория)
		+ "src" + ПолучитьРазделительПути() + "%1" + ПолучитьРазделительПути() + "%2";
	ШаблонПутиДобавленияВИндекс = СтрШаблон("'%1'", ШаблонКаталогаВыгрузки);
	
	ТипОболочки = КоманднаяОболочкаКлиентСервер.ТипShell().PowerShell;
	ПараметрыВыполненияКоманд = КоманднаяОболочкаКлиентСервер.КонструкторПараметровВыполненияСкрипта();
	ПараметрыВыполненияКоманд.Таймаут = Константы.ТаймаутРаботаСGIT.Получить();
	ПараметрыВыполненияКоманд.ТекущийКаталог = КаталогРепозитория;
	ПараметрыВыполненияКоманд.ИспользоватьКонтрольБезопасностиКоманд = Ложь;
	//Кодировка.
	//Для корректного отображения вывода на сервере были выполнены настройки:
	//1. В файле настроек git /.git/config указана кодировка:
	//[i18n]
	//    commitencoding = UTF-8
	//    logoutputencoding = UTF-8
	//2. Для Кодировки исполнения установлена кодировка UTF-8
	//3. Кодировка потоков оставлена по умолчанию - т.е. при чтении текста из файлов выбирается из BOM файла, если указана иначе ANSI
	ПараметрыВыполненияКоманд.КодировкаПотоков = Константы.КодировкаПотоковРаботаСGit.Получить();
	ПараметрыВыполненияКоманд.КодировкаИсполнения = Константы.КодировкаИсполненияРаботаСGit.Получить();
	
	// Перед началом помещения нужно получить изменения.
	МассивКоманд = Новый Массив;
	МассивКоманд.Добавить("git pull");
	Результат = КоманднаяОболочкаКлиентСервер.ВыполнитьСкрипт(МассивКоманд, ТипОболочки, ПараметрыВыполненияКоманд);
	Если Результат.КодВозврата <> 0 Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияВыгрузкаДополнений(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Дополнения,
			,
			СтрШаблон("Не удалось получить изменения из удаленного репозитория (pull).
				|Вывод: %1
				|Ошибки: %2",
				Результат.ПотокВывода, Результат.ПотокОшибок));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	ОчередьВыгрузкиДополненийСрезПоследних.ВерсияДополнения КАК ВерсияДополнения,
		|	ОчередьВыгрузкиДополненийСрезПоследних.ВерсияДополнения.Владелец.ИмяФайлаБезРасширенияДляВыгрузки КАК ИмяФайлаБезРасширенияДляВыгрузки,
		|	ОчередьВыгрузкиДополненийСрезПоследних.ВерсияДополнения.Наименование КАК НаименованиеВерсии,
		|	ЕСТЬNULL(ОчередьВыгрузкиДополненийСрезПоследних.ВерсияДополнения.ПометкаУдаления, ИСТИНА) КАК ПометкаУдаления
		|ИЗ
		|	РегистрСведений.ОчередьВыгрузкиДополнений.СрезПоследних(, ) КАК ОчередьВыгрузкиДополненийСрезПоследних
		|ГДЕ
		|	ОчередьВыгрузкиДополненийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиДополнений.ВОчереди)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьВыгрузкиДополненийСрезПоследних.Период";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КоличествоИзменений = 0;
	ШаблонСообщенияВыгрузки = Символы.ПС + "### Выгрузка в файлы ###" + Символы.ПС + "%1" + Символы.ПС;
	ШаблонСообщенияИндексации = Символы.ПС + "### git add ###" + Символы.ПС + "%1" + Символы.ПС;
	ШаблонСообщенияКоммита = Символы.ПС + "### git commit ###" + Символы.ПС + "%1" + Символы.ПС;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЕстьОшибки = Ложь;
		ПотокВывода = "";
		ПотокОшибок = "";
		Если ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
			ЗаписатьСтатусВыгрузки(
				ВыборкаДетальныеЗаписи.ВерсияДополнения,
				ТекущаяДатаСеанса(),
				Перечисления.СтатусыВыгрузкиДополнений.Выгружено,
				"Версия дополнения помечена на удаление. Выгрузка версии пропущена.");
			Продолжить;
		КонецЕсли;
		
		СписокФайлов = Новый Массив;
		РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВыборкаДетальныеЗаписи.ВерсияДополнения, СписокФайлов);
		Если Не СписокФайлов.Количество() Тогда
			ЗаписьЖурналаРегистрации(
				ИмяСобытияВыгрузкаДополнений(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Дополнения,
				ВыборкаДетальныеЗаписи.ВерсияДополнения,
				"Не найден файл версии дополнения.");
			Продолжить;
		КонецЕсли;
		// Файл у версии должен быть только один. Если их несколько, используем первый.
		ПрисоединенныйФайл = СписокФайлов[0];
		
		НачатьТранзакцию();
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьВыгрузкиДополнений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ВерсияДополнения", ВыборкаДетальныеЗаписи.ВерсияДополнения);
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ВерсииДополненийПрисоединенныеФайлы");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПрисоединенныйФайл);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла.ВызыватьИсключение = Ложь;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ПараметрыДанныхФайла);
		Если ДанныеФайла = Неопределено Тогда
			ЗаписьЖурналаРегистрации(
				ИмяСобытияВыгрузкаДополнений(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Дополнения,
				ВыборкаДетальныеЗаписи.ВерсияДополнения,
				"Не удалось получить данные файла версии дополнения");
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Если ДанныеФайла = Неопределено Тогда
			ЗаписьЖурналаРегистрации(
				ИмяСобытияВыгрузкаДополнений(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Дополнения,
				ВыборкаДетальныеЗаписи.ВерсияДополнения,
				"Не удалось получить данные файла по ссылке");
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		ИмяФайлаБезРасширенияДляВыгрузки = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			ВыборкаДетальныеЗаписи.ИмяФайлаБезРасширенияДляВыгрузки);
		ИмяФайлаСРасширением = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ИмяФайлаБезРасширенияДляВыгрузки, ДанныеФайла.Расширение);
		ПутьФайлаДополнения = СтрШаблон(ШаблонПутиФайла, ДанныеФайла.Расширение, ИмяФайлаСРасширением);
		ДвоичныеДанныеФайла.Записать(ПутьФайлаДополнения);
		
		// Выгрузка в файлы
		МассивКоманд.Очистить();
		МассивКоманд.Добавить(СтрШаблон(ШаблонКомандыВыгрузки, ПутьФайлаДополнения));
		Результат = КоманднаяОболочкаКлиентСервер.ВыполнитьСкрипт(МассивКоманд, ТипОболочки, ПараметрыВыполненияКоманд);
		ЕстьОшибки = Результат.КодВозврата <> 0;
		ПотокВывода = ПотокВывода + СтрШаблон(ШаблонСообщенияВыгрузки, Результат.ПотокВывода);
		ПотокОшибок = ПотокОшибок + СтрШаблон(ШаблонСообщенияВыгрузки, Результат.ПотокОшибок);
		Если ЕстьОшибки Тогда
			ЗаписьЖурналаРегистрации(
				ИмяСобытияВыгрузкаДополнений(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Дополнения,
				,
				СтрШаблон("Не удалось выгрузить дополнение в файлы.
					|Вывод: %1
					|Ошибки: %2",
					Результат.ПотокВывода, Результат.ПотокОшибок));
		КонецЕсли;
				
		Если Не ЕстьОшибки Тогда
			МассивКоманд.Очистить();
			МассивКоманд.Добавить(РаботаСGIT.ТекстКоманды_GitAdd(
				СтрШаблон(ШаблонПутиДобавленияВИндекс , ДанныеФайла.Расширение, ИмяФайлаБезРасширенияДляВыгрузки)));
			Результат = КоманднаяОболочкаКлиентСервер.ВыполнитьСкрипт(МассивКоманд, ТипОболочки, ПараметрыВыполненияКоманд);
			// git иногда записывает вывод в поток ошибок, нужно анализировать сообщение.
			ЕстьОшибкиДобавленияВИндекс = Результат.КодВозврата <> 0; // Ошибка при индексации
			ПотокВывода = ПотокВывода + СтрШаблон(ШаблонСообщенияИндексации, Результат.ПотокВывода);
			ПотокОшибок = ПотокОшибок + СтрШаблон(ШаблонСообщенияИндексации, Результат.ПотокОшибок);
			Если ЕстьОшибкиДобавленияВИндекс Тогда
				// Отменяем изменения и индексацию
				МассивКоманд.Очистить();
				МассивКоманд.Добавить("git rm -r --cached " + 
					СтрШаблон(ШаблонПутиДобавленияВИндекс , ДанныеФайла.Расширение, ИмяФайлаБезРасширенияДляВыгрузки));
				МассивКоманд.Добавить(РаботаСGIT.ТекстКоманды_GitCommit(ВыборкаДетальныеЗаписи.НаименованиеВерсии));
				Результат = КоманднаяОболочкаКлиентСервер.ВыполнитьСкрипт(МассивКоманд, ТипОболочки, ПараметрыВыполненияКоманд);
				Попытка
					УдалитьФайлы(ШаблонКаталогаВыгрузки);
				Исключение
				КонецПопытки;
			КонецЕсли;
			ЕстьОшибки = ЕстьОшибки Или ЕстьОшибкиДобавленияВИндекс;
		КонецЕсли;
		Если Не ЕстьОшибки Тогда
			МассивКоманд.Очистить();
			МассивКоманд.Добавить(РаботаСGIT.ТекстКоманды_GitCommit(ВыборкаДетальныеЗаписи.НаименованиеВерсии));
			Результат = КоманднаяОболочкаКлиентСервер.ВыполнитьСкрипт(МассивКоманд, ТипОболочки, ПараметрыВыполненияКоманд);
			ЕстьОшибкиКоммита = Результат.КодВозврата <> 0 И СтрНайти(Результат.ПотокОшибок, "Auto packing the repository") = 0;
			ЕстьОшибки = ЕстьОшибки Или ЕстьОшибкиКоммита;
			ПотокВывода = ПотокВывода + СтрШаблон(ШаблонСообщенияКоммита, Результат.ПотокВывода);
			ПотокОшибок = ПотокОшибок + СтрШаблон(ШаблонСообщенияКоммита, Результат.ПотокОшибок);
		КонецЕсли;
		
		СтатусВыгрузки = ?(ЕстьОшибки,
			Перечисления.СтатусыВыгрузкиДополнений.Ошибка,
			Перечисления.СтатусыВыгрузкиДополнений.Выгружено);
		Комментарий = СтрШаблон("Вывод: %1" "Ошибки: %2", ПотокВывода, ПотокОшибок);
		ЗаписатьСтатусВыгрузки(ВыборкаДетальныеЗаписи.ВерсияДополнения, ТекущаяДатаСеанса(), СтатусВыгрузки, Комментарий);
		СтатусВерсии = ?(ЕстьОшибки,
			Перечисления.СтатусыИсторииХранилищ.Ошибка,
			БизнесПроцессы.ПредварительнаяПроверка.ОсновнойСтатус());
		РаботаСДополнениями.ЗаписатьСтатусВерсии(ВыборкаДетальныеЗаписи.ВерсияДополнения, СтатусВерсии);
		Если Не СтатусВыгрузки = Перечисления.СтатусыВыгрузкиДополнений.Ошибка Тогда
			// Запись информации о коммите
			МассивКоманд.Очистить();
			МассивКоманд.Добавить("git rev-parse HEAD");		
			Результат = КоманднаяОболочкаКлиентСервер.ВыполнитьСкрипт(МассивКоманд, ТипОболочки, ПараметрыВыполненияКоманд);
			ЗаписатьКоммитДополнения(ВыборкаДетальныеЗаписи.ВерсияДополнения, Результат.ПотокВывода);
		КонецЕсли;
		КоличествоИзменений = ?(Не ЕстьОшибки, КоличествоИзменений + 1, КоличествоИзменений);
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	Если КоличествоИзменений Тогда
		// push в powershell записывает вывод в поток ошибок, поэтому делаем перенаправление.
		МассивКоманд = Новый Массив;
		МассивКоманд.Добавить(РаботаСGIT.ТекстКоманды_GitPush());
		Результат = КоманднаяОболочкаКлиентСервер.ВыполнитьСкрипт(МассивКоманд, ТипОболочки, ПараметрыВыполненияКоманд);
		Если Не (СтрНайти(Результат.ПотокОшибок, "fatal") = 0) Тогда
			ЗаписьЖурналаРегистрации(
				ИмяСобытияВыгрузкаДополнений(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Дополнения,
				,
				СтрШаблон("Не удалось отправить изменения дополнений в удалённый репозиторий." "Вывод: %1" "Ошибки: %2",
					Результат.ПотокВывода, Результат.ПотокОшибок));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСтатусВыгрузки(ВерсияДополнения, Период, Статус, Комментарий = "") Экспорт
	
	Набор = РегистрыСведений.ОчередьВыгрузкиДополнений.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(Период);
	Набор.Отбор.ВерсияДополнения.Установить(ВерсияДополнения);
	Запись = Набор.Добавить();
	Запись.Период = Период;
	Запись.ВерсияДополнения = ВерсияДополнения;
	Запись.Статус = Статус;
	Запись.Комментарий = Комментарий;
	
	Попытка
		Набор.Записать(Ложь);
	Исключение
		// Запись уже есть в регистре. Действий не требуется
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановкаСтатусаДополненийОбработчикЗадания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыДополненийСрезПоследних.ВерсияДополнения КАК ВерсияДополнения,
		|	СтатусыДополненийСрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ ДополненияВСтатусеЗагрузки
		|ИЗ
		|	РегистрСведений.СтатусыДополнений.СрезПоследних КАК СтатусыДополненийСрезПоследних
		|ГДЕ
		|	СтатусыДополненийСрезПоследних.Статус = &СтатусЗагрузкаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КоммитыДополненийСрезПоследних.ВерсияДополнения КАК ВерсияДополнения,
		|	КоммитыДополненийСрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ КоммитыДополнений
		|ИЗ
		|	РегистрСведений.КоммитыДополнений.СрезПоследних(
		|			,
		|			ВерсияДополнения В
		|				(ВЫБРАТЬ
		|					ДополненияВСтатусеЗагрузки.ВерсияДополнения
		|				ИЗ
		|					ДополненияВСтатусеЗагрузки КАК ДополненияВСтатусеЗагрузки)) КАК КоммитыДополненийСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополненияВСтатусеЗагрузки.ВерсияДополнения КАК ВерсияДополнения,
		|	КоммитыДополнений.Период КАК Период
		|ИЗ
		|	ДополненияВСтатусеЗагрузки КАК ДополненияВСтатусеЗагрузки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоммитыДополнений КАК КоммитыДополнений
		|		ПО ДополненияВСтатусеЗагрузки.ВерсияДополнения = КоммитыДополнений.ВерсияДополнения
		|			И ДополненияВСтатусеЗагрузки.Период < КоммитыДополнений.Период";
	
	Запрос.УстановитьПараметр("СтатусЗагрузкаДанных", Перечисления.СтатусыИсторииХранилищ.ЗагрузкаДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписатьСтатусВыгрузки(
			ВыборкаДетальныеЗаписи.ВерсияДополнения,
			ВыборкаДетальныеЗаписи.Период,
			БизнесПроцессы.ПредварительнаяПроверка.ОсновнойСтатус());
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗагрузкаНовыхДополненийОбработчикЗадания() Экспорт
	
	ТипыДополнений = Новый Массив;
	ТипыДополнений.Добавить(Перечисления.ТипыДополнений.ДополнительныйОтчетИлиОбработка);
	ТипыДополнений.Добавить(Перечисления.ТипыДополнений.Расширение);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Базы1С.Ссылка КАК База
		|ИЗ
		|	Справочник.Базы1С КАК Базы1С
		|ГДЕ
		|	НЕ Базы1С.АдресСервисаДополнений = """"
		|	И НЕ Базы1С.ПометкаУдаления
		|	И НЕ Базы1С.ЭтоКопия";
	
	ВыборкаБазы = Запрос.Выполнить().Выбрать();
	
	Для Каждого ТипДополнения Из ТипыДополнений Цикл
		Пока ВыборкаБазы.Следующий() Цикл
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон("Получаем %1. База %2", ТипДополнения, ВыборкаБазы.База));
			ПолучитьНовыеДополнения(ТипДополнения, ВыборкаБазы.База)
		КонецЦикла;
		ВыборкаБазы.Сбросить();
	КонецЦикла;
		
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяСобытияВыгрузкаДополнений()
	Возврат "Дополнения.Выгрузка";
КонецФункции

Процедура ЗаписатьКоммитДополнения(ВерсияДополнения, ХешКоммита)
	Менеджер = РегистрыСведений.КоммитыДополнений.СоздатьМенеджерЗаписи();
	Менеджер.Период = ТекущаяДата();
	Менеджер.ВерсияДополнения = ВерсияДополнения;
	Менеджер.Хеш = ХешКоммита;
	Менеджер.Записать();
КонецПроцедуры

Процедура ПолучитьНовыеДополнения(ТипДополнения, База)
	
	СостояниеДополнений = РаботаСДополнениями.ПолучитьСостояниеДополнений(ТипДополнения, База);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеДополнений", СостояниеДополнений);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеДополнений.База КАК База,
		|	СостояниеДополнений.ТипДополнения КАК ТипДополнения,
		|	СостояниеДополнений.Имя КАК Имя,
		|	СостояниеДополнений.ИмяФайла КАК ИмяФайла,
		|	СостояниеДополнений.Синоним КАК Синоним,
		|	СостояниеДополнений.Версия КАК Версия,
		|	СостояниеДополнений.БезопасныйРежим КАК БезопасныйРежим,
		|	СостояниеДополнений.ЗащитаОтОпасныхДействий КАК ЗащитаОтОпасныхДействий,
		|	СостояниеДополнений.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	СостояниеДополнений.Активно КАК Активно
		|ПОМЕСТИТЬ СостояниеДополнений
		|ИЗ
		|	&СостояниеДополнений КАК СостояниеДополнений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостояниеДополнений.База КАК База,
		|	СостояниеДополнений.ТипДополнения КАК ТипДополнения,
		|	СостояниеДополнений.Имя КАК Имя,
		|	СостояниеДополнений.ИмяФайла КАК ИмяФайла,
		|	СостояниеДополнений.Синоним КАК Синоним,
		|	СостояниеДополнений.Версия КАК Версия,
		|	СостояниеДополнений.БезопасныйРежим КАК БезопасныйРежим,
		|	СостояниеДополнений.ЗащитаОтОпасныхДействий КАК ЗащитаОтОпасныхДействий,
		|	СостояниеДополнений.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	СостояниеДополнений.Активно КАК Активно,
		|	ВЫБОР
		|		КОГДА СостояниеДополнений.Активно
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ИндексКартинки,
		|	ВерсииДополнений.Ссылка КАК ВерсияДополнения,
		|	ВерсииДополнений.Владелец КАК Дополнение,
		|	ВЫБОР
		|		КОГДА СостояниеДополнений.Активно
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияДополнений.Включено)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияДополнений.Отключено)
		|	КОНЕЦ КАК Состояние
		|ИЗ
		|	СостояниеДополнений КАК СостояниеДополнений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииДополнений КАК ВерсииДополнений
		|		ПО СостояниеДополнений.Имя = ВерсииДополнений.Владелец.Наименование
		|			И СостояниеДополнений.Версия = ВерсииДополнений.Версия";
	
	СостояниеДополнений = Запрос.Выполнить().Выгрузить();
	
	ОтборНовых = Новый Структура(
		"ВерсияДополнения, ТипДополнения",
		Справочники.ВерсииДополнений.ПустаяСсылка(),
		ТипДополнения);
	СтрокиНовыхДополнений = СостояниеДополнений.НайтиСтроки(ОтборНовых);
	
	Если Не СтрокиНовыхДополнений.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Необходимо получать одинаковые дополнения только из одной базы, чтобы избежать дублирования
	НовыеДополнения = СостояниеДополнений.Скопировать(СтрокиНовыхДополнений);
	ИменаНовыеДополнения = НовыеДополнения.Скопировать(, "Имя");
	ИменаНовыеДополнения.Свернуть("Имя");
	ДополненияКПолучению = Новый Массив;
	Для Каждого СтрокаИмениДополения Из ИменаНовыеДополнения Цикл
		ИмяДополнения = СтрокаИмениДополения.Имя;
		ДополненияКПолучению.Добавить(НовыеДополнения.Найти(ИмяДополнения, "Имя"));
	КонецЦикла;
	
	Если Не ДополненияКПолучению.Количество() Тогда
		Возврат;		
	КонецЕсли;
	РаботаСДополнениями.ПолучитьНовыеДополнения(ТипДополнения, ДополненияКПолучению);
	
КонецПроцедуры

#КонецОбласти